#ifndef __PE_NT_H__
#define __PE_NT_H__

#include "pe_base"
#include "pe_int128"
#include "pe_mod"
#include "pe_nt_base"
#include "pe_tree"
#include "pe_type_traits"

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(int) is_even(T v) {
  return (v & 1) == 0 ? 1 : 0;
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(int) is_odd(T v) {
  return (v & 1) == 0 ? 0 : 1;
}

template <typename T0, typename T1>
SL REQUIRES((is_native_integer<T0>::value && is_native_integer<T1>::value))
    RETURN(int) same_parity(T0 v0, T1 v1) {
  const int x = (int)(v0 & 1);
  const int y = (int)(v1 & 1);
  return x == y ? 1 : 0;
}

// 90000000599999991
SL int64 sqrti(int64 d) {
  const auto result = static_cast<int64>(sqrt(d));
  return result * result > d ? result - 1 : result;
}

#if PE_HAS_INT128
SL int64 sqrti(int128 d) {
  const int64 result = sqrt(static_cast<long double>(d));
  return static_cast<int128>(result) * result > d ? result - 1 : result;
}
#endif

SL int64 square_root_safe(int64 n) {
  if (n <= 0) return 0;
  if (n == 1) return 1;
  for (int64 test = sqrti(n);; ++test) {
    const int64 t = test * test;
    if (t == n) return test;
    if (t > n) return 0;
  }
  return 0;
}

SL int64 square_root_unsafe(int64 n) {
  if (n <= 0) return 0;
  if (n == 1) return 1;
  int64 ret = sqrti(n);
  return ret * ret == n ? ret : 0;
}

SL int64 square_root(int64 n) {
  if (n <= 0) return 0;
  if (n == 1) return 1;
  // see Donald L. Graham, Donald E. Knuth, Oren Patashnik, CONCRETE
  // MATHEMATICS, pp 70-72
  // int64 ret = static_cast<int64>(sqrt(n + 0.5));
  int64 ret = sqrti(n);
  return ret * ret == n ? ret : 0;
}

SL int is_square_free_normal(int64 n) {
  for (auto& iter : factorize(n))
    if (iter.second > 1) {
      return 0;
    }
  return 1;
}

SL int is_square_free_by_pmask(int64 n) {
  while (n != 1) {
    int now = pmask[n];
    int c = 0;
    while (n % now == 0) n /= now, ++c;
    if (c > 1) return 0;
  }
  return 1;
}

SL int is_square_free(int64 n) {
  if (n <= 0) {
    return 0;
  }

  for (int i = 0; i < pcnt; ++i) {
    if (n <= maxp) {
      return is_square_free_by_pmask(n);
    }
    const int64 p = plist[i];
    const int64 test = p * p;
    if (test > n) break;
    int c = 0;
    while (n % p == 0) n /= p, ++c;
    if (c > 1) return 0;
  }
  return 1;
}

template <typename T1, typename T2>
SL REQUIRES((is_native_integer<T1>::value && is_native_integer<T2>::value))
    RETURN(T1) power(T1 x, T2 n) {
  T1 ret = 1;
  for (; n; n >>= 1) {
    if (n & 1) ret = ret * x;
    if (n > 1) x = x * x;
  }
  return ret;
}

template <typename T1, typename T2>
SL tuple<T1, int64> extract_factor(T1 A, T2 B) {
  int64 c = 0;
  while (A && A % B == 0) A = (T1)(A / B), ++c;
  return tuple<T1, int64>{A, c};
}

// Greatest common divisor and extend greatest common divisor
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(T) gcd(T __m, T __n) {
  while (__n != 0) {
    T __t = __m % __n;
    __m = __n;
    __n = __t;
  }
  return __m;
}

template <typename T0, typename T1>
SL REQUIRES((is_native_integer<T0>::value && is_native_integer<T1>::value))
    RETURN_T(IntPromotionT(T0, T1)) gcd(T0 __m, T1 __n) {
  typedef IntPromotion(T0, T1) ResultType;
  return gcd((ResultType)__m, (ResultType)__n);
}

template <typename T>
SL T gcd(T a) {
  return a;
}

template <typename TH, typename... TT>
SL IntPromotion(TH, TT...) gcd(TH a, TT... b) {
  return gcd(a, gcd(b...));
}

template <typename T>
SL REQUIRES(is_native_integer<T>::value) RETURN(T)
    gcd(std::initializer_list<T> init) {
  T ret = 0;
  for (auto& v : init) {
    if (ret == 0) {
      ret = v;
    } else {
      ret = gcd(ret, v);
    }
  }
  return ret;
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_signed<T>::value)) RETURN(T)
    exgcd_impl(T a, T b, T& x, T& y) {
  if (b == 0) {
    x = 1;
    y = 0;
    return a;
  }

  T x1 = 0, y1 = 0;
  const T ret = exgcd_impl(b, a % b, x1, y1);
  // b * x1 + (a%b) * y1 = ret
  // b * x1 + (a - a / b * b) * y1 = ret
  // b * x1 + a * y1 - a / b * b * y1 = ret
  // y1 * a + (x1 - a / b * y1) b = ret
  x = y1;
  y = x1 - a / b * y1;
  return ret;
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_signed<T>::value)) RETURN(T)
    exgcd(T a, T b, T& x, T& y) {
  PE_ASSERT(a != 0 || b != 0);
  const T r = exgcd_impl(a, b, x, y);
  PE_ASSERT(a * x + b * y == r);
  return r;
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_signed<T>::value))
    RETURN(tuple<T, T, T>) exgcd(T a, T b) {
  PE_ASSERT(a != 0 || b != 0);
  T x = 0, y = 0;
  const T r = exgcd_impl(a, b, x, y);
  PE_ASSERT(a * x + b * y == r);
  return tuple<T, T, T>{r, x, y};
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_signed<T>::value)) RETURN(T)
    mod_inv(T a, T mod) {
  T b = mod, s = 1, t = 0, old_a = a;
  while (b > 0) {
    swap(s -= t * (a / b), t);
    swap(a %= b, b);
  }
  if (a > 1) {
    cerr << "mod inv error: " << old_a << " " << mod << endl;
    exit(1);
  }
  return T(s) < 0 ? s + mod : s;
}

// p is prime
SL int64 inv_of(int64 x, int64 p) { return power_mod_ex(x, p - 2, p); }

// solve equation a x = b (mod m)
// return 0 and set u = -1 and v = 0 if failed
// return 1, x = v (mod u)
template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_signed<T>::value)) RETURN(int)
    solve_linear_equation(T a, T b, T m, T& v, T& u) {
  v = 0;
  u = 0;

  PE_ASSERT(m);

  if (m < 0) m = -m;

  if (sizeof(T) <= 8) {
    PE_ASSERT(m <= PE_SOI63);
  }

  a %= m;
  b %= m;

  if (a < 0) a += m;
  if (b < 0) b += m;

  T xx = 0, yy = 0, d = exgcd(a, m, xx, yy);

  if (b % d) return 0;

  xx = (xx % m + m) % m;
  xx = xx * (b / d) % m;

  u = m / d;
  v = xx % u;

  return 1;
}

// solve equation x = a (mod m1) x = b (mod m2)
// return 0 and set u = 0 and t = 0 if failed
// return 1, x = v (mod u)
template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_signed<T>::value)) RETURN(int)
    crt2(T a, T m1, T b, T m2, T& v, T& u) {
  v = 0;
  u = 0;

  PE_ASSERT(m1 != 0 && m2 != 0);
  if (m1 < 0) m1 = -m1;
  if (m2 < 0) m2 = -m2;
  // x = a (mod m1)
  // x = b (mod m2)
  // x = k0 m1 + a
  // k0 m1 + a = b (mod m2)
  // k0 m1 = b - a (mod m2)
  a %= m1;
  b %= m2;
  if (a < 0) a = -a;
  if (b < 0) b = -b;

  T s = 0, t = 0;
  if (!solve_linear_equation(m1, b - a, m2, t, s)) return 0;
  // k0 = k1 * s + t
  // x = (k1 * s + t) * m1 + a
  // x = k1 * s * m1 + (a + t * m1)

  u = s * m1;
  v = ((a + t * m1) % u + u) % u;
  return 1;
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_signed<T>::value))
    RETURN(tuple<int, T, T>) crt2(T a, T m1, T b, T m2) {
  T v = 0, u = 0;
  int r = crt2(a, m1, b, m2, v, u);
  return tuple<int, T, T>{r, v, u};
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_signed<T>::value))
    RETURN(tuple<int, T, T>) crtn(T* val, T* mod, int n) {
  PE_ASSERT(val != NULL && mod != NULL);
  T v = 0, u = 1;
  int have = 1;
  for (int i = 0; i < n; ++i) {
    tie(have, v, u) = crt2(v, u, val[i], mod[i]);
    if (!have) {
      return tuple<int, T, T>{0, 0, 0};
    }
  }
  return tuple<int, T, T>{have, v, u};
}

/**
 * dest[0] = 0
 * dest[1] = 1
 * dest[2] = 1 / 2
 * dest[n-1] = 1 / (n-1)
 *
 * n can be greater than mod
 */
template <typename T, typename M>
SL void init_inv(T* dest, int64 n, M mod) {
  PE_ASSERT(n >= 1);
  dest[0] = 0;
  if (n > 1) {
    dest[1] = 1;
  }
  auto maxi = min(n, (int64)mod);
  for (int i = 2; i < maxi; ++i) {
    const auto t = mod / i;
    const auto k = mod % i;
    const auto v = mul_mod_ex(t, t, mod);
    const auto u = mul_mod_ex(dest[k], dest[k], mod);
    dest[i] = (T)mul_mod_ex(i, mul_mod_ex(v, u, mod), mod);
  }
  for (auto i = mod; i < n; ++i) {
    dest[i] = dest[i - mod];
  }
}

/**
 * dest[0] = 1
 * dest[1] = s
 * dest[2] = s(s+1)
 * dest[e-s+1]=s(s+1)...e
 */
template <typename T>
SL void init_seq_prod(T* dest, T s, T e, int64 mod) {
  dest[0] = 1;

  const int cnt = (int)(e - s + 1);
  T i = s;
  for (int j = 1; j <= cnt; ++i, ++j) {
    dest[j] = mul_mod_ex(dest[j - 1], i, mod);
  }
}

/**
 * dest[0] = 1
 * dest[1] = 1/s
 * dest[2] = 1/(s(s+1))
 * dest[e-s+1]=1/(s(s+1)...e))
 */
template <typename T>
SL void init_seq_prod_inv(T* dest, T s, T e, T mod, T lastv = 0) {
  if (lastv == 0) {
    lastv = 1;
    for (T i = s; i <= e; ++i) {
      lastv = mul_mod_ex(lastv, i, mod);
    }
    lastv = power_mod_ex(lastv, mod - 2, mod);
  }
  const int cnt = (int)(e - s + 1);
  dest[0] = 1;
  dest[cnt] = lastv;

  T i = e;
  for (int j = cnt - 1; j > 0; --j) {
    dest[j] = mul_mod_ex(dest[j + 1], i--, mod);
  }
}

// Primitive Root
namespace pr {

/*
  test, find the primitive of a prime
*/
SL bool is_pr(int64 x, int64 p, const vector<pair<int64, int>>& f) {
  return std::none_of(std::begin(f), std::end(f),
                      [=](const pair<int64, int>& it) {
                        return power_mod_ex(x, (p - 1) / it.first, p) == 1;
                      });
}

SL bool is_pr(int64 x, int64 p) { return is_pr(x, p, factorize(p - 1)); }

SL int64 find_pr(int64 p) {
  if (p <= 1) return -1;
  if (p == 2) return 1;
  auto fp1 = factorize(p - 1);
  for (int64 i = 2;; ++i)
    if (is_pr(i, p, fp1)) return i;
  return -1;
}

SL int64 find_pr(int64 p, const vector<pair<int64, int>>& fp1) {
  if (p <= 1) return -1;
  if (p == 2) return 1;
  for (int64 i = 2;; ++i)
    if (is_pr(i, p, fp1)) return i;
  return -1;
}

SL int64 ind(int64 a, int64 pr, int64 p) {
  typedef unordered_map<int64, int> map_t;
  PE_ASSERT(a > 0);
  int64 inv_pr = inv_of(pr, p);
  auto mx = static_cast<int64>(sqrt(double(p - 1) + 0.5));
  if (mx * mx != p - 1) ++mx;
  map_t mem;
  int64 t1 = 1, t2 = a;
  for (unsigned int i = 0; i <= mx - 1; ++i) {
    mem[t2] = i;
    t2 = t2 * inv_pr % p;
  }
  int64 temp = power_mod_ex(pr, mx, p);
  for (unsigned int i = 0; i <= mx - 1; ++i) {
    auto where = mem.find(t1);
    if (where != mem.end()) {
      return i * mx + where->second;
    }
    t1 = t1 * temp % p;
  }
  return -1;
}

class ind_solver {
  typedef unordered_map<int64, int> map_t;
  static int64 square_root_for_ind(int64 x) {
    auto ret = static_cast<int64>(sqrt(double(x)));
    if (ret * ret < x) ++ret;
    PE_ASSERT(ret * ret >= x);
    return ret;
  }

 public:
  ind_solver(const int64 p, int64 pr = -1)
      : p_(p), pr_(pr < 0 ? find_pr(p) : pr), mx_(square_root_for_ind(p_ - 1)) {
    const int64 inv_pr = inv_of(pr_, p);
    int64 t = 1;
    for (int i = 0; i <= mx_ - 1; ++i) {
      mem_[t] = i;
      t = t * inv_pr % p_;
    }
  }

  int64 operator()(int64 a) const {
    PE_ASSERT(a > 0);
    a %= p_;

    const int64 temp = power_mod_ex(pr_, mx_, p_);
    const int64 inv_a = inv_of(a, p_);
    int64 t = 1;

    for (int i = 0; i <= mx_ - 1; ++i) {
      auto where = mem_.find(mul_mod(t, inv_a, p_));
      if (where != mem_.end()) {
        return i * mx_ + where->second;
      }
      t = t * temp % p_;
    }

    return -1;
  }

  int64 pr() const { return pr_; }

 private:
  const int64 p_;
  const int64 pr_;
  const int64 mx_;
  map_t mem_;
};
}  // namespace pr

template <typename T>
class DVA {
 public:
  template <typename IT>
  struct DVARange {
    IT first;
    IT last;
    DVARange(IT first, IT last) : first(first), last(last) {}
    IT begin() { return first; }
    IT end() { return last; }
  };
  template <typename IT>
  DVARange<IT> makeRange(IT first, IT last) const {
    return DVARange<IT>(first, last);
  }

 public:
  int64 n;
  int64 m;
  int isPerfectSquare;

  std::vector<int64> keys;
  std::vector<T> values;
  int keySize;

  DVA(int64 n)
      : n(n), m(static_cast<int64>(sqrt(n))), isPerfectSquare(m * m == n) {
    keys.push_back(0);

    for (int64 i = 1; i <= m; ++i) {
      keys.push_back(i);
    }
    for (int64 i = n / m > m ? m : m - 1; i >= 1; --i) {
      keys.push_back(n / i);
    }
    keySize = (int)keys.size();
    values.resize(keys.size());
    fill(values.begin(), values.end(), 0);
  }

  DVA(const DVA& other) = default;
  DVA(DVA&& other) = default;
  DVA& operator=(const DVA& other) = default;
  DVA& operator=(DVA&& other) = default;

  int idxOfValue(int64 v) const { return (int)(v <= m ? v : keySize - n / v); }

  T& operator[](int64 v) { return values[idxOfValue(v)]; }

  T operator[](int64 v) const { return values[idxOfValue(v)]; }

  DVARange<std::vector<int64>::const_iterator> fKeys() const {
    return makeRange(keys.begin() + 1, keys.end());
  }

  DVARange<std::vector<int64>::const_reverse_iterator> bKeys() const {
    return makeRange(keys.rbegin(), keys.rend() - 1);
  }
};

template <typename T>
SL DVA<T> prime_s0(const int64 n) {
  PE_ASSERT(n >= 1);
  DVA<T> dva(n);

  for (auto& key : dva.fKeys()) dva[key] = key - 1;

  for (int64 p = 2; p <= dva.m; ++p)
    if (dva[p] != dva[p - 1]) {
      const auto pcnt = dva[p - 1];
      const int64 p2 = p * p;
      for (auto& key : dva.bKeys()) {
        if (key < p2) break;
        dva[key] -= dva[key / p] - pcnt;
      }
    }
  return dva;
}

#define prime_pi prime_s0

template <typename T>
SL DVA<T> prime_s1(const int64 n) {
  PE_ASSERT(n >= 1);
  DVA<T> dva(n);
  for (auto& key : dva.fKeys()) {
    if (key & 1) {
      T v((key + 1) >> 1);
      dva[key] = v * key - 1;
    } else {
      T v(key >> 1);
      dva[key] = v * (key + 1) - 1;
    }
  }

  for (int64 p = 2; p <= dva.m; ++p)
    if (dva[p] != dva[p - 1]) {
      const auto psum = dva[p - 1];
      const int64 p2 = p * p;
      for (auto& key : dva.bKeys()) {
        if (key < p2) break;
        dva[key] -= (dva[key / p] - psum) * p;
      }
    }
  return dva;
}

#define prime_sum prime_s1

template <typename T>
SL DVA<T> prime_s0_ex(const int64 n) {
  PE_ASSERT(n >= 1);
  DVA<T> dva(n);

  const int keySize = dva.keySize;
  RUBit<T> tree(keySize);

  for (auto& key : dva.fKeys()) {
    const int id = dva.idxOfValue(key);
    tree.update(id, id, key - 1);
  }

  for (int64 p = 2; p <= dva.m; ++p)
    if (is_prime(p)) {
      const auto pcnt = tree.query(static_cast<int>(p - 1));
      const int64 p2 = p * p;
      const int a = keySize - 1;
      const int b = dva.idxOfValue(p2);
      for (int i = a; i >= b;) {
        const auto delta = tree.query(dva.idxOfValue(dva.keys[i] / p)) - pcnt;
        const int mini = max(dva.idxOfValue(dva.keys[i] / p * p), b);
        tree.update(mini, i, -delta);
        i = mini - 1;
      }
    }
  for (int i = 1; i < keySize; ++i) dva[dva.keys[i]] = tree.query(i);
  return dva;
}

template <typename T>
SL DVA<T> prime_s1_ex(const int64 n) {
  PE_ASSERT(n >= 1);
  DVA<T> dva(n);

  const int keySize = dva.keySize;
  RUBit<T> tree(keySize);

  for (auto& key : dva.fKeys()) {
    const int id = dva.idxOfValue(key);

    if (key & 1) {
      T v((key + 1) >> 1);
      tree.update(id, id, v * key - 1);
    } else {
      T v(key >> 1);
      tree.update(id, id, v * (key + 1) - 1);
    }
  }

  for (int64 p = 2; p <= dva.m; ++p)
    if (is_prime(p)) {
      const auto psum = tree.query(static_cast<int>(p - 1));
      const int64 p2 = p * p;
      const int a = keySize - 1;
      const int b = dva.idxOfValue(p2);
      for (int i = a; i >= b;) {
        const auto delta = tree.query(dva.idxOfValue(dva.keys[i] / p)) - psum;
        const int mini = max(dva.idxOfValue(dva.keys[i] / p * p), b);
        tree.update(mini, i, -delta * p);
        i = mini - 1;
      }
    }

  for (int i = 1; i < keySize; ++i) dva[dva.keys[i]] = tree.query(i);
  return dva;
}

template <typename T>
SL vector<DVA<T>> prime_s0_pmod_even(int64 n, int mod) {
  vector<DVA<T>> result;
  for (int i = 0; i < mod; ++i) result.emplace_back(n);

  for (int i = 1; i < mod; i += 2) {
    auto& target = result[i];
    const int dec = i == 1;
    for (auto key : result[0].fKeys())
      target[key] = (key + mod - i) / mod - dec;
  }
  for (int i = 1;; ++i) {
    const int64 p = plist[i];
    const int64 p2 = p * p;
    if (p2 > n) break;
    for (auto key : result[0].bKeys()) {
      if (key < p2) break;
      const int rp = p % mod;
      for (int j = 1; j < mod; j += 2) {
        const int next = rp * j % mod;
        result[next][key] -= result[j][key / p] - result[j][p - 1];
      }
    }
  }

  auto& target = result[2 % mod];
  for (auto key : result[0].fKeys()) {
    target[key] += key >= 2 ? 1 : 0;
  }
  return result;
}

template <typename T>
SL vector<DVA<T>> prime_s0_pmod_odd(int64 n, int mod) {
  vector<DVA<T>> result;
  for (int i = 0; i < mod; ++i) result.emplace_back(n);

  for (int i = 0; i < mod; ++i) {
    const int dec = (i == 1 % mod) + (i == 0);
    for (auto key : result[0].fKeys())
      result[i][key] = (key + mod - i) / mod - dec;
  }
  for (int i = 0;; ++i) {
    const int64 p = plist[i];
    const int64 p2 = p * p;
    if (p2 > n) break;
    for (auto key : result[0].bKeys()) {
      if (key < p2) break;
      const int rp = p % mod;
      for (int j = 0; j < mod; ++j) {
        const int next = rp * j % mod;
        result[next][key] -= result[j][key / p] - result[j][p - 1];
      }
    }
  }
  return result;
}

template <typename T>
SL vector<DVA<T>> prime_s0_pmod(int64 n, int mod) {
  return mod & 1 ? prime_s0_pmod_odd<T>(n, mod) : prime_s0_pmod_even<T>(n, mod);
}

template <typename T>
SL vector<DVA<T>> prime_s1_pmod_even(int64 n, int mod) {
  vector<DVA<T>> result;
  for (int i = 0; i < mod; ++i) result.emplace_back(n);

  for (int i = 1; i < mod; i += 2) {
    auto& target = result[i];
    const int dec = i == 1;
    for (auto key : result[0].fKeys()) {
#if PE_HAS_int128
      const int128 c = (key + mod - i) / mod;
#else
      const int64 c = (key + mod - i) / mod;
#endif
      target[key] = c * (c - 1) / 2 * mod + c * i - dec;
    }
  }
  for (int i = 1;; ++i) {
    const int64 p = plist[i];
    const int64 p2 = p * p;
    if (p2 > n) break;
    for (auto key : result[0].bKeys()) {
      if (key < p2) break;
      const int rp = p % mod;
      for (int j = 1; j < mod; j += 2) {
        const int next = rp * j % mod;
        result[next][key] -= (result[j][key / p] - result[j][p - 1]) * p;
      }
    }
  }

  auto& target = result[2 % mod];
  for (auto key : result[0].fKeys()) {
    target[key] += key >= 2 ? 2 : 0;
  }
  return result;
}

template <typename T>
SL vector<DVA<T>> prime_s1_pmod_odd(int64 n, int mod) {
  vector<DVA<T>> result;
  for (int i = 0; i < mod; ++i) result.emplace_back(n);

  for (int i = 0; i < mod; ++i) {
    auto& target = result[i];
    const int dec = i == 1 % mod;
    for (auto key : result[0].fKeys()) {
#if PE_HAS_int128
      const int128 c = (key + mod - i) / mod;
#else
      const int64 c = (key + mod - i) / mod;
#endif
      target[key] = c * (c - 1) / 2 * mod + c * i - dec;
    }
  }

  for (int i = 0;; ++i) {
    const int64 p = plist[i];
    const int64 p2 = p * p;
    if (p2 > n) break;
    for (auto key : result[0].bKeys()) {
      if (key < p2) break;
      const int rp = p % mod;
      for (int j = 0; j < mod; ++j) {
        const int next = rp * j % mod;
        result[next][key] -= (result[j][key / p] - result[j][p - 1]) * p;
      }
    }
  }

  return result;
}

template <typename T>
SL vector<DVA<T>> prime_s1_pmod(int64 n, int mod) {
  return mod & 1 ? prime_s1_pmod_odd<T>(n, mod) : prime_s1_pmod_even<T>(n, mod);
}

// Deprecated
// calculate C(n, m) % P where P is prime
template <int64 P, int64 F = P>
struct comb_moder {
  static_assert(P <= PE_SOI63, "P <= PE_SOI63");
  static_assert(F > 0, "F > 0");
  comb_moder() { init(); }
  static int64 inv(int64 x) {
    int64 result = 1;
    int n = P - 2;
    x %= P;
    for (; n; n >>= 1, x = x * x % P)
      if (n & 1) result = result * x % P;
    return result;
  }
  static int64* fac;
  static void init() {
    if (fac == NULL) {
      fac = new int64[F];
      fac[0] = 1;
      for (int i = 1; i < F; ++i) fac[i] = fac[i - 1] * i % P;
    }
  }
  static void destroy_fac() {
    delete[] fac;
    fac = NULL;
  }
  static int64 s(int64 x) { return x & 1 ? -1 : 1; }
  static int64 comb(int64 m, int64 n) {
    PE_ASSERT(fac);

    if (m < 0 || n > m) return 0;

    int64 pp = 0;
    int64 dist = m - n;

    for (int64 mm = m / P, nn = n / P, dd = dist / P; mm;
         mm /= P, nn /= P, dd /= P) {
      pp += mm - nn - dd;
    }
    if (pp) return 0;
    int64 l = 1, r = 1;
    for (int64 x = m; x; x /= P) {
      PE_ASSERT(x % P < F);
      l = l * s(x / P) * fac[x % P] % P;
    }
    for (int64 x = n; x; x /= P) {
      PE_ASSERT(x % P < F);
      r = r * s(x / P) * fac[x % P] % P;
    }
    for (int64 x = dist; x; x /= P) {
      PE_ASSERT(x % P < F);
      r = r * s(x / P) * fac[x % P] % P;
    }
    l = (l + P) % P;
    r = (r + P) % P;
    int64 t = (inv(r) * l % P + P) % P;
    return t;
  }
};
template <int64 P, int64 F>
int64* comb_moder<P, F>::fac;

// calculate C(n, m) % P where P is prime
struct CombModer {
  CombModer(uint64 P, uint64 F = 0) : P(P), F(F == 0 ? P : F), fac(NULL) {
    init();
  }
  ~CombModer() {
    delete[] fac;
    fac = NULL;
  }
  void init() {
    if (fac == NULL) {
      fac = new uint64[F];
      fac[0] = 1;
      for (int i = 1; i < F; ++i) {
        fac[i] = mul_mod_ex(fac[i - 1], i, P);
      }
    }
  }
  uint64 s(int64 x) { return x & 1 ? P - 1 : 1; }
  uint64 comb(int64 m, int64 n) {
    if (m < 0 || n > m) return 0;
    if (n == m || n == 0) return 1;
    if (n == 1 || n == m - 1) return m % P;

    int64 pp = 0;
    int64 dist = m - n;

    for (uint64 mm = m / P, nn = n / P, dd = dist / P; mm;
         mm /= P, nn /= P, dd /= P) {
      pp += mm - nn - dd;
    }
    if (pp) return 0;
    uint64 l = 1, r = 1;
    for (uint64 x = m; x; x /= P) {
      l = mul_mod_ex(l, s(x / P), P);
      l = mul_mod_ex(l, fac[x % P], P);
    }
    for (uint64 x = n; x; x /= P) {
      r = mul_mod_ex(r, s(x / P), P);
      r = mul_mod_ex(r, fac[x % P], P);
    }
    for (uint64 x = dist; x; x /= P) {
      r = mul_mod_ex(r, s(x / P), P);
      r = mul_mod_ex(r, fac[x % P], P);
    }
    return mul_mod_ex(inv_of(r, P), l, P);
  }

  uint64 P, F;
  uint64* fac;
};

int64 short_comb_mod(int64 n, int64 m, int64 mod) {
  if (m > n || m < 0) return 0;
  if (n - m < m) m = n - m;
  vector<int64> data;
  for (int64 i = n; i >= n - m + 1; --i) data.push_back(i);
  const int size = static_cast<int>(data.size());
  for (int i = 2; i <= m; ++i) {
    int64 a = i;
    for (int j = 0; j < size && a > 1; ++j) {
      for (;;) {
        int64 t = gcd(a, data[j]);
        if (t == 1) break;
        a /= t;
        data[j] /= t;
      }
    }
  }
  int64 ret = 1;
  for (int i = 0; i < size; ++i) ret = ret * data[i] % mod;
  return ret;
}

// Computes 1^k + 2^k + ... n^k based on bernoulli number
// It is recommended to use PowerSumModerB or PowerSumModerB1 to support larger
// k.
struct PowerSumModer {
  PowerSumModer(int64 mod, int maxk = 128)
      : mod(mod), maxk(maxk), P(NULL), invs(NULL) {
    init(maxk);
  }

  ~PowerSumModer() { reset(); }

  void reset() {
    if (P) {
      for (int i = 0; i <= maxk; ++i) {
        delete[] P[i];
      }
      delete[] P;
      P = NULL;
    }
    if (invs) {
      delete[] invs;
      invs = NULL;
    }
  }

  void init(int maxk) {
    reset();

    P = new int64*[maxk + 1];
    for (int i = 0; i <= maxk; ++i) {
      P[i] = new int64[maxk + 1];
    }

    invs = new int64[maxk + 2];
    init_inv(invs, maxk + 2, mod);
    for (int i = 0; i <= maxk; ++i)
      for (int j = 0; j <= maxk; ++j) {
        P[i][j] = 0;
      }
    for (int i = 0; i <= maxk; ++i) P[i][1] = 1;
    for (int i = 1; i <= maxk; ++i) {
      for (int j = 1; j < i; ++j) {
        int64 t = P[i - 1][j - 1] + P[i - 1][j];
        if (t >= mod) t -= mod;
        P[i][j] = mul_mod_ex(j, t, mod);
      }
      P[i][i] = 1;
      for (int j = 1; j <= i; ++j) {
        P[i][i] = mul_mod_ex(P[i][i], j, mod);
      }
    }
  }

  // n + 1, n, ..., n-k+1 is not divisible by mod
  // 2,3,...k+1 is not divisible by mod
  int64 cal(int64 n, int64 k) {
    PE_ASSERT(k <= maxk);

    int64 ret = 0;
    int64 c = (n + 1) % mod;
    for (int i = 1; i <= k; ++i) {
      // ret += P[k][i] * short_comb_mod(n + 1, i + 1, mod) % mod;
      c = mul_mod_ex(c, regulate_mod(n + 1 - i, mod), mod);
      c = mul_mod_ex(c, invs[i + 1], mod);
      if (c == 0) {
        break;
      }
      ret += mul_mod_ex(P[k][i], c, mod);
    }
    return ret % mod;
  }

  int64 cal_safe(int64 n, int64 k) {
    PE_ASSERT(k <= maxk);

    int64 A, B;
    tie(A, B) = extract_factor(n + 1, mod);

    int64 ret = 0;
    int64 c = A;
    int64 d = B;
    for (int i = 1; i <= k; ++i) {
      // ret += P[k][i] * short_comb_mod(n + 1, i + 1, mod) % mod;
      tie(A, B) = extract_factor(n + 1 - i, mod);
      d += B;
      c = mul_mod_ex(c, regulate_mod(A, mod), mod);

      tie(A, B) = extract_factor(i + 1, mod);
      d -= B;
      c = mul_mod_ex(c, invs[A], mod);

      if (c == 0) {
        break;
      }

      if (d == 0) {
        ret += mul_mod_ex(P[k][i], c, mod);
      }
    }
    return ret % mod;
  }

  int64 mod;
  int maxk;
  int64** P;
  int64* invs;
};

/**
 * Computes (the sum of mu[x] or phi[x]) % mod where x is no more than n.
 * If n is no more than PIVOT, use a pre-computed table.
 */
struct MiuPhiSumModer {
  MiuPhiSumModer(int64 mod, int64 PIVOT = ::maxp) : mod(mod), PIVOT(PIVOT) {
    pre_sum_mu = pre_sum_phi = NULL;
    init(PIVOT);
  }

  ~MiuPhiSumModer() { reset(); }

  void reset() {
    if (pre_sum_mu == NULL) {
      delete[] pre_sum_mu;
      pre_sum_mu = NULL;
    }
    if (pre_sum_phi == NULL) {
      delete[] pre_sum_phi;
      pre_sum_phi = NULL;
    }
  }

  void init(int64 PIVOT) {
    reset();
    this->PIVOT = PIVOT;

    pre_sum_mu = new int64[PIVOT + 1];
    pre_sum_phi = new int64[PIVOT + 1];
    pre_sum_mu[0] = pre_sum_phi[0] = 0;
    for (int i = 1; i <= PIVOT; ++i) {
      pre_sum_mu[i] = ::mu[i] + pre_sum_mu[i - 1];
      pre_sum_phi[i] = (::phi[i] + pre_sum_phi[i - 1]) % mod;
      if (pre_sum_mu[i] < 0)
        pre_sum_mu[i] += mod;
      else if (pre_sum_mu[i] >= mod)
        pre_sum_mu[i] -= mod;
    }
  }

  int64 get_sum_mu(const int64 n) {
    if (n <= PIVOT) return pre_sum_mu[n];

    auto where = mem_sum_mu.find(n);
    if (where != mem_sum_mu.end()) return where->second;

    int64 ret = 1;
    for (int64 i = 2; i <= n;) {
      int64 v = n / i;
      int64 maxi = n / v;
      ret = sub_mod(ret, mul_mod_ex((maxi - i + 1) % mod, get_sum_mu(v), mod),
                    mod);
      i = maxi + 1;
    }
    return mem_sum_mu[n] = ret;
  }

  int64 get_sum_phi(int64 n) {
    if (n <= PIVOT) return pre_sum_phi[n];

    auto where = mem_sum_phi.find(n);
    if (where != mem_sum_phi.end()) return where->second;

    int64 ret = 0;
    int64 last = 0;
    for (int64 k = 1; k <= n;) {
      int64 v = n / k;
      int64 maxk = n / v;
      int64 now = get_sum_mu(maxk);

      int64 x = sub_mod(now, last, mod);
      last = now;

      int64 s = 0;
      if (v & 1) {
        s = mul_mod_ex((v + 1) / 2 % mod, v % mod, mod);
      } else {
        s = mul_mod_ex(v / 2 % mod, (v + 1) % mod, mod);
      }
      ret = add_mod(ret, mul_mod_ex(s, x, mod), mod);
      k = maxk + 1;
    }
    return mem_sum_phi[n] = ret;
  }
  int64 mod;
  int64 PIVOT;

  int64* pre_sum_mu;
  unordered_map<int64, int64> mem_sum_mu;

  int64* pre_sum_phi;
  unordered_map<int64, int64> mem_sum_phi;
};

/**
 * Counts the number of square free number no more than n.
 * If n is no more than PIVOT, use a pre-computed table.
 */
struct SFCounter {
  SFCounter(int64 PIVOT = ::maxp) : pre(NULL), PIVOT(PIVOT) { init(PIVOT); }
  ~SFCounter() { reset(); }

  void reset() {
    if (pre) {
      delete[] pre;
      pre = NULL;
    }
  }

  void init(int64 PIVOT) {
    reset();

    this->PIVOT = PIVOT;
    pre = new int64[PIVOT + 1];
    pre[0] = 0;
    for (int64 i = 1; i <= PIVOT; ++i) {
      pre[i] = pre[i - 1] + is_square_free(i);
    }
  }

  int64 get(int64 n) {
    if (n <= PIVOT) return pre[n];
    auto where = mem.find(n);
    if (where != mem.end()) return where->second;
    int64 ret = n;
    for (int64 i = 2;; ++i) {
      int64 i2 = i * i;
      if (i2 > n) break;
      ret -= get(n / i2);
    }
    return mem[n] = ret;
  }
  int64* pre;
  int64 PIVOT;
  unordered_map<int64, int64> mem;
};
// 65701
#endif
/*

*/
