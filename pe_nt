/*
static int plist[maxp/10];
static int pmask[maxp+1];
static int pcnt;
int* phi = NULL;
int* miu = NULL;
const int64 pmpi[];

SL int64 estimate_pmpi(int64 n)
SL int is_prime(int64 n)
SL void init_primes()
SL void init_primes(int cal_phi, int cal_miu)

SL vector<pair<int64, int> > factorize(int64 n)
SL vector<int64> get_factors(const vector<pair<int64, int> >& f)
SL vector<int64> get_factors(int64 value)

SL int64 cal_phi(int64 n, const vector<pair<int64, int> >& fn)
SL int64 cal_phi(int64 n)
SL int64 square_root_safe(int64 n)
SL int64 square_root_unsafe(int64 n)
SL int64 square_root(int64 n)

SL int64 regulate_mod(int64 a, int64 mod)
SL int64 add_mod(int64 a, int64 b, int64 mod)
SL int64 sub_mod(int64 a, int64 b, int64 mod)
SL int64 mul_mod(int64 a, int64 b, int64 mod)
SL int64 mul_mod_ex(int64 a, int64 b, int64 mod)
SL int64 power_mod(int64 x, int64 n, int64 mod)
SL int64 power_mod_ex(int64 x, int64 n, int64 mod)
SL int64 inv_of(int64 x, int64 p)

template<int64 P, int64 F = P>
struct comb_moder;

class comb_solver;

gcd
SL int64 exgcd(int64 a, int64 b, int64& x, int64& y)
SL tuple<int64, int64, int64> exgcd(int64 a, int64 b)

SL int solve_linear_equation(int64 a, int64 b, int64 m, int64& v, int64& u)
SL int crt2(int64 a, int64 m1, int64 b, int64 m2, int64& v, int64& u)
SL tuple<int, int64, int64> crt2(int64 a, int64 m1, int64 b, int64 m2)
SL tuple<int, int64, int64> crtn(int64* val, int64* mod, int n)

const int64 sopp[];
SL int MR_test_impl(int s, int64 t, int64 n, int x)
SL int MR_test(int64 n, int x)
SL int is_prime_ex(int64 n)

SL int crandbit()
SL int crand15()
SL int crand31()
SL int64 crand63()
SL int crandi()
SL double crandd()

make_uniform_generator(int seed, int min, int max)
make_uniform_generator(int min, int max)

// Primitive Root
namespace pr{
SL bool is_pr(int64 x, int64 p, const vector<pair<int64, int> >& f)
SL bool is_pr(int64 x, int64 p)
SL int64 find_pr(int64 p)
SL int64 find_pr(int64 p, const vector<pair<int64, int> >& fp1)
int64 ind(int64 a, int64 pr, int64 p)
int64 ind(int64 a, int64 pr, int64 p)
class ind_solver;
}

template<typename T>
struct Fraction;
*/
#ifndef __PE_NT_H__
#define __PE_NT_H__

// compiler checking
#if defined(__GNUC__)
#define COMPILER_GNU
#elif defined(_MSC_VER)
#define COMPILER_MSVC
#endif

#ifdef COMPILER_GNU
  #if __cplusplus < 201103L
    #error "c++11 or above"
  #endif
#endif

#ifdef COMPILER_MSVC
  #if _MSC_VER < 1800
    #error "VS2013 or above"
  #endif
#endif

#include <cstdint>

#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <cassert>

#include <random>
#include <algorithm>
#include <utility>
#include <map>
#include <vector>
#include <unordered_map>
#include <tuple>

#include <iostream>

using namespace std;

// function specifier
#ifndef SL
#define SL static inline
#endif

// PE_ASSERT
#ifdef DISABLE_ASSERT
  #define PE_ASSERT(x)
#else
  #define PE_ASSERT(x) assert((x))
#endif

// About numbers

// Integer limits check
static_assert(sizeof(int) >= 4, "sizeof(int) >= 4");

// int64 and int128
typedef std::int64_t int64;
#ifdef COMPILER_GNU
  #ifdef _M_X64
    #define PE_HAS_INT128 1
    typedef __int128 int128;
  #else
    #define PE_HAS_INT128 0
  #endif
#endif

// square overflow integers
static const int64 PE_SOI63 = 3037000499LL;   // x * x > 2^63 - 1 for x > PE_SOI63
static const int64 PE_SOI64 = 4294967295LL;   // x * x > 2^64 - 1 for x > PE_SOI64

// About primes
static int pcnt;
#ifdef PLIST_ARRAY
  static int pmask[maxp+1];
  static int plist[maxp/10];
  static_assert(maxp >= 100000, "maxp >= 100000");
#else
  int* pmask = NULL;
  int* plist = NULL;
#endif
int* phi = NULL;
int* miu = NULL;

static_assert(maxp <= INT_MAX, "maxp <= INT_MAX");
static const int64 maxp2 = (int64)maxp * maxp;

// http://oeis.org/A006880
const int64 pmpi[] =
{
0LL,
4LL,                        // 10
25LL,                       // 100
168LL,                      // 1000
1229LL,                     // 1e4
9592LL,                     // 1e5
78498LL,                    // 1e6
664579LL,                   // 1e7
5761455LL,                  // 1e8
50847534LL,                 // 1e9
455052511LL,                // 1e10
4118054813LL,               // 1e11
37607912018LL,              // 1e12
346065536839LL,             // 1e13
3204941750802LL,            // 1e14
29844570422669LL,           // 1e15
279238341033925LL,          // 1e16
2623557157654233LL,         // 1e17
24739954287740860LL,        // 1e18
234057667276344607LL,       // 1e19
2220819602560918840LL,      // 1e20
};

SL int64 estimate_pmpi(int64 n)
{
  if (n <= 1) return 0;
  int64 ret = static_cast<int64>(1. * n / log(1.*n));
  return max(ret, 1LL);
}

template<int d1, int d2>
SL void init_pmask_plist(int (&pmask)[d1], int (&plist)[d2])
{
  (void)pmask;
  (void)plist;
}

SL void init_pmask_plist(int*& pmask, int*& plist)
{
  pmask = new int[maxp+1];
  int64 size = max(static_cast<int64>((estimate_pmpi(maxp+1) + 1) * 1.1), 100000LL);
  plist = new int[size];
}

SL int is_prime(int64 n)
{
  if (n <= 1) return 0;
  if (n <= maxp) return pmask[n] == n;
  PE_ASSERT(n <= maxp2);
  for (int i = 0; i < pcnt; ++i)
  {
    const int64 p = plist[i];
    const int64 test = p * p;
    if (test > n) break;
    if (n % p == 0) return 0;
  }
  return 1;
}

SL void init_primes()
{
  init_pmask_plist(pmask, plist);

  pcnt = 0;
  for (int i = 1; i <= maxp; ++i) pmask[i] = i;
  for (int i = 2; i <= maxp; ++i)
  {
    if (pmask[i] == i)
    {
      plist[pcnt++] = i;
    }
    for (int j = 0; j < pcnt; ++j)
    {
      const int64 t = (int64)plist[j] * i;
      if (t > maxp) break;
      pmask[t] = plist[j];
      if (i % plist[j] == 0)
      {
        break;
      }
    }
  }
}

SL void init_primes(int cal_phi, int cal_miu)
{
  init_pmask_plist(pmask, plist);

  pcnt = 0;
  if (cal_phi) phi = new int[maxp+1];
  if (cal_miu) miu = new int[maxp+1];

  for (int i = 1; i <= maxp; ++i) pmask[i] = i;
  if (phi) phi[1] = 1;
  if (miu) miu[1] = 1;

  for (int i = 2; i <= maxp; ++i)
  {
    if (pmask[i] == i)
    {
      if (miu) miu[i] = -1;
      if (phi) phi[i] = i - 1;
      plist[pcnt++] = i;
    }
    for (int j = 0; j < pcnt; ++j)
    {
      const int64 t = (int64)plist[j] * i;
      if (t > maxp) break;
      pmask[t] = plist[j];
      if (i % plist[j] == 0)
      {
        if (miu) miu[t] = 0;
        if (phi) phi[t] = phi[i] * plist[j];
        break;
      }
      else
      {
        if (miu) miu[t] = -miu[i];
        if (phi) phi[t] = phi[i] * (plist[j] - 1);
      }
    }
  }
}

SL vector<pair<int64, int> > factorize(int64 n)
{
  vector<pair<int64, int> > ret;
  if (n <= 1)
  {
    return ret;
  }

  if (n <= maxp)
  {
    while (n != 1)
    {
      int now = pmask[n];
      int c = 0;
      while (n % now == 0) n /= now, ++c;
      if (c) ret.emplace_back((int64)now, c);
    }
  }
  else
  {
    PE_ASSERT(n <= maxp2);
    for (int i = 0; i < pcnt; ++i)
    {
      const int64 p = plist[i];
      const int64 test = p * p;
      if (test > n) break;
      int c = 0;
      while (n % p == 0) n /= p, ++c;
      if (c) ret.emplace_back(p, c);
    }
    if (n != 1) ret.emplace_back(n, 1);
  }
  return ret;
}

void get_factors_impl(const int limit, const vector<pair<int64, int> >& f, int64 value, vector<int64>& result)
{
  result.push_back(value);
  for (int i = 0; i < limit; ++i)
  {
    int64 tvalue = value;
    const int64 p = f[i].first;
    const int c = f[i].second;
    for (int j = 1; j <= c; ++j)
    {
      tvalue *= p;
      get_factors_impl(i, f, tvalue, result);
    }
  }
}

SL vector<int64> get_factors(const vector<pair<int64, int> >& f)
{
  vector<int64> result;
  get_factors_impl(static_cast<int>(f.size()), f, 1, result);
  return result;
}

SL vector<int64> get_factors(int64 value)
{
  vector<int64> result;
  auto f = factorize(value);
  get_factors_impl(static_cast<int>(f.size()), f, 1, result);
  return result;
}

SL int64 cal_phi(int64 n, const vector<pair<int64, int> >& fn)
{
  if (n <= 0) return -1;
  if (phi && n <= maxp) return phi[n];
  int64 phi_n = n;
  for (auto& it: fn) phi_n -= phi_n / it.first;
  return phi_n;
}

SL int64 cal_phi(int64 n)
{
  if (n <= 0) return -1;
  if (phi && n <= maxp) return phi[n];
  auto fn = factorize(n);
  int64 phi_n = n;
  for (auto& it: fn) phi_n -= phi_n / it.first;
  return phi_n;
}

SL int64 square_root_safe(int64 n)
{
  if (n <= 0) return 0;
  if (n == 1) return 1;
  for (int64 test = static_cast<int64>(sqrt(n));; ++test)
  {
    const int64 t = test * test;
    if (t == n) return test;
    if (t > n) return 0;
  }
  return 0;
}

SL int64 square_root_unsafe(int64 n)
{
  if (n <= 0) return 0;
  if (n == 1) return 1;
  int64 ret = static_cast<int64>(sqrt(n));
  return ret * ret == n ? ret : 0;
}

SL int64 square_root(int64 n)
{
  if (n <= 0) return 0;
  if (n == 1) return 1;
  // see Donald L. Graham, Donald E. Knuth, Oren Patashnik, CONCRETE MATHEMATICS, pp 70-72
  int64 ret = static_cast<int64>(sqrt(n+0.5));
  return ret * ret == n ? ret : 0;
}

// Modular arithmetic
SL int64 regulate_mod(int64 a, int64 mod)
{
  PE_ASSERT(mod >= 1);
  if (a >= 0)
  {
    if (a >= mod) a %= mod;
  }
  else
  {
    if (-a >= mod) a = a % mod + mod;
    else a += mod;
  }
  return a;
}

SL int64 add_mod(int64 a, int64 b, int64 mod)
{
  a += b;
  if (a >= mod) a -= mod;
  return a;
}

SL int64 sub_mod(int64 a, int64 b, int64 mod)
{
  a -= b;
  if (a < 0) a += mod;
  return a;
}

SL int64 mul_mod(int64 a, int64 b, int64 mod)
{
  return a*b%mod;
}

SL int64 mul_mod_ex(int64 a, int64 b, int64 mod)
{
#if PE_HAS_INT128
  return (int128)a * b % mod;
#else
  int64 ret = 0;
  int64 flag = b;
  for (int64 d = 1; d <= a; d <<= 1)
  {
    if (d & a)
    {
      ret = (ret + flag) % mod;
    }
    flag = (flag << 1) % mod;
  }
  return ret;
#endif
}

SL int64 power_mod(int64 x, int64 n, int64 mod)
{
  int64 ret = 1;
  x %= mod;
  if (x < 0) x += mod;
  for (; n; n >>= 1)
  {
    if (n&1) ret = ret * x % mod;
    x = x * x % mod;
  }
  return ret;
}

SL int64 power_mod_ex(int64 x, int64 n, int64 mod)
{
#if PE_HAS_INT128
  int64 ret = 1;
  x %= mod;
  if (x < 0) x += mod;
  for (; n; n >>= 1)
  {
    if (n&1) ret = (int128)ret * x % mod;
    x = (int128)x * x % mod;
  }
  return ret;
#else
  int64 ret = 1;
  x %= mod;
  if (x < 0) x += mod;
  for (; n; n >>= 1)
  {
    if (n&1) ret = mul_mod_ex(x, ret, mod);
    x = mul_mod_ex(x, x, mod);
  }
  return ret;
#endif
}

template<typename T, int D>
SL void mat_mul(T (*a)[D], T (*b)[D], T (*c)[D], int N = D)
{
  for (int i = 0; i < N; ++i) for (int j = 0; j < N; ++j)
  {
    T s = 0;
    for (int k = 0; k < N; ++k)
    s += a[i][k] * b[k][j];
    c[i][j] = s;
  }
}

template<typename T, int D>
SL void mat_mul_vec(T (*a)[D], T (*b)[D], T (*c)[D], int N = D)
{
  for (int i = 0; i < N; ++i)
  {
    T s = 0;
    for (int k = 0; k < N; ++k)
    s += a[i][k] * b[k][0];
    c[i][0] = s;
  }
}

template<typename T, int D>
SL void mat_mul_vec(T (*a)[D], T *b, T *c, int N = D)
{
  for (int i = 0; i < N; ++i)
  {
    T s = 0;
    for (int k = 0; k < N; ++k)
    s += a[i][k] * b[k];
    c[i] = s;
  }
}

template<typename T, int D>
SL void mat_mul_mod(T (*a)[D], T (*b)[D], T (*c)[D], int64 mod, int N = D)
{
  for (int i = 0; i < N; ++i) for (int j = 0; j < N; ++j)
  {
    int64 s = 0;
    for (int k = 0; k < N; ++k)
    {
      s += mul_mod(a[i][k], b[k][j], mod);
      if (s >= mod) s -= mod;
    }
    c[i][j] = s % mod;
  }
}

template<typename T, int D>
SL void mat_mul_vec_mod(T (*a)[D], T (*b)[D], T (*c)[D], int64 mod, int N = D)
{
  for (int i = 0; i < N; ++i)
  {
    int64 s = 0;
    for (int k = 0; k < N; ++k)
    {
      s += mul_mod(a[i][k], b[k][0], mod);
      if (s >= mod) s -= mod;
    }
    c[i][0] = s;
  }
}

template<typename T, int D>
SL void mat_mul_vec_mod(T (*a)[D], T *b, T *c, int64 mod, int N = D)
{
  for (int i = 0; i < N; ++i)
  {
    int64 s = 0;
    for (int k = 0; k < N; ++k)
    {
      s += mul_mod(a[i][k], b[k], mod);
      if (s >= mod) s -= mod;
    }
    c[i] = s;
  }
}

struct init_direct_t{};
static const init_direct_t __init_direct;
struct fake_int128{};

template<typename S, typename B>
struct mtype_policy
{
  typedef S   ints;
  typedef B   intb;
  static ints add(ints a, ints b, ints mod)
  {
    intb c = (intb)a + b;
    if (c >= mod) c -= mod;
    return static_cast<ints>(c);
  }
  static ints sub(ints a, ints b, ints mod)
  {
    intb c = (intb)a - b;
    if (c < 0) c += mod;
    return static_cast<ints>(c);
  }
  static ints mul(ints a, ints b, ints mod)
  {
    intb c = (intb)a * b % mod;
    return static_cast<ints>(c);
  }
};

template<typename S>
struct mtype_policy<S, S>
{
  typedef S   ints;
  typedef S   intb;
  static ints add(ints a, ints b, ints mod)
  {
    a += b;
    if (a >= mod) a -= mod;
    return a;
  }
  static ints sub(ints a, ints b, ints mod)
  {
    a -= b;
    if (a < 0) a += mod;
    return b;
  }
  static ints mul(ints a, ints b, ints mod)
  {
    a = a * b % mod;
    return a;
  }
};

template<typename S>
struct mtype_policy<S, fake_int128>
{
  typedef S   ints;
  typedef fake_int128   intb;
  static ints add(ints a, ints b, ints mod)
  {
    a += b;
    if (a >= mod) a -= mod;
    return a;
  }
  static ints sub(ints a, ints b, ints mod)
  {
    a -= b;
    if (a < 0) a += mod;
    return b;
  }
  static ints mul(ints a, ints b, ints mod)
  {
    return mul_mod_ex(a, b, mod);
  }
};

template<typename S, typename B, S MOD>
struct mint;

template<typename S, typename B>
struct mintd;

template<typename S, typename B, S MOD>
ostream& operator << (ostream& o, const mint<S, B, MOD>& m);

template<typename S, typename B>
ostream& operator << (ostream& o, const mintd<S, B>& m);

template<typename S, typename B, S MOD>
struct mint
{
typedef mtype_policy<S, B> MTI;
typedef typename MTI::ints ints;
typedef typename MTI::intb intb;

static_assert(MOD > 0, "MOD > 0");

mint(ints val = 0)
{
  if (val >= 0)
  {
    value_ = val >= MOD ? val % MOD : val;
  }
  else
  {
    value_ = val <= -MOD ? val % MOD + MOD : val + MOD;
  }
}

mint(ints val, init_direct_t) : value_(val)
{
}

mint operator + (const mint& y) const
{
  return mint(MTI::add(value_, y.value, MOD), __init_direct);
}

mint& operator += (const mint& y)
{
  value_ = MTI::add(value_, y.value_, MOD);
  return *this;
}

mint operator - (const mint& y) const
{
  return mint(MTI::sub(value_, y.value, MOD), __init_direct);
}

mint& operator -= (const mint& y)
{
  value_ = MTI::sub(value_, y.value_, MOD);
  return *this;
}

mint operator * (const mint& y) const
{
  return mint(MTI::mul(value_, y.value_, MOD), __init_direct);
}

mint& operator *= (const mint& y)
{
  value_ = MTI::mul(value_, y.value_, MOD);
  return *this;
}

//operator ints () const {return value_;}
ints value() const {return value_;}
friend ostream& operator << <S,B,MOD>(ostream& o, const mint& m);

ints value_;
};

template<typename S, typename B, S MOD>
ostream& operator << (ostream& o, const mint<S, B, MOD>& m)
{
  o << m.value_;
  return o;
}

template<int32_t mod>
using mint3232 = mint<int32_t, int32_t, mod>;

template<int32_t mod>
using mint3264 = mint<int32_t, int64_t, mod>;

template<int32_t mod>
using mint6464 = mint<int64_t, int64_t, mod>;

#if PE_HAS_INT128
template<int32_t mod>
using mint64128 = mint<int64_t, int128, mod>;
#endif

template<typename S, typename B>
struct mintd
{
typedef mtype_policy<S, B> MTI;
typedef typename MTI::ints ints;
typedef typename MTI::intb intb;

explicit mintd(ints val = 0, ints mod = 1) : MOD(mod)
{
  if (val >= 0)
  {
    value_ = val >= MOD ? val % MOD : val;
  }
  else
  {
    value_ = val <= -MOD ? val % MOD + MOD : val + MOD;
  }
}

mintd(ints val, ints mod, init_direct_t) : value_(val), MOD(mod)
{
}

mintd& operator = (ints v)
{
  mintd temp(v, MOD);
  value_ = temp.value_;
  return *this;
}

mintd& operator = (const mintd& other)
{
  value_ = other.value_;
  MOD = other.MOD;
  return *this;
}

mintd operator + (const mintd& y) const
{
  PE_ASSERT(y.MOD == MOD);
  return mintd(MTI::add(value_, y.value, MOD), MOD, __init_direct);
}

mintd operator + (const ints y) const
{
  return *this + mintd(y, MOD);
}

mintd& operator += (const mintd& y)
{
  PE_ASSERT(y.MOD == MOD);
  value_ = MTI::add(value_, y.value_, MOD);
  return *this;
}

mintd& operator += (const ints y)
{
  return *this += mintd(y, MOD);
}

mintd operator - (const mintd& y) const
{
  PE_ASSERT(y.MOD == MOD);
  return mintd(MTI::sub(value_, y.value, MOD), MOD, __init_direct);
}

mintd operator - (const ints y) const
{
  return *this - mintd(y, MOD);
}

mintd& operator -= (const mintd& y)
{
  PE_ASSERT(y.MOD == MOD);
  value_ = MTI::sub(value_, y.value_, MOD);
  return *this;
}

mintd& operator -= (const ints y)
{
  return *this -= mintd(y, MOD);
}

mintd operator * (const mintd& y) const
{
  PE_ASSERT(y.MOD == MOD);
  return mintd(MTI::mul(value_, y.value_, MOD), MOD, __init_direct);
}

mintd operator * (const ints y) const
{
  return *this * mintd(y, MOD);
}

mintd& operator *= (const mintd& y)
{
  PE_ASSERT(y.MOD == MOD);
  value_ = MTI::mul(value_, y.value_, MOD);
  return *this;
}

mintd& operator *= (const ints y)
{
  return *this *= mintd(y, MOD);
}

//operator ints () const {return value_;}
ints value() const {return value_;}
friend ostream& operator << <S,B>(ostream& o, const mintd& m);

ints value_;
ints MOD;
};

template<typename S, typename B>
ostream& operator << (ostream& o, const mintd<S, B>& m)
{
  o << m.value_;
  return o;
}

using mintd3232 = mintd<int32_t, int32_t>;

using mintd3264 = mintd<int32_t, int64_t>;

using mintd6464 = mintd<int64_t, int64_t>;

#if PE_HAS_INT128
using mintd64128 = mintd<int64_t, int128>;
#endif

// p is prime
SL int64 inv_of(int64 x, int64 p)
{
  return power_mod(x, p-2, p);
}

// calculate C(n, m) % P where P is prime
template<int64 P, int64 F = P>
struct comb_moder
{
  static_assert(P <= PE_SOI63, "P <= PE_SOI63");
  static_assert(F > 0, "F > 0");
  comb_moder()
  {
    init();
  }
  static int64 inv(int64 x)
  {
    int64 result = 1;
    int n = P - 2;
    x %= P;
    for (; n; n >>= 1, x = x * x % P) if (n&1) result = result * x % P;
    return result;
  }
  static int64* fac;
  static void init()
  {
    if (fac == NULL)
    {
      fac = new int64[F];
      fac[0] = 1;
      for (int i = 1; i < F; ++i) fac[i] = fac[i-1] * i % P;
    }
  }
  static void destroy_fac()
  {
    delete[] fac;
    fac = NULL;
  }
  static int64 s(int64 x) {return x & 1 ? -1 : 1;}
  static int64 comb(int64 m, int64 n)
  {
    PE_ASSERT(fac);

    if (m < 0 || n > m) return 0;

    int64 pp = 0;
    int64 dist = m - n;

    for (int64 mm = m/P, nn = n/P, dd = dist/P; mm; mm /= P, nn /= P, dd /= P)
    {
      pp += mm - nn - dd;
    }
    if (pp) return 0;
    int64 l = 1, r = 1;
    for (int64 x = m; x; x /= P) {PE_ASSERT(x%P<F); l = l * s(x/P) * fac[x%P] % P;}
    for (int64 x = n; x; x /= P) {PE_ASSERT(x%P<F); r = r * s(x/P) * fac[x%P] % P;}
    for (int64 x = dist; x; x /= P) {PE_ASSERT(x%P<F); r = r * s(x/P) * fac[x%P] % P;}
    l = (l + P) % P;
    r = (r + P) % P;
    int64 t  = (inv(r) * l % P + P) % P;
    return t;
  }
};
template<int64 P, int64 F>
int64 * comb_moder<P, F>:: fac;

class comb_solver
{
public:
  comb_solver(const int64 p, const int64 f = -1) :
    P_(p),
    F_(f < 0 ? p : f),
    fac_(new int64[F_])
    {
      fac_[0] = 1;
      for (int i = 1; i < F_; ++i)
      fac_[i] = fac_[i-1] * i % P_;
    }
  ~comb_solver()
  {
    delete[] fac_;
  }
  int64 inv(int64 x) const
  {
    int64 result = 1;
    int n = P_ - 2;
    x %= P_;
    for (; n; n >>= 1, x = x * x % P_)
    if (n&1) result = result * x % P_;
    return result;
  }
  int64 s(int64 x) const {return x & 1 ? -1 : 1;}
  int64 comb(int64 m, int64 n) const
  {
    if (m < 0 || n > m) return 0;

    int64 pp = 0;
    int64 dist = m - n;

    for (int64 mm = m/P_, nn = n/P_, dd = dist/P_;
              mm;
              mm /= P_, nn /= P_, dd /= P_)
    {
      pp += mm - nn - dd;
    }
    if (pp) return 0;
    int64 l = 1, r = 1;
    for (int64 x = m; x; x /= P_)
    {
      PE_ASSERT(x%P_<F_);
      l = l * s(x/P_) * fac_[x%P_] % P_;
    }
    for (int64 x = n; x; x /= P_)
    {
      PE_ASSERT(x%P_<F_);
      r = r * s(x/P_) * fac_[x%P_] % P_;
    }
    for (int64 x = dist; x; x /= P_)
    {
      PE_ASSERT(x%P_<F_);
      r = r * s(x/P_) * fac_[x%P_] % P_;
    }
    l = (l + P_) % P_;
    r = (r + P_) % P_;
    int64 t  = (inv(r) * l % P_ + P_) % P_;
    return t;
  }
private:
  const int64 P_;
  const int64 F_;
  int64* fac_;
};
// greatest common divisor and extend greatest common divisor
#ifndef COMPILER_GNU
template<typename _EuclideanRingElement>
_EuclideanRingElement
__gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
{
  while (__n != 0)
  {
    _EuclideanRingElement __t = __m % __n;
    __m = __n;
    __n = __t;
  }
  return __m;
}
#endif

#define gcd __gcd

int64 exgcd_impl(int64 a, int64 b, int64& x, int64& y)
{
  if (b == 0)
  {
    x = 1;
    y = 0;
    return a;
  }

  int64 x1 = 0, y1 = 0;
  const int64 ret = exgcd_impl(b, a%b, x1, y1);
  // b * x1 + (a%b) * y1 = ret
  // b * x1 + (a - a / b * b) * y1 = ret
  // b * x1 + a * y1 - a / b * b * y1 = ret
  // y1 * a + (x1 - a / b * y1) b = ret
  x = y1;
  y = x1 - a / b * y1;
  return ret;
}

SL int64 exgcd(int64 a, int64 b, int64& x, int64& y)
{
  PE_ASSERT(a != 0 || b != 0);
  const int64 r = exgcd_impl(a, b, x, y);
  PE_ASSERT(a*x+b*y==r);
  return r;
}

SL tuple<int64, int64, int64> exgcd(int64 a, int64 b)
{
  PE_ASSERT(a != 0 || b != 0);
  int64 x = 0, y = 0;
  const int64 r = exgcd_impl(a, b, x, y);
  PE_ASSERT(a*x+b*y==r);
  return tuple<int64, int64, int64>{r, x, y};
}

// solve equation a x = b (mod m)
// return 0 and set u = -1 and v = 0 if failed
// return 1, x = v (mod u)
SL int solve_linear_equation(int64 a, int64 b, int64 m, int64& v, int64& u)
{
  v = 0;
  u = 0;

  PE_ASSERT(m);

  if (m < 0) m = -m;

  PE_ASSERT(m <= PE_SOI63);

  a %= m;
  b %= m;

  if (a < 0) a += m;
  if (b < 0) b += m;

  int64 xx = 0, yy = 0, d = exgcd(a, m, xx, yy);

  if (b % d) return 0;

  xx = (xx % m + m) % m;
  xx = xx * (b / d) % m;

  u = m / d;
  v = xx % u;

  return 1;
}

// solve equation x = a (mod m1) x = b (mod m2)
// return 0 and set u = 0 and t = 0 if failed
// return 1, x = v (mod u)
SL int crt2(int64 a, int64 m1, int64 b, int64 m2, int64& v, int64& u)
{
  v = 0;
  u = 0;

  PE_ASSERT(m1 != 0 && m2 != 0);
  if (m1 < 0) m1 = -m1;
  if (m2 < 0) m2 = -m2;
  // x = a (mod m1)
  // x = b (mod m2)
  // x = k0 m1 + a
  // k0 m1 + a = b (mod m2)
  // k0 m1 = b - a (mod m2)
  a %= m1;
  b %= m2;
  if (a < 0) a = -a;
  if (b < 0) b = -b;

  int64 s = 0, t = 0;
  if (!solve_linear_equation(m1, b-a, m2, t, s)) return 0;
  // k0 = k1 * s + t
  // x = (k1 * s + t) * m1 + a
  // x = k1 * s * m1 + (a + t * m1)

  u = s * m1;
  v = ((a + t * m1) % u + u) % u;
  return 1;
}

SL tuple<int, int64, int64> crt2(int64 a, int64 m1, int64 b, int64 m2)
{
  int64 v = 0, u = 0;
  int r = crt2(a, m1, b, m2, v, u);
  return tuple<int, int64, int64>{r, v, u};
}

SL tuple<int, int64, int64> crtn(int64* val, int64* mod, int n)
{
  PE_ASSERT(val != NULL && mod != NULL);
  int64 v = 0, u = 1;
  int have = 1;
  for (int i = 0; i < n; ++i)
  {
    tie(have, v, u) = crt2(v, u, val[i], mod[i]);
    if (!have)
    {
      return tuple<int, int64, int64>{0, 0, 0};
    }
  }
  return tuple<int, int64, int64>{have, v, u};
}

// prime test for n <= 2^63 - 1
// http://oeis.org/A014233
const int64 sopp[] =
{
2047LL,                         // 2
1373653LL,                      // 3
25326001LL,                     // 5
3215031751LL,                   // 7
2152302898747LL,                // 11
3474749660383LL,                // 13
341550071728321LL,              // 17
341550071728321LL,              // 19
3825123056546413051LL,          // 23
3825123056546413051LL,          // 29
3825123056546413051LL,          // 31
// bigger than 2^64             // 37
// 2^63 = 9223372036854775808   //
};
const int64 sopp_size = sizeof(sopp) / sizeof(sopp[0]);

SL int MR_test_impl(int s, int64 t, int64 n, int x)
{
  // PE_ASSERT((n&1) == 0)

  if (n <= PE_SOI63)
  {
    t = power_mod(x, t, n);
    if (t == 1 || t == n - 1) return 1;

    for (int i = 1; i < s; ++i)
    {
      t = mul_mod(t, t, n);
      if (t == n - 1) return 1;
    }
  }
  else
  {
    t = power_mod_ex(x, t, n);
    if (t == 1 || t == n - 1) return 1;

    for (int i = 1; i < s; ++i)
    {
      t = mul_mod_ex(t, t, n);
      if (t == n - 1) return 1;
    }
  }
  return 0;
}

SL int MR_test(int64 n, int x)
{
  if (n <= 1) return 0;
  if ((n&1) == 0) return 0;

  int s = 0;
  int64 t = n - 1;
  while ((t&1) == 0) ++s, t >>= 1;

  return MR_test_impl(s, t, n, x);
}

SL int is_prime_ex(int64 n)
{
  if (n <= 1) return 0;
  if (n == 2) return 1;
  if ((n&1) == 0) return 0;
  if (n <= maxp) return pmask[n] == n;

  for (int i = 1; i < 20; ++i)
  if (n % plist[i] == 0) return 0;

  int s = 0;
  int64 t = n - 1;
  while ((t&1) == 0) ++s, t >>= 1;

  for (int i = 0; i < sopp_size; ++i)
  {
    const int64 val = sopp[i];
    if (n == val) return 0;
    if (!MR_test_impl(s, t, n, plist[i])) return 0;
    if (n < val) break;
  }
  return 1;
}

// C-style random number generator
// ANSI_ISO_9899-1999: The value of the RAND_MAX macro shall be at least 32767.
// We assume RAND_MAX is either 32767 or 2147483647
#if RAND_MAX == 32767

SL int crandbit() {return rand()&1;}
SL int crand15() {return rand();}
SL int crand31() {return crand15() << 16 | crand15() << 1 | crandbit();}
SL int64 crand63(){return (int64)crand31() << 32 | crand31() << 1 | crandbit();}

SL int crandi() {return crand31();}
SL double crandd() {static const double coe = 1. / (RAND_MAX + 1); return coe * rand();}

#elif RAND_MAX == 2147483647

SL int crandbit() {return rand()&1;}
SL int crand15() {return rand() & 32767;}
SL int crand31() {return rand();}
SL int64 crand63(){return (int64)crand31() << 32 | crand31() << 1 | crandbit();}

SL int crandi() {return crand31();}
SL double crandd() {static const double coe = 1. / ((int64)RAND_MAX + 1LL); return coe * rand();}

#else

#error "RAND_MAX should be either 32767 or 2147483647"

#endif

// C++ style random number generator
template<typename RE, typename DS>
class RandomGenerator
{
public:
  RandomGenerator(const RE& engine, const DS& distribution) :
      random_engine_(engine), distribution_(distribution){}
  int operator ()()
  {
      return distribution_(random_engine_);
  }
private:
  RE random_engine_;
  DS distribution_;
};

RandomGenerator<std::mt19937, uniform_int_distribution<int> >
make_uniform_generator(int seed, int min, int max)
{
  PE_ASSERT(min <= max);
  return RandomGenerator<std::mt19937, uniform_int_distribution<int> >
      (std::mt19937(seed), std::uniform_int_distribution<int>(min, max));
}

RandomGenerator<std::mt19937, uniform_int_distribution<int> >
make_uniform_generator(int min, int max)
{
  std::random_device rd;
  PE_ASSERT(min <= max);
  return RandomGenerator<std::mt19937, uniform_int_distribution<int> >
      (std::mt19937(rd()), std::uniform_int_distribution<int>(min, max));
}

// Primitive Root
namespace pr{

/*
  test, find the primitive of a prime
*/
SL bool is_pr(int64 x, int64 p, const vector<pair<int64, int> >& f)
{
  return std::none_of(std::begin(f), std::end(f),
    [=](const pair<int64, int>& it)
    {
      return power_mod(x, (p-1)/it.first, p) == 1;
    }
  );
}

SL bool is_pr(int64 x, int64 p)
{
  return is_pr(x, p, factorize(p-1));
}

SL int64 find_pr(int64 p)
{
  if (p <= 1) return -1;
  if (p == 2) return 1;
  auto fp1 = factorize(p-1);
  for (int64 i = 2; ; ++i)
  if (is_pr(i, p, fp1)) return i;
  return -1;
}

SL int64 find_pr(int64 p, const vector<pair<int64, int> >& fp1)
{
  if (p <= 1) return -1;
  if (p == 2) return 1;
  for (int64 i = 2; ; ++i)
  if (is_pr(i, p, fp1)) return i;
  return -1;
}

#if 0
struct pr_pair
{
  int idx;
  int64 value;
  pr_pair(int64 _idx=0, int64 _value=0) : idx(_idx), value(_value){}
  bool operator < (const pr_pair& r) const
  {
      return value < r.value;
  }
};

pr_pair     l1[100005], l2[100005];
int64 ind(int64 a, int64 pr, int64 p)
{
  int64 inv_pr = power_mod(pr, p-2, p);
  int64 mx = sqrt(double(p-1)+0.5);
  if (mx * mx != p - 1) ++mx;
  int64 t1 = 1, t2 = a;
  int64 temp = power_mod(pr, mx, p);
  for (unsigned int i = 0; i <= mx - 1; ++i)
  {
    l1[i] = pr_pair(i, t1);
    l2[i] = pr_pair(i, t2);
    t2 = t2 * inv_pr % p;
    t1 = t1 * temp % p;
  }
  sort(l1, l1+mx);
  sort(l2, l2+mx);
  int _i = -1, _j = -1;
  for (int i = 0, j = 0;;)
  if (l1[i].value == l2[j].value)
  {
    _i = l1[i].idx;
    _j = l2[j].idx;
    break;
  }
  else if (l1[i].value > l2[j].value)++j;
  else ++i;
  int64 ind_a = mx * _i + _j;
  return ind_a;
}
#endif

int64 ind(int64 a, int64 pr, int64 p)
{
  typedef unordered_map<int64, int> map_t;
  PE_ASSERT(a > 0);
  int64 inv_pr = inv_of(pr, p);
  int64 mx = static_cast<int64>(sqrt(double(p-1)+0.5));
  if (mx * mx != p - 1) ++mx;
  map_t mem;
  int64 t1 = 1, t2 = a;
  for (unsigned int i = 0; i <= mx - 1; ++i)
  {
    mem[t2] = i;
    t2 = t2 * inv_pr % p;
  }
  int64 temp = power_mod(pr, mx, p);
  for (unsigned int i = 0; i <= mx - 1; ++i)
  {
    auto where = mem.find(t1);
    if (where != mem.end())
    {
      return i * mx + where->second;
    }
    t1 = t1 * temp % p;
  }
  return -1;
}

class ind_solver
{
  typedef unordered_map<int64, int> map_t;
  static int64 square_root_for_ind(int64 x)
  {
    int64 ret = static_cast<int64>(sqrt(double(x)));
    if (ret * ret < x) ++ret;
    PE_ASSERT(ret * ret >= x);
    return ret;
  }

public:
  ind_solver(const int64 p, int64 pr = -1) :
    p_(p),
    pr_(pr < 0 ? find_pr(p) : pr),
    mx_(square_root_for_ind(p_-1))
  {
    const int64 inv_pr = inv_of(pr_, p);
    int64 t = 1;
    for (int i = 0; i <= mx_ - 1; ++i)
    {
      mem_[t] = i;
      t = t * inv_pr % p_;
    }
  }

  int64 operator () (int64 a) const
  {
    PE_ASSERT(a > 0);
    a %= p_;

    const int64 temp = power_mod(pr_, mx_, p_);
    const int64 inv_a = inv_of(a, p_);
    int64 t = 1;

    for (int i = 0; i <= mx_ - 1; ++i)
    {
      auto where = mem_.find(mul_mod(t, inv_a, p_));
      if (where != mem_.end())
      {
        return i * mx_ + where->second;
      }
      t = t * temp % p_;
    }

    return -1;
  }

  int64 pr() const
  {
    return pr_;
  }

private:
  const int64 p_;
  const int64 pr_;
  const int64 mx_;
  map_t mem_;
};
}

template<typename T>
struct Fraction
{
  Fraction(T u = 0, T v = 1) : a(u), b(v)
  {
    T d = __gcd(abs(a), abs(b));
    if (d > 1) a /= d, b /= d;
    if (b < 0) b = -b, a = -a;
  }
  int operator < (const Fraction& o) const
  {
    return a * o.b < b * o.a;
  }
  int operator > (const Fraction& o) const
  {
    return a * o.b > b * o.a;
  }
  int operator == (const Fraction& o) const
  {
    return a * o.b == b * o.a;
  }
  Fraction operator + (const Fraction& o) const
  {
    return Fraction(a * o.b + o.a * b, b * o.b);
  }
  Fraction operator - (const Fraction& o) const
  {
    return Fraction(a * o.b - o.a * b, b * o.b);
  }
  Fraction operator * (const Fraction& o) const
  {
    return Fraction(a * o.a, b * o.b);
  }
  Fraction operator / (const Fraction& o) const
  {
    return Fraction(a * o.b, b * o.a);
  }
  double ToFloat()
  {
    return 1. * a / b;
  }
  T a, b;
};

#if PE_HAS_INT128
void print_int128(int128 x)
{
  int dig[64];
  int top = 0;
  if (x < 0) putchar('-'), x = -x;
  while (x) dig[top++] = x % 10, x /= 10;
  if (top == 0) printf("%d", 0);
  while (top > 0) printf("%d", dig[--top]);
}
#endif

// 65701
#endif
