#ifndef __PE_NT_H__
#define __PE_NT_H__

#include "pe_base"
#include "pe_int128"
#include "pe_mod"
#include "pe_nt_base"
#include "pe_type_traits"

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(int) is_even(T v) {
  return (v & 1) == 0 ? 1 : 0;
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(int) is_odd(T v) {
  return (v & 1) == 0 ? 0 : 1;
}

template <typename T0, typename T1>
SL REQUIRES((is_native_integer<T0>::value && is_native_integer<T1>::value))
    RETURN(int) same_parity(T0 v0, T1 v1) {
  const int x = (int)(v0 & 1);
  const int y = (int)(v1 & 1);
  return x == y ? 1 : 0;
}

// 90000000599999991

#if 0
// Legacy implementation
SL int64 sqrti(int64 d) {
  const auto result = static_cast<int64>(sqrt(d));
  return result * result > d ? result - 1 : result;
}

#if PE_HAS_INT128
SL int64 sqrti(int128 d) {
  const int64 result = sqrt(static_cast<long double>(d));
  return static_cast<int128>(result) * result > d ? result - 1 : result;
}
#endif
#endif

#if defined(COMPILER_MSVC)
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(T) sqrti(T d) {
  const auto result = static_cast<T>(sqrt((long double)d));
  return result * result > d ? result - 1 : result;
}
#else
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(T) sqrti(T v) {
  return static_cast<T>(sqrt((long double)v));
}
#endif

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(T)
    nrooti_internal(T v, int n) {
  // n > 2 && v > 1
  T r = static_cast<T>(pow((long double)v, static_cast<long double>(1.) / n));
#if defined(COMPILER_MSVC)
  // Avoid floating round error when the compiler is msvc.
  if (r > 2) {
    --r;
  }
#endif
  // If r is 0, the for loop may take a long time.
  if (r < 1) {
    r = 1;
  }
  for (T nextr = r + 1;; ++nextr) {
    T t = v;
    for (int i = 0; i < n; ++i) {
      t /= nextr;
      if (t == 0) {
        return r;
      }
    }
    r = nextr;
  }
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(T) nrooti(T v, int n) {
  PE_ASSERT(n >= 0);
  if (n == 0) {
    return 1;
  }
  if (n == 1) {
    return v;
  }
  if (v == 0 || v == 1) {
    return v;
  }
  if (v == -1) {
    PE_ASSERT(n % 2 == 1);
    return v;
  }
  if (n == 2) {
    PE_ASSERT(v > 0);
    return sqrti(v);
  }
  return v > 0 ? nrooti_internal(v, n) : -nrooti_internal(-v, n);
}

SL int64 square_root_safe(int64 n) {
  if (n <= 0) return 0;
  if (n == 1) return 1;
  for (int64 test = sqrti(n);; ++test) {
    const int64 t = test * test;
    if (t == n) return test;
    if (t > n) return 0;
  }
  return 0;
}

SL int64 square_root_unsafe(int64 n) {
  if (n <= 0) return 0;
  if (n == 1) return 1;
  int64 ret = sqrti(n);
  return ret * ret == n ? ret : 0;
}

SL int64 square_root(int64 n) {
  if (n <= 0) return 0;
  if (n == 1) return 1;
  // see Donald L. Graham, Donald E. Knuth, Oren Patashnik, CONCRETE
  // MATHEMATICS, pp 70-72
  // int64 ret = static_cast<int64>(sqrt(n + 0.5));
  int64 ret = sqrti(n);
  return ret * ret == n ? ret : 0;
}

SL int is_square_free_normal(int64 n) {
  for (auto& iter : factorize(n))
    if (iter.second > 1) {
      return 0;
    }
  return 1;
}

SL int is_square_free_by_pmask(int64 n) {
  while (n != 1) {
    int now = pmask[n];
    int c = 0;
    while (n % now == 0) n /= now, ++c;
    if (c > 1) return 0;
  }
  return 1;
}

SL int is_square_free(int64 n) {
  if (n <= 0) {
    return 0;
  }

  for (int i = 0; i < pcnt; ++i) {
    if (n <= maxp) {
      return is_square_free_by_pmask(n);
    }
    const int64 p = plist[i];
    const int64 test = p * p;
    if (test > n) break;
    int c = 0;
    while (n % p == 0) n /= p, ++c;
    if (c > 1) return 0;
  }
  return 1;
}

template <typename T1, typename T2>
SL REQUIRES((is_native_integer<T1>::value && is_native_integer<T2>::value))
    RETURN(T1) power(T1 x, T2 n) {
  T1 ret = 1;
  for (; n; n >>= 1) {
    if (n & 1) ret = ret * x;
    if (n > 1) x = x * x;
  }
  return ret;
}

template <typename T1, typename T2>
SL tuple<T1, int64> extract_factor(T1 A, T2 B) {
  int64 c = 0;
  while (A && A % B == 0) A = (T1)(A / B), ++c;
  return tuple<T1, int64>{A, c};
}

// Greatest common divisor and extend greatest common divisor
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(T) gcd(T __m, T __n) {
  while (__n != 0) {
    T __t = __m % __n;
    __m = __n;
    __n = __t;
  }
  return __m;
}

template <typename T0, typename T1>
SL REQUIRES((is_native_integer<T0>::value && is_native_integer<T1>::value))
    RETURN_T(IntPromotionT(T0, T1)) gcd(T0 __m, T1 __n) {
  typedef IntPromotion(T0, T1) ResultType;
  return gcd((ResultType)__m, (ResultType)__n);
}

template <typename T>
SL T gcd(T a) {
  return a;
}

template <typename TH, typename... TT>
SL IntPromotion(TH, TT...) gcd(TH a, TT... b) {
  return gcd(a, gcd(b...));
}

template <typename T>
SL REQUIRES(is_native_integer<T>::value) RETURN(T)
    gcd(std::initializer_list<T> init) {
  T ret = 0;
  for (auto& v : init) {
    if (ret == 0) {
      ret = v;
    } else {
      ret = gcd(ret, v);
    }
  }
  return ret;
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_signed<T>::value)) RETURN(T)
    exgcd_impl(T a, T b, T& x, T& y) {
  if (b == 0) {
    x = 1;
    y = 0;
    return a;
  }

  T x1 = 0, y1 = 0;
  const T ret = exgcd_impl(b, a % b, x1, y1);
  // b * x1 + (a%b) * y1 = ret
  // b * x1 + (a - a / b * b) * y1 = ret
  // b * x1 + a * y1 - a / b * b * y1 = ret
  // y1 * a + (x1 - a / b * y1) b = ret
  x = y1;
  y = x1 - a / b * y1;
  return ret;
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_signed<T>::value)) RETURN(T)
    exgcd(T a, T b, T& x, T& y) {
  PE_ASSERT(a != 0 || b != 0);
  const T r = exgcd_impl(a, b, x, y);
  PE_ASSERT(a * x + b * y == r);
  return r;
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_signed<T>::value))
    RETURN(tuple<T, T, T>) exgcd(T a, T b) {
  PE_ASSERT(a != 0 || b != 0);
  T x = 0, y = 0;
  const T r = exgcd_impl(a, b, x, y);
  PE_ASSERT(a * x + b * y == r);
  return tuple<T, T, T>{r, x, y};
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_signed<T>::value)) RETURN(T)
    mod_inv(T a, T mod) {
  T b = mod, s = 1, t = 0, old_a = a;
  while (b > 0) {
    swap(s -= t * (a / b), t);
    swap(a %= b, b);
  }
  if (a > 1) {
    cerr << "mod inv error: " << old_a << " " << mod << endl;
    exit(1);
  }
  return T(s) < 0 ? s + mod : s;
}

// p is prime
SL int64 inv_of(int64 x, int64 p) { return power_mod_ex(x, p - 2, p); }

// solve equation a x = b (mod m)
// return 0 and set u = -1 and v = 0 if failed
// return 1, x = v (mod u)
template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_signed<T>::value)) RETURN(int)
    solve_linear_equation(T a, T b, T m, T& v, T& u) {
  v = 0;
  u = 0;

  PE_ASSERT(m);

  if (m < 0) m = -m;

  if (sizeof(T) <= 8) {
    PE_ASSERT(m <= PE_SOI63);
  }

  a %= m;
  b %= m;

  if (a < 0) a += m;
  if (b < 0) b += m;

  T xx = 0, yy = 0, d = exgcd(a, m, xx, yy);

  if (b % d) return 0;

  xx = (xx % m + m) % m;
  xx = xx * (b / d) % m;

  u = m / d;
  v = xx % u;

  return 1;
}

// solve equation x = a (mod m1) x = b (mod m2)
// return 0 and set u = 0 and t = 0 if failed
// return 1, x = v (mod u)
template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_signed<T>::value)) RETURN(int)
    crt2(T a, T m1, T b, T m2, T& v, T& u) {
  v = 0;
  u = 0;

  PE_ASSERT(m1 != 0 && m2 != 0);
  if (m1 < 0) m1 = -m1;
  if (m2 < 0) m2 = -m2;
  // x = a (mod m1)
  // x = b (mod m2)
  // x = k0 m1 + a
  // k0 m1 + a = b (mod m2)
  // k0 m1 = b - a (mod m2)
  a %= m1;
  b %= m2;
  if (a < 0) a = -a;
  if (b < 0) b = -b;

  T s = 0, t = 0;
  if (!solve_linear_equation(m1, b - a, m2, t, s)) return 0;
  // k0 = k1 * s + t
  // x = (k1 * s + t) * m1 + a
  // x = k1 * s * m1 + (a + t * m1)

  u = s * m1;
  v = ((a + t * m1) % u + u) % u;
  return 1;
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_signed<T>::value))
    RETURN(tuple<int, T, T>) crt2(T a, T m1, T b, T m2) {
  T v = 0, u = 0;
  int r = crt2(a, m1, b, m2, v, u);
  return tuple<int, T, T>{r, v, u};
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_signed<T>::value))
    RETURN(tuple<int, T, T>) crtn(T* val, T* mod, int n) {
  PE_ASSERT(val != NULL && mod != NULL);
  T v = 0, u = 1;
  int have = 1;
  for (int i = 0; i < n; ++i) {
    tie(have, v, u) = crt2(v, u, val[i], mod[i]);
    if (!have) {
      return tuple<int, T, T>{0, 0, 0};
    }
  }
  return tuple<int, T, T>{have, v, u};
}

/**
 * dest[0] = 0
 * dest[1] = 1
 * dest[2] = 1 / 2
 * dest[n-1] = 1 / (n-1)
 *
 * n can be greater than mod
 */
template <typename T, typename M>
SL void init_inv(T* dest, int64 n, M mod) {
  PE_ASSERT(n >= 1);
  dest[0] = 0;
  if (n > 1) {
    dest[1] = 1;
  }
  auto maxi = min(n, (int64)mod);
  for (int i = 2; i < maxi; ++i) {
    const auto t = mod / i;
    const auto k = mod % i;
    const auto v = mul_mod_ex(t, t, mod);
    const auto u = mul_mod_ex(dest[k], dest[k], mod);
    dest[i] = (T)mul_mod_ex(i, mul_mod_ex(v, u, mod), mod);
  }
  for (auto i = mod; i < n; ++i) {
    dest[i] = dest[i - mod];
  }
}

/**
 * dest[0] = 1
 * dest[1] = s
 * dest[2] = s(s+1)
 * dest[e-s+1]=s(s+1)...e
 */
template <typename T>
SL void init_seq_prod(T* dest, T s, T e, int64 mod) {
  dest[0] = 1;

  const int cnt = (int)(e - s + 1);
  T i = s;
  for (int j = 1; j <= cnt; ++i, ++j) {
    dest[j] = mul_mod_ex(dest[j - 1], i, mod);
  }
}

/**
 * dest[0] = 1
 * dest[1] = 1/s
 * dest[2] = 1/(s(s+1))
 * dest[e-s+1]=1/(s(s+1)...e))
 */
template <typename T>
SL void init_seq_prod_inv(T* dest, T s, T e, T mod, T lastv = 0) {
  if (lastv == 0) {
    lastv = 1;
    for (T i = s; i <= e; ++i) {
      lastv = mul_mod_ex(lastv, i, mod);
    }
    lastv = power_mod_ex(lastv, mod - 2, mod);
  }
  const int cnt = (int)(e - s + 1);
  dest[0] = 1;
  dest[cnt] = lastv;

  T i = e;
  for (int j = cnt - 1; j > 0; --j) {
    dest[j] = mul_mod_ex(dest[j + 1], i--, mod);
  }
}

template <typename T, int D>
SL void init_comb(T (*comb)[D], int n, int64 mod) {
  const int64 ONE = 1 % mod;
  for (int i = 0; i <= n; ++i)
    for (int j = 0; j <= i; ++j)
      comb[i][j] =
          j == 0 ? ONE : add_mod(comb[i - 1][j - 1], comb[i - 1][j], mod);
}

// Primitive Root
namespace pr {

/*
  test, find the primitive of a prime
*/
SL bool is_pr(int64 x, int64 p, const vector<pair<int64, int>>& f) {
  return std::none_of(std::begin(f), std::end(f),
                      [=](const pair<int64, int>& it) {
                        return power_mod_ex(x, (p - 1) / it.first, p) == 1;
                      });
}

SL bool is_pr(int64 x, int64 p) { return is_pr(x, p, factorize(p - 1)); }

SL int64 find_pr(int64 p) {
  if (p <= 1) return -1;
  if (p == 2) return 1;
  auto fp1 = factorize(p - 1);
  for (int64 i = 2;; ++i)
    if (is_pr(i, p, fp1)) return i;
  return -1;
}

SL int64 find_pr(int64 p, const vector<pair<int64, int>>& fp1) {
  if (p <= 1) return -1;
  if (p == 2) return 1;
  for (int64 i = 2;; ++i)
    if (is_pr(i, p, fp1)) return i;
  return -1;
}

SL int64 ind(int64 a, int64 pr, int64 p) {
  typedef unordered_map<int64, int> map_t;
  PE_ASSERT(a > 0);
  int64 inv_pr = inv_of(pr, p);
  auto mx = static_cast<int64>(sqrt(double(p - 1) + 0.5));
  if (mx * mx != p - 1) ++mx;
  map_t mem;
  int64 t1 = 1, t2 = a;
  for (unsigned int i = 0; i <= mx - 1; ++i) {
    mem[t2] = i;
    t2 = t2 * inv_pr % p;
  }
  int64 temp = power_mod_ex(pr, mx, p);
  for (unsigned int i = 0; i <= mx - 1; ++i) {
    auto where = mem.find(t1);
    if (where != mem.end()) {
      return i * mx + where->second;
    }
    t1 = t1 * temp % p;
  }
  return -1;
}

class ind_solver {
  typedef unordered_map<int64, int> map_t;
  static int64 square_root_for_ind(int64 x) {
    auto ret = static_cast<int64>(sqrt(double(x)));
    if (ret * ret < x) ++ret;
    PE_ASSERT(ret * ret >= x);
    return ret;
  }

 public:
  ind_solver(const int64 p, int64 pr = -1)
      : p_(p), pr_(pr < 0 ? find_pr(p) : pr), mx_(square_root_for_ind(p_ - 1)) {
    const int64 inv_pr = inv_of(pr_, p);
    int64 t = 1;
    for (int i = 0; i <= mx_ - 1; ++i) {
      mem_[t] = i;
      t = t * inv_pr % p_;
    }
  }

  int64 operator()(int64 a) const {
    PE_ASSERT(a > 0);
    a %= p_;

    const int64 temp = power_mod_ex(pr_, mx_, p_);
    const int64 inv_a = inv_of(a, p_);
    int64 t = 1;

    for (int i = 0; i <= mx_ - 1; ++i) {
      auto where = mem_.find(mul_mod(t, inv_a, p_));
      if (where != mem_.end()) {
        return i * mx_ + where->second;
      }
      t = t * temp % p_;
    }

    return -1;
  }

  int64 pr() const { return pr_; }

 private:
  const int64 p_;
  const int64 pr_;
  const int64 mx_;
  map_t mem_;
};
}  // namespace pr

// 65701
#endif
/*

*/
