#ifndef __PE_NT_H__
#define __PE_NT_H__

#include "pe_base"
#include "pe_integer_util"
#include "pe_mod"

// About numbers

// Integer limits check
static_assert(sizeof(int) >= 4, "sizeof(int) >= 4");

// square overflow integers
static const int64 PE_SOI63 =
    3037000499LL;  // x * x > 2^63 - 1 for x > PE_SOI63
static const int64 PE_SOI64 =
    4294967295LL;  // x * x > 2^64 - 1 for x > PE_SOI64

// About primes
static int pcnt;
static int* pmask = NULL;
static int* plist = NULL;
static int* phi = NULL;
static int* miu = NULL;
static int64 maxp;
static int64 maxp2;

SL void INIT_MAXP(int64 v) {
  ::maxp = v;
  ::maxp2 = (int64)maxp * maxp;
  assert(maxp >= 100000);
  assert(maxp <= INT_MAX);
}

// http://oeis.org/A006880
const int64 pmpi[] = {
    0LL,
    4LL,                    // 10
    25LL,                   // 100
    168LL,                  // 1000
    1229LL,                 // 1e4
    9592LL,                 // 1e5
    78498LL,                // 1e6
    664579LL,               // 1e7
    5761455LL,              // 1e8
    50847534LL,             // 1e9
    455052511LL,            // 1e10
    4118054813LL,           // 1e11
    37607912018LL,          // 1e12
    346065536839LL,         // 1e13
    3204941750802LL,        // 1e14
    29844570422669LL,       // 1e15
    279238341033925LL,      // 1e16
    2623557157654233LL,     // 1e17
    24739954287740860LL,    // 1e18
    234057667276344607LL,   // 1e19
    2220819602560918840LL,  // 1e20
};

SL int64 estimate_pmpi(int64 n) {
  if (n <= 1) return 0;
  int64 ret = static_cast<int64>(1. * n / log(1. * n));
  return max(ret, static_cast<int64>(1LL));
}

template <int d1, int d2>
SL void init_pmask_plist(int (&pmask)[d1], int (&plist)[d2]) {
  (void)pmask;
  (void)plist;
}

SL void init_pmask_plist(int*& pmask, int*& plist) {
  pmask = new int[maxp + 1];
  int64 size = max(static_cast<int64>((estimate_pmpi(maxp + 1) + 1) * 1.1),
                   static_cast<int64>(100000LL));
  plist = new int[size];
}

SL int is_prime(int64 n) {
  if (n <= 1) return 0;
  if (n <= maxp) return pmask[n] == n;
  PE_ASSERT(n <= maxp2);
  for (int i = 0; i < pcnt; ++i) {
    const int64 p = plist[i];
    const int64 test = p * p;
    if (test > n) break;
    if (n % p == 0) return 0;
  }
  return 1;
}

SL void deinit_primes() {
  pcnt = maxp = maxp2 = 0;
  if (pmask) {
    delete[] pmask;
    pmask = nullptr;
  }
  if (plist) {
    delete[] plist;
    plist = nullptr;
  }
  if (phi) {
    delete[] phi;
    phi = nullptr;
  }
  if (miu) {
    delete[] miu;
    miu = nullptr;
  }
}

SL void init_primes() {
  if (maxp == 0) {
    INIT_MAXP(1000000);
  }

  init_pmask_plist(pmask, plist);

  pcnt = 0;
  for (int i = 1; i <= maxp; ++i) pmask[i] = i;
  for (int i = 2; i <= maxp; ++i) {
    if (pmask[i] == i) {
      plist[pcnt++] = i;
    }
    for (int j = 0; j < pcnt; ++j) {
      const int64 t = (int64)plist[j] * i;
      if (t > maxp) break;
      pmask[t] = plist[j];
      if (i % plist[j] == 0) {
        break;
      }
    }
  }
}

SL void init_primes(int cal_phi, int cal_miu) {
  if (maxp == 0) {
    INIT_MAXP(1000000);
  }

  init_pmask_plist(pmask, plist);

  pcnt = 0;
  if (cal_phi) phi = new int[maxp + 1];
  if (cal_miu) miu = new int[maxp + 1];

  for (int i = 1; i <= maxp; ++i) pmask[i] = i;
  if (phi) phi[0] = 0, phi[1] = 1;
  if (miu) miu[0] = 0, miu[1] = 1;

  for (int i = 2; i <= maxp; ++i) {
    if (pmask[i] == i) {
      if (miu) miu[i] = -1;
      if (phi) phi[i] = i - 1;
      plist[pcnt++] = i;
    }
    for (int j = 0; j < pcnt; ++j) {
      const int64 t = (int64)plist[j] * i;
      if (t > maxp) break;
      pmask[t] = plist[j];
      if (i % plist[j] == 0) {
        if (miu) miu[t] = 0;
        if (phi) phi[t] = phi[i] * plist[j];
        break;
      } else {
        if (miu) miu[t] = -miu[i];
        if (phi) phi[t] = phi[i] * (plist[j] - 1);
      }
    }
  }
}

SL vector<pair<int64, int>> factorize(int64 n) {
  vector<pair<int64, int>> ret;
  if (n <= 1) {
    return ret;
  }

  if (n <= maxp) {
    while (n != 1) {
      int now = pmask[n];
      int c = 0;
      while (n % now == 0) n /= now, ++c;
      if (c) ret.emplace_back((int64)now, c);
    }
  } else {
    PE_ASSERT(n <= maxp2);
    for (int i = 0; i < pcnt; ++i) {
      const int64 p = plist[i];
      const int64 test = p * p;
      if (test > n) break;
      int c = 0;
      while (n % p == 0) n /= p, ++c;
      if (c) ret.emplace_back(p, c);
    }
    if (n != 1) ret.emplace_back(n, 1);
  }
  return ret;
}

SL void get_factors_impl(const int limit, const vector<pair<int64, int>>& f,
                      int64 value, vector<int64>& result) {
  result.push_back(value);
  for (int i = 0; i < limit; ++i) {
    int64 tvalue = value;
    const int64 p = f[i].first;
    const int c = f[i].second;
    for (int j = 1; j <= c; ++j) {
      tvalue *= p;
      get_factors_impl(i, f, tvalue, result);
    }
  }
}

SL vector<int64> get_factors(const vector<pair<int64, int>>& f) {
  vector<int64> result;
  get_factors_impl(static_cast<int>(f.size()), f, 1, result);
  return result;
}

SL vector<int64> get_factors(int64 value) {
  vector<int64> result;
  auto f = factorize(value);
  get_factors_impl(static_cast<int>(f.size()), f, 1, result);
  return result;
}

SL int64 cal_phi(int64 n, const vector<pair<int64, int>>& fn) {
  if (n <= 0) return -1;
  if (phi && n <= maxp) return phi[n];
  int64 phi_n = n;
  for (auto& it : fn) phi_n -= phi_n / it.first;
  return phi_n;
}

SL int64 cal_phi(int64 n) {
  if (n <= 0) return -1;
  if (phi && n <= maxp) return phi[n];
  auto fn = factorize(n);
  int64 phi_n = n;
  for (auto& it : fn) phi_n -= phi_n / it.first;
  return phi_n;
}

template<typename T>
class DVA {
 public:
  int64 n;
  int64 m;
  int isPerfectSquare;
  // Keys from large to small.
  std::vector<int64> keys;
  std::vector<T> sv;
  std::vector<T> lv;

  DVA(int64 n)
      : n(n), m(static_cast<int64>(sqrt(n))), isPerfectSquare(m * m == n) {
    for (int64 i = 1; i <= m; ++i) {
      keys.push_back(i);
    }
    for (int64 i = n / m > m ? m : m - 1; i >= 1; --i) {
      keys.push_back(n / i);
    }
    reverse(keys.begin(), keys.end());
    sv.resize(m + 1);
    lv.resize(m + 1);
    fill(sv.begin(), sv.end(), 0);
    fill(lv.begin(), lv.end(), 0);
  }

  DVA(const DVA& other) = default;
  DVA(DVA&& other) = default;
  DVA& operator=(const DVA& other) = default;
  DVA& operator=(DVA&& other) = default;

  T& operator[](int64 v) { return v <= m ? sv[v] : lv[n / v]; }

  T operator[](int64 v) const { return v <= m ? sv[v] : lv[n / v]; }
};

template<typename T>
SL DVA<T> prime_s0(const int64 n) {
  PE_ASSERT(n >= 1);
  DVA<T> dva(n);

  for (auto& key : dva.keys) dva[key] = key - 1;

  for (int64 p = 2; p <= dva.m; ++p)
    if (dva[p] != dva[p - 1]) {
      const auto pcnt = dva[p - 1];
      const int64 p2 = p * p;
      for (auto& key : dva.keys) {
        if (key < p2) break;
        dva[key] -= dva[key / p] - pcnt;
      }
    }
  return dva;
}

#define prime_pi prime_s0

template<typename T>
SL DVA<T> prime_s1(const int64 n) {
  PE_ASSERT(n >= 1);
  DVA<T> dva(n);
  for (auto& key : dva.keys) {
    if (key & 1) {
      T v((key + 1) >> 1);
      dva[key] = v * key - 1;
    } else {
      T v(key >> 1);
      dva[key] = v * (key + 1) - 1;
    }
  }

  for (int64 p = 2; p <= dva.m; ++p)
    if (dva[p] != dva[p - 1]) {
      const auto psum = dva[p - 1];
      const int64 p2 = p * p;
      for (auto& key : dva.keys) {
        if (key < p2) break;
        dva[key] -= (dva[key / p] - psum) * p;
      }
    }
  return dva;
}

#define prime_sum prime_s1

template<typename T>
SL vector<DVA<T>> prime_s0_pmod_even(int64 n, int mod) {
  vector<DVA<T>> result;
  for (int i = 0; i < mod; ++i)
    result.emplace_back(n);

  for (int i = 1; i < mod; i += 2) {
    auto& target = result[i];
    const int dec = i == 1;
    for (auto key: result[0].keys)
      target[key] = (key + mod - i) / mod - dec;
  }
  for (int i = 1; ; ++i) {
    const int64 p = plist[i];
    const int64 p2 = p * p;
    if (p2 > n) break;
    for (auto key: result[0].keys) {
      if (key < p2) break;
      const int rp = p % mod;
      for (int j = 1; j < mod; j += 2) {
        const int next = rp * j % mod;
        result[next][key] -= result[j][key/p] - result[j][p-1];
      }
    }
  }

  auto& target = result[2 % mod];
  for (auto key: result[0].keys) {
    target[key] += key >= 2 ? 1 : 0;
  }
  return result;
}

template<typename T>
SL vector<DVA<T>> prime_s0_pmod_odd(int64 n, int mod) {
  vector<DVA<T>> result;
  for (int i = 0; i < mod; ++i)
    result.emplace_back(n);

  for (int i = 0; i < mod; ++i) {
    const int dec = (i == 1 % mod) + (i == 0);
    for (auto key: result[0].keys)
      result[i][key] = (key + mod - i) / mod - dec;
  }
  for (int i = 0; ; ++i) {
    const int64 p = plist[i];
    const int64 p2 = p * p;
    if (p2 > n) break;
    for (auto key: result[0].keys) {
      if (key < p2) break;
      const int rp = p % mod;
      for (int j = 0; j < mod; ++j) {
        const int next = rp * j % mod;
        result[next][key] -= result[j][key/p] - result[j][p-1];
      }
    }
  }
  return result;
}

template<typename T>
SL vector<DVA<T>> prime_s0_pmod(int64 n, int mod) {
  return mod & 1 ? prime_s0_pmod_odd<T>(n, mod) : prime_s0_pmod_even<T>(n, mod);
}

template<typename T>
SL vector<DVA<T>> prime_s1_pmod_even(int64 n, int mod) {
  vector<DVA<T>> result;
  for (int i = 0; i < mod; ++i)
    result.emplace_back(n);

  for (int i = 1; i < mod; i += 2) {
    auto& target = result[i];
    const int dec = i == 1;
    for (auto key: result[0].keys) {
      const int64 c = (key + mod - i) / mod;
      target[key] = c * (c - 1) / 2 * mod + c * i - dec;
    }
  }
  for (int i = 1; ; ++i) {
    const int64 p = plist[i];
    const int64 p2 = p * p;
    if (p2 > n) break;
    for (auto key: result[0].keys) {
      if (key < p2) break;
      const int rp = p % mod;
      for (int j = 1; j < mod; j += 2) {
        const int next = rp * j % mod;
        result[next][key] -= (result[j][key/p] - result[j][p-1]) * p;
      }
    }
  }

  auto& target = result[2 % mod];
  for (auto key: result[0].keys) {
    target[key] += key >= 2 ? 2 : 0;
  }
  return result;
}

template<typename T>
SL vector<DVA<T>> prime_s1_pmod_odd(int64 n, int mod) {
  vector<DVA<T>> result;
  for (int i = 0; i < mod; ++i)
    result.emplace_back(n);

  for (int i = 0; i < mod; ++i) {
    auto& target = result[i];
    const int dec = i == 1 % mod;
    for (auto key: result[0].keys) {
      const int64 c = (key + mod - i) / mod;
      target[key] = c * (c - 1) / 2 * mod + c * i - dec;
    }
  }

  for (int i = 0; ; ++i) {
    const int64 p = plist[i];
    const int64 p2 = p * p;
    if (p2 > n) break;
    for (auto key: result[0].keys) {
      if (key < p2) break;
      const int rp = p % mod;
      for (int j = 0; j < mod; ++j) {
        const int next = rp * j % mod;
        result[next][key] -= (result[j][key/p] - result[j][p-1]) * p;
      }
    }
  }

  return result;
}

template<typename T>
SL vector<DVA<T>> prime_s1_pmod(int64 n, int mod) {
  return mod & 1 ? prime_s1_pmod_odd<T>(n, mod) : prime_s1_pmod_even<T>(n, mod);
}

SL void init_inv(int64* dest, int64 n, int64 mod) {
  PE_ASSERT(n <= mod && n >= 2);
  dest[0] = 0;
  dest[1] = 1;
  for (int i = 2; i < n; ++i) {
    const int64 t = mod / i;
    const int64 k = mod % i;
    const int64 v = t * t % mod;
    const int64 u = dest[k] * dest[k] % mod;
    dest[i] = i * v % mod * u % mod;
  }
}

SL void init_inv(int* dest, int n, int mod) {
  PE_ASSERT(n <= mod && n >= 2);
  dest[0] = 0;
  dest[1] = 1;
  for (int i = 2; i < n; ++i) {
    const int t = mod / i;
    const int k = mod % i;
    const int v = (int64)t * t % mod;
    const int u = (int64)dest[k] * dest[k] % mod;
    dest[i] = (int64)i * v % mod * (int64)u % mod;
  }
}

SL int64 square_root_safe(int64 n) {
  if (n <= 0) return 0;
  if (n == 1) return 1;
  for (int64 test = static_cast<int64>(sqrt(n));; ++test) {
    const int64 t = test * test;
    if (t == n) return test;
    if (t > n) return 0;
  }
  return 0;
}

SL int64 square_root_unsafe(int64 n) {
  if (n <= 0) return 0;
  if (n == 1) return 1;
  int64 ret = static_cast<int64>(sqrt(n));
  return ret * ret == n ? ret : 0;
}

SL int64 square_root(int64 n) {
  if (n <= 0) return 0;
  if (n == 1) return 1;
  // see Donald L. Graham, Donald E. Knuth, Oren Patashnik, CONCRETE
  // MATHEMATICS, pp 70-72
  int64 ret = static_cast<int64>(sqrt(n + 0.5));
  return ret * ret == n ? ret : 0;
}

// p is prime
SL int64 inv_of(int64 x, int64 p) { return power_mod(x, p - 2, p); }

// calculate C(n, m) % P where P is prime
template <int64 P, int64 F = P>
struct comb_moder {
  static_assert(P <= PE_SOI63, "P <= PE_SOI63");
  static_assert(F > 0, "F > 0");
  comb_moder() { init(); }
  static int64 inv(int64 x) {
    int64 result = 1;
    int n = P - 2;
    x %= P;
    for (; n; n >>= 1, x = x * x % P)
      if (n & 1) result = result * x % P;
    return result;
  }
  static int64* fac;
  static void init() {
    if (fac == NULL) {
      fac = new int64[F];
      fac[0] = 1;
      for (int i = 1; i < F; ++i) fac[i] = fac[i - 1] * i % P;
    }
  }
  static void destroy_fac() {
    delete[] fac;
    fac = NULL;
  }
  static int64 s(int64 x) { return x & 1 ? -1 : 1; }
  static int64 comb(int64 m, int64 n) {
    PE_ASSERT(fac);

    if (m < 0 || n > m) return 0;

    int64 pp = 0;
    int64 dist = m - n;

    for (int64 mm = m / P, nn = n / P, dd = dist / P; mm;
         mm /= P, nn /= P, dd /= P) {
      pp += mm - nn - dd;
    }
    if (pp) return 0;
    int64 l = 1, r = 1;
    for (int64 x = m; x; x /= P) {
      PE_ASSERT(x % P < F);
      l = l * s(x / P) * fac[x % P] % P;
    }
    for (int64 x = n; x; x /= P) {
      PE_ASSERT(x % P < F);
      r = r * s(x / P) * fac[x % P] % P;
    }
    for (int64 x = dist; x; x /= P) {
      PE_ASSERT(x % P < F);
      r = r * s(x / P) * fac[x % P] % P;
    }
    l = (l + P) % P;
    r = (r + P) % P;
    int64 t = (inv(r) * l % P + P) % P;
    return t;
  }
};
template <int64 P, int64 F>
int64* comb_moder<P, F>::fac;

// greatest common divisor and extend greatest common divisor
#ifndef COMPILER_GNU
template <typename _EuclideanRingElement>
_EuclideanRingElement __gcd(_EuclideanRingElement __m,
                            _EuclideanRingElement __n) {
  while (__n != 0) {
    _EuclideanRingElement __t = __m % __n;
    __m = __n;
    __n = __t;
  }
  return __m;
}
#endif

#define gcd __gcd

template<typename T>
SL T exgcd_impl(T a, T b, T& x, T& y) {
  if (b == 0) {
    x = 1;
    y = 0;
    return a;
  }

  T x1 = 0, y1 = 0;
  const T ret = exgcd_impl(b, a % b, x1, y1);
  // b * x1 + (a%b) * y1 = ret
  // b * x1 + (a - a / b * b) * y1 = ret
  // b * x1 + a * y1 - a / b * b * y1 = ret
  // y1 * a + (x1 - a / b * y1) b = ret
  x = y1;
  y = x1 - a / b * y1;
  return ret;
}

template<typename T>
SL T exgcd(T a, T b, T& x, T& y) {
  PE_ASSERT(a != 0 || b != 0);
  const T r = exgcd_impl(a, b, x, y);
  PE_ASSERT(a * x + b * y == r);
  return r;
}

template<typename T>
SL tuple<T, T, T> exgcd(T a, T b) {
  PE_ASSERT(a != 0 || b != 0);
  T x = 0, y = 0;
  const T r = exgcd_impl(a, b, x, y);
  PE_ASSERT(a * x + b * y == r);
  return tuple<T, T, T>{r, x, y};
}

// solve equation a x = b (mod m)
// return 0 and set u = -1 and v = 0 if failed
// return 1, x = v (mod u)
template<typename T>
SL int solve_linear_equation(T a, T b, T m, T& v, T& u) {
  v = 0;
  u = 0;

  PE_ASSERT(m);

  if (m < 0) m = -m;

  if (sizeof(T) <= 8) {
    PE_ASSERT(m <= PE_SOI63);
  }

  a %= m;
  b %= m;

  if (a < 0) a += m;
  if (b < 0) b += m;

  T xx = 0, yy = 0, d = exgcd(a, m, xx, yy);

  if (b % d) return 0;

  xx = (xx % m + m) % m;
  xx = xx * (b / d) % m;

  u = m / d;
  v = xx % u;

  return 1;
}

// solve equation x = a (mod m1) x = b (mod m2)
// return 0 and set u = 0 and t = 0 if failed
// return 1, x = v (mod u)
template<typename T>
SL int crt2(T a, T m1, T b, T m2, T& v, T& u) {
  v = 0;
  u = 0;

  PE_ASSERT(m1 != 0 && m2 != 0);
  if (m1 < 0) m1 = -m1;
  if (m2 < 0) m2 = -m2;
  // x = a (mod m1)
  // x = b (mod m2)
  // x = k0 m1 + a
  // k0 m1 + a = b (mod m2)
  // k0 m1 = b - a (mod m2)
  a %= m1;
  b %= m2;
  if (a < 0) a = -a;
  if (b < 0) b = -b;

  T s = 0, t = 0;
  if (!solve_linear_equation(m1, b - a, m2, t, s)) return 0;
  // k0 = k1 * s + t
  // x = (k1 * s + t) * m1 + a
  // x = k1 * s * m1 + (a + t * m1)

  u = s * m1;
  v = ((a + t * m1) % u + u) % u;
  return 1;
}

template<typename T>
SL tuple<int, T, T> crt2(T a, T m1, T b, T m2) {
  T v = 0, u = 0;
  int r = crt2(a, m1, b, m2, v, u);
  return tuple<int, T, T>{r, v, u};
}

template<typename T>
SL tuple<int, T, T> crtn(T* val, T* mod, int n) {
  PE_ASSERT(val != NULL && mod != NULL);
  T v = 0, u = 1;
  int have = 1;
  for (int i = 0; i < n; ++i) {
    tie(have, v, u) = crt2(v, u, val[i], mod[i]);
    if (!have) {
      return tuple<int, T, T>{0, 0, 0};
    }
  }
  return tuple<int, T, T>{have, v, u};
}

// prime test for n <= 2^63 - 1
// http://oeis.org/A014233
const int64 sopp[] = {
    2047LL,                 // 2
    1373653LL,              // 3
    25326001LL,             // 5
    3215031751LL,           // 7
    2152302898747LL,        // 11
    3474749660383LL,        // 13
    341550071728321LL,      // 17
    341550071728321LL,      // 19
    3825123056546413051LL,  // 23
    3825123056546413051LL,  // 29
    3825123056546413051LL,  // 31
                            // bigger than 2^64             // 37
                            // 2^63 = 9223372036854775808   //
};
const int64 sopp_size = sizeof(sopp) / sizeof(sopp[0]);

SL int MR_test_impl(int s, int64 t, int64 n, int x) {
  // PE_ASSERT((n&1) == 0)

  if (n <= PE_SOI63) {
    t = power_mod<int64>(x, t, n);
    if (t == 1 || t == n - 1) return 1;

    for (int i = 1; i < s; ++i) {
      t = mul_mod(t, t, n);
      if (t == n - 1) return 1;
    }
  } else {
    t = power_mod_ex(x, t, n);
    if (t == 1 || t == n - 1) return 1;

    for (int i = 1; i < s; ++i) {
      t = mul_mod_ex(t, t, n);
      if (t == n - 1) return 1;
    }
  }
  return 0;
}

SL int MR_test(int64 n, int x) {
  if (n <= 1) return 0;
  if ((n & 1) == 0) return 0;

  int s = 0;
  int64 t = n - 1;
  while ((t & 1) == 0) ++s, t >>= 1;

  return MR_test_impl(s, t, n, x);
}

SL int is_prime_ex(int64 n) {
  if (n <= 1) return 0;
  if (n == 2) return 1;
  if ((n & 1) == 0) return 0;
  if (n <= maxp) return pmask[n] == n;

  for (int i = 1; i < 20; ++i)
    if (n % plist[i] == 0) return 0;

  int s = 0;
  int64 t = n - 1;
  while ((t & 1) == 0) ++s, t >>= 1;

  for (int i = 0; i < sopp_size; ++i) {
    const int64 val = sopp[i];
    if (n == val) return 0;
    if (!MR_test_impl(s, t, n, plist[i])) return 0;
    if (n < val) break;
  }
  return 1;
}

// C-style random number generator
// ANSI_ISO_9899-1999: The value of the RAND_MAX macro shall be at least 32767.
// We assume RAND_MAX is either 32767 or 2147483647
#if RAND_MAX == 32767

SL int crandbit() { return rand() & 1; }
SL int crand15() { return rand(); }
SL int crand31() { return crand15() << 16 | crand15() << 1 | crandbit(); }
SL int64 crand63() {
  return (int64)crand31() << 32 | crand31() << 1 | crandbit();
}

SL int crandi() { return crand31(); }
SL double crandd() {
  static const double coe = 1. / (RAND_MAX + 1);
  return coe * rand();
}

#elif RAND_MAX == 2147483647

SL int crandbit() { return rand() & 1; }
SL int crand15() { return rand() & 32767; }
SL int crand31() { return rand(); }
SL int64 crand63() {
  return (int64)crand31() << 32 | crand31() << 1 | crandbit();
}

SL int crandi() { return crand31(); }
SL double crandd() {
  static const double coe = 1. / ((int64)RAND_MAX + 1LL);
  return coe * rand();
}

#else

#error "RAND_MAX should be either 32767 or 2147483647"

#endif

// C++ style random number generator
template <typename RE, typename DS>
class RandomGenerator {
 public:
  RandomGenerator(const RE& engine, const DS& distribution)
      : random_engine_(engine), distribution_(distribution) {}
  int operator()() { return distribution_(random_engine_); }

 private:
  RE random_engine_;
  DS distribution_;
};

RandomGenerator<std::mt19937, uniform_int_distribution<int>>
SL make_uniform_generator(int seed, int min, int max) {
  PE_ASSERT(min <= max);
  return RandomGenerator<std::mt19937, uniform_int_distribution<int>>(
      std::mt19937(seed), std::uniform_int_distribution<int>(min, max));
}

RandomGenerator<std::mt19937, uniform_int_distribution<int>>
SL make_uniform_generator(int min, int max) {
  std::random_device rd;
  PE_ASSERT(min <= max);
  return RandomGenerator<std::mt19937, uniform_int_distribution<int>>(
      std::mt19937(rd()), std::uniform_int_distribution<int>(min, max));
}

// Primitive Root
namespace pr {

/*
  test, find the primitive of a prime
*/
SL bool is_pr(int64 x, int64 p, const vector<pair<int64, int>>& f) {
  return std::none_of(std::begin(f), std::end(f),
                      [=](const pair<int64, int>& it) {
                        return power_mod(x, (p - 1) / it.first, p) == 1;
                      });
}

SL bool is_pr(int64 x, int64 p) { return is_pr(x, p, factorize(p - 1)); }

SL int64 find_pr(int64 p) {
  if (p <= 1) return -1;
  if (p == 2) return 1;
  auto fp1 = factorize(p - 1);
  for (int64 i = 2;; ++i)
    if (is_pr(i, p, fp1)) return i;
  return -1;
}

SL int64 find_pr(int64 p, const vector<pair<int64, int>>& fp1) {
  if (p <= 1) return -1;
  if (p == 2) return 1;
  for (int64 i = 2;; ++i)
    if (is_pr(i, p, fp1)) return i;
  return -1;
}

SL int64 ind(int64 a, int64 pr, int64 p) {
  typedef unordered_map<int64, int> map_t;
  PE_ASSERT(a > 0);
  int64 inv_pr = inv_of(pr, p);
  int64 mx = static_cast<int64>(sqrt(double(p - 1) + 0.5));
  if (mx * mx != p - 1) ++mx;
  map_t mem;
  int64 t1 = 1, t2 = a;
  for (unsigned int i = 0; i <= mx - 1; ++i) {
    mem[t2] = i;
    t2 = t2 * inv_pr % p;
  }
  int64 temp = power_mod(pr, mx, p);
  for (unsigned int i = 0; i <= mx - 1; ++i) {
    auto where = mem.find(t1);
    if (where != mem.end()) {
      return i * mx + where->second;
    }
    t1 = t1 * temp % p;
  }
  return -1;
}

class ind_solver {
  typedef unordered_map<int64, int> map_t;
  static int64 square_root_for_ind(int64 x) {
    int64 ret = static_cast<int64>(sqrt(double(x)));
    if (ret * ret < x) ++ret;
    PE_ASSERT(ret * ret >= x);
    return ret;
  }

 public:
  ind_solver(const int64 p, int64 pr = -1)
      : p_(p), pr_(pr < 0 ? find_pr(p) : pr), mx_(square_root_for_ind(p_ - 1)) {
    const int64 inv_pr = inv_of(pr_, p);
    int64 t = 1;
    for (int i = 0; i <= mx_ - 1; ++i) {
      mem_[t] = i;
      t = t * inv_pr % p_;
    }
  }

  int64 operator()(int64 a) const {
    PE_ASSERT(a > 0);
    a %= p_;

    const int64 temp = power_mod(pr_, mx_, p_);
    const int64 inv_a = inv_of(a, p_);
    int64 t = 1;

    for (int i = 0; i <= mx_ - 1; ++i) {
      auto where = mem_.find(mul_mod(t, inv_a, p_));
      if (where != mem_.end()) {
        return i * mx_ + where->second;
      }
      t = t * temp % p_;
    }

    return -1;
  }

  int64 pr() const { return pr_; }

 private:
  const int64 p_;
  const int64 pr_;
  const int64 mx_;
  map_t mem_;
};
}  // namespace pr

template <typename T>
struct Fraction {
  Fraction(T u = 0, T v = 1) : a(u), b(v) {
    T d = __gcd(abs(a), abs(b));
    if (d > 1) a /= d, b /= d;
    if (b < 0) b = -b, a = -a;
  }
  int operator<(const Fraction& o) const { return a * o.b < b * o.a; }
  int operator>(const Fraction& o) const { return a * o.b > b * o.a; }
  int operator==(const Fraction& o) const { return a * o.b == b * o.a; }
  Fraction operator+(const Fraction& o) const {
    return Fraction(a * o.b + o.a * b, b * o.b);
  }
  Fraction operator-(const Fraction& o) const {
    return Fraction(a * o.b - o.a * b, b * o.b);
  }
  Fraction operator*(const Fraction& o) const {
    return Fraction(a * o.a, b * o.b);
  }
  Fraction operator/(const Fraction& o) const {
    return Fraction(a * o.b, b * o.a);
  }
  double ToFloat() { return 1. * a / b; }
  T a, b;
};


// 65701
#endif
/*

*/
