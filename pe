#ifndef __PE_H__
#define __PE_H__

// How to use a library in MinGW or VC++
// https://github.com/baihacker/pe/blob/master/libraries_on_win64.md#use


// Compiler and cpp version check
#if defined(__GNUC__)
  #define COMPILER_GNU

  #if __cplusplus < 201103L
  #define PE_HAS_CPP11 0
  #else
  #define PE_HAS_CPP11 1
  #endif

  #if __cplusplus < 201703L
  #define PE_HAS_CPP17 0
  #else
  #define PE_HAS_CPP17 1
  #endif
#elif defined(_MSC_VER)
  #define COMPILER_MSVC

  // VC2015 or above to support c++11
  // https://en.wikipedia.org/wiki/Microsoft_Visual_C%2B%2B#Internal_version_numbering
  // https://en.cppreference.com/w/cpp/compiler_support#cpp11
  #if _MSC_VER < 1900
  #define PE_HAS_CPP11 0
  #else
  #define PE_HAS_CPP11 1
  #endif

  #define PE_HAS_CPP17 0
#else
  #define PE_HAS_CPP11 0
  #define PE_HAS_CPP17 0
#endif

// Platform
#if _WIN32 || _WIN64
#define PLATFORM_WIN 1
#else
#define PLATFORM_WIN 0
#endif

// Arch
#if defined(COMPILER_GNU)

#if defined(__x86_64)
  #define PE_X86_64 1
  #define PE_X86_32 0
#elif defined(_X86_)
  #define PE_X86_64 0
  #define PE_X86_32 1
#else
  #error "unknown arch"
#endif

#elif defined(COMPILER_MSVC)

#if defined(_M_X64)
  #define PE_X86_64 1
  #define PE_X86_32 0
#else
  #define PE_X86_64 0
  #define PE_X86_32 1
#endif

#else
  #define PE_X86_64 0
  #define PE_X86_32 1
#endif

#if defined(__AVX2__) && __AVX2__
  #define PE_HAS_AVX2 1
#else
  #define PE_HAS_AVX2 0
#endif

// int128

// Let int128 recognized in vscode.
#if !defined(TRY_TO_USE_INT128)
#define TRY_TO_USE_INT128 1
#endif

#if defined(VSCODE_EDITOR)
#define __SIZEOF_INT128__ 16
#endif

#if TRY_TO_USE_INT128 && defined(__SIZEOF_INT128__)
#define PE_HAS_INT128 1
typedef __int128 int128;
typedef unsigned __int128 uint128;
#else
#define PE_HAS_INT128 0
#endif

// Link options
#if defined(COMPILER_MSVC)
#pragma warning(disable : 4996)
#pragma comment(linker, "/STACK:268435456")
#endif

// At least c++11
#if !PE_HAS_CPP11
#error "c++11 or above only"
#endif

// See https://github.com/baihacker/pe/blob/master/libraries_on_win64.md for how to build and use a library.
// The compiled binaries (flint, gmp, mpfr, mpir, libbf) on windows (x64) can be found here
// https://pan.baidu.com/s/1OI-vk3JJevYphIsFoNg_vA) (pwd:x7cg)


// Configurations
#if !defined(ENABLE_ASSERT)
#define ENABLE_ASSERT 1
#endif

// Link: https://www.openmp.org/
// Doc: https://www.openmp.org/wp-content/uploads/openmp-4.5.pdf
// Add -fopenmp in gcc compile command of config it in vc solution property dialog.
// Change 1 to 0, if you want to prevent pe from using OPENMP even if OPENMP is enabled by compiler.
#if !defined(ENABLE_OPENMP)
#define ENABLE_OPENMP ((1 && defined(_OPENMP)))
#endif

// Link: http://eigen.tuxfamily.org/index.php?title=Main_Page
// Doc: http://eigen.tuxfamily.org/dox/
// Please make sure #include <Eigen/Dense> work
#if !defined(ENABLE_EIGEN)
#define ENABLE_EIGEN 1
#endif

// Link: https://gmplib.org/
// Doc: https://gmplib.org/manual/C_002b_002b-Interface-General.html
#if !defined(ENABLE_GMP)
#define ENABLE_GMP 1
#endif

// Link: http://www.flintlib.org
// Doc: http://www.flintlib.org/flint-2.5.pdf
#if !defined(ENABLE_FLINT)
#define ENABLE_FLINT 1
#endif

// Link: https://www.mpfr.org/
#if !defined(ENABLE_MPFR)
#define ENABLE_MPFR 1
#endif

// Link: http://mpir.org/
#if !defined(ENABLE_MPIR)
#define ENABLE_MPIR 1
#endif

// Link: https://bellard.org/libbf/
#if !defined(ENABLE_LIBBF)
#define ENABLE_LIBBF 1
#endif

// Check dependencies
#if ENABLE_FLINT

#if !ENABLE_GMP
#error gmp should be enabled if flint is enabled
#endif

#if !ENABLE_MPFR
#error mpfr should be enabled if flint is enabled
#endif

#if !ENABLE_MPIR
#error mpir should be enabled if flint is enabled
#endif

#endif


// Include third party libraries and apply fixes to them.
#if ENABLE_LIBBF

#include <cstdint>
#include <cstdlib>

extern "C" {

#include <libbf.h>

void *bf_realloc(void *ptr, size_t size) {
  return realloc(ptr, size);
}

}

#endif


// flint must come before the following libs.
#if ENABLE_FLINT

#if defined(COMPILER_MSVC)
#include <malloc.h>
#define alloca _alloca
#endif

#include <flint.h>
#include <fmpz.h>
#include <fq_nmod_poly.h>
#include <nmod_poly.h>
#endif

#if ENABLE_GMP
#include <gmp.h>
#include <gmpxx.h>

#if defined(COMPILER_MSVC)
#include <iostream>
static inline std::ostream& operator << (std::ostream& o, __mpz_struct const * x) {
  size_t sz = mpz_sizeinbase(x, 10) + 1;
  char * buff = new char[sz+1];
  if (buff != NULL) {
    gmp_sprintf(buff, "%Zd", x);
  }
  o << buff;
  delete[] buff;
  return o;
}
#endif
#endif

#if ENABLE_MPFR
#include <mpfr.h>
#include <mpf2mpfr.h>
#endif

#if ENABLE_MPIR
#include <mpir.h>
#endif

#if ENABLE_OPENMP
#include <omp.h>
#endif

#if ENABLE_EIGEN
#include <Eigen/Dense>
#endif


// Include pe
#include "pe_base"
#include "pe_util"
#include "pe_integer_util"
#include "pe_bit"
#include "pe_tree"
#include "pe_mod"
#include "pe_ntt"
#include "pe_fft"
#include "pe_nt"
#include "pe_mat"
#include "pe_poly_algo"
#include "pe_poly"

#if !defined(USE_BIG_NUMBER)
// #include "pe_bi"
#include "pe_bi32"
#else
#include "pe_bn"
#endif

#include "pe_geometry"
#include "pe_memory"
#include "pe_parallel"
#include "pe_parallel_algo"
#include "pe_misc"

#endif
