#ifndef __PE_H__
#define __PE_H__
#if defined(VSCODE_EDITOR)
#define __SIZEOF_INT128__ 16
#endif

// Compiler and cpp version check
#if defined(__GNUC__)
  #define COMPILER_GNU

  #if __cplusplus < 201103L
  #define PE_HAS_CPP11 0
  #else
  #define PE_HAS_CPP11 1
  #endif

  #if __cplusplus < 201703L
  #define PE_HAS_CPP17 0
  #else
  #define PE_HAS_CPP17 1
  #endif
#elif defined(_MSC_VER)
  #define COMPILER_MSVC

  // VC2015 or above to support c++11
  // https://en.wikipedia.org/wiki/Microsoft_Visual_C%2B%2B#Internal_version_numbering
  // https://en.cppreference.com/w/cpp/compiler_support#cpp11
  #if _MSC_VER < 1900
  #define PE_HAS_CPP11 0
  #else
  #define PE_HAS_CPP11 1
  #endif

  #define PE_HAS_CPP17 0
#else
  #define PE_HAS_CPP11 0
  #define PE_HAS_CPP17 0
#endif

// Platform
#if _WIN32 || _WIN64
#define PLATFORM_WIN 1
#else
#define PLATFORM_WIN 0
#endif

// Arch
#if defined(COMPILER_GNU)

#if defined(__x86_64)
  #define PE_X86_64 1
  #define PE_X86_32 0
#elif defined(__x86)
  #define PE_X86_64 0
  #define PE_X86_32 1
#else
  #error "unknown arch"
#endif

#elif defined(COMPILER_MSVC)

#if defined(_M_X64)
  #define PE_X86_64 1
  #define PE_X86_32 0
#else
  #define PE_X86_64 0
  #define PE_X86_32 1
#endif

#else
  #define PE_X86_64 0
  #define PE_X86_32 1
#endif

// int128
#if defined(__SIZEOF_INT128__)
#define PE_HAS_INT128 1
typedef __int128 int128;
typedef unsigned __int128 uint128;
#else
#define PE_HAS_INT128 0
#endif

// Link option
#if defined(COMPILER_MSVC)
#pragma warning(disable : 4996)
#pragma comment(linker, "/STACK:268435456")
#endif

// At least c++11
#if !PE_HAS_CPP11
#error "c++11 or above only"
#endif

// Configurations
// Please make sure #include <Eigen/Dense> work
// http://eigen.tuxfamily.org/index.php?title=Main_Page
#define ENABLE_EIGEN 1
#define ENABLE_ASSERT 1
#define ENABLE_OPENMP ((1 && defined(_OPENMP)))

// https://gmplib.org/
// Commands:
//
// ./configure --prefix=/c/gmp-6.1.2 --enable-cxx
// make
// make check
// make install
//
// Note for windows 64-bit target:
// For windows 64-bit target, use http://www.msys2.org/ and mingw64 to build.
// Add --host=x86_64-w64-mingw32 to configure command.
// Don't forget to rename mingw32-make.exe to make.exe in mingw64's binary folder.
//
// Install:
// Add the parent folder path of gmp.h and gmpxx.h's to include path, e.g. env var
// CPLUS_INCLUDE_PATH
// Add -lgmpxx -lgmp -LD:/<paret folder path of libgmp.a and libgmpxx.a> to compile command.
//
// Usage:
// See https://gmplib.org/manual/C_002b_002b-Interface-General.html
#define ENABLE_GMP 1

// http://www.flintlib.org
// See https://blog.csdn.net/baihacker/article/details/80691977 for how to
// build and install flint.
// The compiled flint(gmp, mpfr, mpir are also included)(win64) can be found here
// https://pan.baidu.com/s/1OI-vk3JJevYphIsFoNg_vA (pwd:x7cg)
#define ENABLE_FLINT 1

// https://www.mpfr.org/
#define ENABLE_MPFR 1

// http://mpir.org/
#define ENABLE_MPIR 1

#if ENABLE_FLINT

#if !ENABLE_GMP
#error gmp should be enabled if flint is enabled
#endif

#if !ENABLE_MPFR
#error mpfr should be enabled if flint is enabled
#endif

#if !ENABLE_MPIR
#error mpir should be enabled if flint is enabled
#endif

#endif

// flint must come first
#if ENABLE_FLINT
#include <flint.h>
#include <fmpz.h>
#include <fq_nmod_poly.h>
#endif

#if ENABLE_GMP
#include <gmp.h>
#include <gmpxx.h>
#endif

#if ENABLE_MPFR
#include <mpfr.h>
#include <mpf2mpfr.h>
#endif

#if ENABLE_MPIR
#include <mpir.h>
#endif

#if ENABLE_OPENMP
#include <omp.h>
#endif

#if ENABLE_EIGEN
#include <Eigen/Dense>
#endif

#include "pe_base"
#include "pe_util"
#include "pe_integer_util"
#include "pe_tree"
#include "pe_mod"
#include "pe_ntt"
#include "pe_fft"
#include "pe_nt"
#include "pe_mat"
#include "pe_poly_algo"
#include "pe_poly"

#if !defined(USE_BIG_NUMBER)
// #include "pe_bi"
#include "pe_bi32"
#else
#include "pe_bn"
#endif

#include "pe_geometry"
#include "pe_memory"
#include "pe_parallel"
#include "pe_parallel_algo"
#include "pe_misc"

#endif
