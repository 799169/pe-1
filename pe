#ifndef __PE_H__
#define __PE_H__

/**
 * Instruction for how to use pe in MSVC.
 * 1. Set include path.
 * 2. Set lib path.
 * 3. If dependent libraries are built by MinGW, add the following lib to linker input (remove unused libraries):
 * libbf.a;libgmpxx.a;libflint.a;libgmp.a;libmpfr.a;libmpir.a;libgcc_s.a;libgcc.a;legacy_stdio_definitions.lib;
 * 4. Runtime: /MT or /MTd
 * 5. Final compile options (release):
 * /GS /GL /W3 /Gy /Zc:wchar_t /Zi /Gm- /O2 /Fd"x64\Release\vc141.pdb" /Zc:inline /fp:precise /D "NDEBUG" /D "_CONSOLE" /D "_MBCS" /errorReport:prompt /WX- /Zc:forScope /Gd /Oi /MT /openmp /FC /Fa"x64\Release\" /EHsc /nologo /Fo"x64\Release\" /Fp"x64\Release\pe.pch" /diagnostics:classic 
 * 6. Final compile options (debug):
 * /GS /W3 /Zc:wchar_t /ZI /Gm- /Od /Fd"x64\Debug\vc141.pdb" /Zc:inline /fp:precise /D "_DEBUG" /D "_CONSOLE" /D "_MBCS" /errorReport:prompt /WX- /Zc:forScope /RTC1 /Gd /MTd /openmp /FC /Fa"x64\Debug\" /EHsc /nologo /Fo"x64\Debug\" /Fp"x64\Debug\pe.pch" /diagnostics:classic
 *
 * Tested under Microsoft Visual Studio Community 2017 15.7.2
 */

/**
 * Instructions for how to use pe in MinGW or gcc
 * 1. Set include path.
 * 2. Set lib path.
 * 3. Compile options:
 * -o a.exe --std=c++11 -O3 -march=native -mtune=native -fopenmp -Wl,--stack,268435456 -lbf -lgmpxx -lflint -lgmp -lmpfr -lmpir
 *
 * Tested under gcc version 8.1.0 (x86_64-win32-seh-rev0, Built by MinGW-W64 project)
 */


// Compiler and cpp version check
#if defined(__GNUC__)
  #define COMPILER_GNU

  #if __cplusplus < 201103L
  #define PE_HAS_CPP11 0
  #else
  #define PE_HAS_CPP11 1
  #endif

  #if __cplusplus < 201703L
  #define PE_HAS_CPP17 0
  #else
  #define PE_HAS_CPP17 1
  #endif
#elif defined(_MSC_VER)
  #define COMPILER_MSVC

  // VC2015 or above to support c++11
  // https://en.wikipedia.org/wiki/Microsoft_Visual_C%2B%2B#Internal_version_numbering
  // https://en.cppreference.com/w/cpp/compiler_support#cpp11
  #if _MSC_VER < 1900
  #define PE_HAS_CPP11 0
  #else
  #define PE_HAS_CPP11 1
  #endif

  #define PE_HAS_CPP17 0
#else
  #define PE_HAS_CPP11 0
  #define PE_HAS_CPP17 0
#endif

// Platform
#if _WIN32 || _WIN64
#define PLATFORM_WIN 1
#else
#define PLATFORM_WIN 0
#endif

// Arch
#if defined(COMPILER_GNU)

#if defined(__x86_64)
  #define PE_X86_64 1
  #define PE_X86_32 0
#elif defined(_X86_)
  #define PE_X86_64 0
  #define PE_X86_32 1
#else
  #error "unknown arch"
#endif

#elif defined(COMPILER_MSVC)

#if defined(_M_X64)
  #define PE_X86_64 1
  #define PE_X86_32 0
#else
  #define PE_X86_64 0
  #define PE_X86_32 1
#endif

#else
  #define PE_X86_64 0
  #define PE_X86_32 1
#endif

// int128

// Let int128 recognized in vscode.
#if defined(VSCODE_EDITOR)
#define __SIZEOF_INT128__ 16
#endif

#if defined(__SIZEOF_INT128__)
#define PE_HAS_INT128 1
typedef __int128 int128;
typedef unsigned __int128 uint128;
#else
#define PE_HAS_INT128 0
#endif

// Link option
#if defined(COMPILER_MSVC)
#pragma warning(disable : 4996)
#pragma comment(linker, "/STACK:268435456")
#endif

// At least c++11
#if !PE_HAS_CPP11
#error "c++11 or above only"
#endif


/**
1. Build gmp
  Commands:
  
  ./configure --prefix=/c/gmp-6.1.2 --enable-cxx
  make
  make check
  make install
  
  Build note for windows 64-bit target:
  For windows 64-bit target, use http://www.msys2.org/ and mingw64 to build.
  Add --host=x86_64-w64-mingw32 to configure command.
  Don't forget to rename mingw32-make.exe to make.exe in mingw64's binary folder.
  
2. Install gmp (MinGW)
  Make sure the parent folder of gmp.h and gmpxx.h are in include path
  e.g. Add that folder to environment variable CPLUS_INCLUDE_PATH
  
  Make sure the parent folder of libgmpxx.a and libgmp.a are in lib path
  e.g. Add that folder to environment variable LIBRARY_PATH
  
  Add -lgmpxx -lgmp in compile command. Note: the order matters
  
3. Install gmp (VC++)
  Similar to the previous section. You need to config the include path and
  lib path and add dependent libs in solution property dialog.

4. Use openmp
  Add -fopenmp in gcc compile command of config it in vc solution property dialog.
  
5. Use Eigen
  Please make sure #include <Eigen/Dense> work
  
6. Build flint, mpfr, mpir (gmp also included)
  See https://blog.csdn.net/baihacker/article/details/80691977 (chinese) for how to build and install flint.

7. Build libbf
  Use the following makefile will generate libbf.avx2.a and libbf.generic.a please choose one and rename it to libbf.a
  Note: be aware of the syntax of makefile. tab before commands.

CC=$(CROSS_PREFIX)gcc
CFLAGS=-Wall
CFLAGS+=-O3
LDFLAGS=

PROGS+=libbf.generic.a libbf.avx2.a

all: $(PROGS)

libbf.generic.a : libbf.o  cutils.o
	gcc-ar crv libbf.generic.a cutils.o libbf.o

libbf.avx2.a : libbf.avx2.o  cutils.avx2.o
	gcc-ar crv libbf.avx2.a cutils.avx2.o libbf.avx2.o

%.o: %.c
	$(CC) $(CFLAGS) -c -o $@ $<

%.avx2.o: %.c
	$(CC) $(CFLAGS) -mavx -mavx2 -mfma -mbmi2 -c -o $@ $<

clean:
	rm -f $(PROGS) *.o *.d *.a *.exe *~

-include $(wildcard *.d)

8. Compiled binary (flint (gmp, mpfr, mpir are in flint), libbf) on windows (x64)
  https://pan.baidu.com/s/1OI-vk3JJevYphIsFoNg_vA (pwd:x7cg)
  
9. The order of libs are important for MinGW:
  Please use: -lbf -lgmpxx -lflint -lgmp -lmpfr -lmpir
 */

// Configurations
#define ENABLE_ASSERT 1

#define ENABLE_OPENMP ((1 && defined(_OPENMP)))

// http://eigen.tuxfamily.org/index.php?title=Main_Page
// Doc: http://eigen.tuxfamily.org/dox/
#define ENABLE_EIGEN 1

// https://gmplib.org/
// Doc: https://gmplib.org/manual/C_002b_002b-Interface-General.html
#define ENABLE_GMP 1

// http://www.flintlib.org
// Doc: http://www.flintlib.org/flint-2.5.pdf
#define ENABLE_FLINT 1

// https://www.mpfr.org/
#define ENABLE_MPFR 1

// http://mpir.org/
#define ENABLE_MPIR 1

// https://bellard.org/libbf/
#define ENABLE_LIBBF 1

// Check dependencies
#if ENABLE_FLINT

#if !ENABLE_GMP
#error gmp should be enabled if flint is enabled
#endif

#if !ENABLE_MPFR
#error mpfr should be enabled if flint is enabled
#endif

#if !ENABLE_MPIR
#error mpir should be enabled if flint is enabled
#endif

#endif


// Include third party libraries and apply fixes to them.
#if ENABLE_LIBBF

#include <cstdint>
#include <cstdlib>

extern "C" {

#include "libbf.h"

void *bf_realloc(void *ptr, size_t size) {
  return realloc(ptr, size);
}

}

#endif


// flint must come before the following libs.
#if ENABLE_FLINT

#if defined(COMPILER_MSVC)
#include <malloc.h>
#define alloca _alloca
#endif

#include <flint.h>
#include <fmpz.h>
#include <fq_nmod_poly.h>
#include <nmod_poly.h>
#endif

#if ENABLE_GMP
#include <gmp.h>
#include <gmpxx.h>

#if defined(COMPILER_MSVC)
#include <iostream>
static inline std::ostream& operator << (std::ostream& o, __mpz_struct const * x) {
	size_t sz = mpz_sizeinbase(x, 10) + 1;
	char * buff = new char[sz+1];
	if (buff != NULL) {
		gmp_sprintf(buff, "%Zd", x);
	}
	o << buff;
	delete[] buff;
	return o;
}
#endif
#endif

#if ENABLE_MPFR
#include <mpfr.h>
#include <mpf2mpfr.h>
#endif

#if ENABLE_MPIR
#include <mpir.h>
#endif

#if ENABLE_OPENMP
#include <omp.h>
#endif

#if ENABLE_EIGEN
#include <Eigen/Dense>
#endif


// Include pe
#include "pe_base"
#include "pe_util"
#include "pe_integer_util"
#include "pe_bit"
#include "pe_tree"
#include "pe_mod"
#include "pe_ntt"
#include "pe_fft"
#include "pe_nt"
#include "pe_mat"
#include "pe_poly_algo"
#include "pe_poly"

#if !defined(USE_BIG_NUMBER)
// #include "pe_bi"
#include "pe_bi32"
#else
#include "pe_bn"
#endif

#include "pe_geometry"
#include "pe_memory"
#include "pe_parallel"
#include "pe_parallel_algo"
#include "pe_misc"

#endif
