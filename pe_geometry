#ifndef __PE_GEOMETRY_H__
#define __PE_GEOMETRY_H__

#include "pe_base"

template<typename T>
struct Point3D;

template<typename T>
struct Point2D
{
  Point2D(T x = 0, T y = 0) : x(x), y(y){}
  T x, y;

  int operator == (const Point2D& o) const
  {
    return x==o.x&&y==o.y;
  }

  int operator != (const Point2D& o) const
  {
    return !(*this == o);
  }

  int operator < (const Point2D& o) const
  {
    return x<o.x||x==o.x&&y<o.y;
  }

  int operator <= (const Point2D& o) const
  {
    return !(*this > o);
  }

  int operator > (const Point2D& o) const
  {
    return x>o.x||x==o.x&&y>o.y;
  }

  int operator >= (const Point2D& o) const
  {
    return !(*this < o);
  }
  
  operator Point3D<T> () const
  {
    return Point3D<T>{x, y, 0};
  }

  T norm2() const
  {
    return dot(*this, *this);
  }

  double norm() const
  {
    return sqrt(norm2());
  }

  const Point2D& print() const
  {
    cout << x << ", " << y;
    return *this;
  }

  const Point2D& println() const
  {
    cout << x << ", " << y << endl;
    return *this;
  }

  friend Point2D operator - (const Point2D& a, const Point2D& b)
  {
    return Point2D{a.x-b.x, a.y-b.y};
  }

  friend Point2D operator - (const Point2D& a, const T shift)
  {
    return Point2D{a.x-shift, a.y-shift};
  }

  friend Point2D operator + (const Point2D& a, const Point2D& b)
  {
    return Point2D{a.x+b.x, a.y+b.y};
  }

  friend Point2D operator + (const Point2D& a, const T shift)
  {
    return Point2D{a.x+shift, a.y+shift};
  }

  friend Point2D operator * (const Point2D& a, double u)
  {
    return Point2D{a.x*u, a.y*u};
  }

  friend T dot(const Point2D& a, const Point2D& b)
  {
    return a.x*b.x + a.y*b.y;
  }

  friend T dot(const Point2D& a, const Point2D& b, const Point2D& c)
  {
    return dot(b-a, c-a);
  }

  friend T cross(const Point2D& a, const Point2D& b)
  {
    return a.x * b.y - a.y * b.x;
  }

  friend T cross(const Point2D& a, const Point2D& b, const Point2D& c)
  {
    return cross(b-a, c-a);
  }

  friend double norm(const Point2D& a)
  {
    return sqrt(dot(a, a));
  }

  friend T norm2(const Point2D& a)
  {
    return dot(a, a);
  }

  friend ostream& operator << (ostream& o, const Point2D& p)
  {
    return o << p.x << ", " << p.y;
  }
};

template<typename T>
struct Point3D
{
  Point3D(T x = 0, T y = 0, T z = 0) : x(x), y(y), z(z){}
  T x, y, z;

  int operator == (const Point3D& o) const
  {
    return x==o.x&&y==o.y&&z==o.z;
  }

  int operator != (const Point3D& o) const
  {
    return !(*this == o);
  }

  int operator < (const Point3D& o) const
  {
    return x<o.x||x==o.x&&y<o.y||x==o.x&&y==o.y&&z<o.z;
  }

  int operator <= (const Point3D& o) const
  {
    return !(*this > o);
  }

  int operator > (const Point3D& o) const
  {
    return x>o.x||x==o.x&&y>o.y||x==o.x&&y==o.y&&z>o.z;
  }

  int operator >= (const Point3D& o) const
  {
    return !(*this < o);
  }

  operator Point2D<T> () const
  {
    return Point2D<T>{x, y};
  }

  T norm2() const
  {
    return dot(*this, *this);
  }

  double norm() const
  {
    return sqrt(norm2());
  }

  const Point3D& print() const
  {
    cout << x << ", " << y << ", " << z;
    return *this;
  }

  const Point3D& println() const
  {
    cout << x << ", " << y << ", " << z << endl;
    return *this;
  }

  friend Point3D operator - (const Point3D& a, const Point3D& b)
  {
    return Point3D{a.x-b.x, a.y-b.y, a.z-b.z};
  }

  friend Point3D operator - (const Point3D& a, const T shift)
  {
    return Point3D{a.x-shift, a.y-shift, a.z-shift};
  }

  friend Point3D operator + (const Point3D& a, const Point3D& b)
  {
    return Point3D{a.x+b.x, a.y+b.y, a.z+b.z};
  }

  friend Point3D operator + (const Point3D& a, const T shift)
  {
    return Point3D{a.x+shift, a.y+shift, a.z+shift};
  }

  friend Point3D operator * (const Point3D& a, double u)
  {
    return Point3D{a.x*u, a.y*u};
  }

  friend T dot(const Point3D& a, const Point3D& b)
  {
    return a.x*b.x + a.y*b.y + a.z*b.z;
  }

  friend T dot(const Point3D& a, const Point3D& b, const Point3D& c)
  {
    return dot(b-a, c-a);
  }

  friend T cross(const Point3D& a, const Point3D& b, const Point3D& c)
  {
    return a.x * cross({b.y, b.z}, {c.y, c.z}) -
        b.x * cross({a.y, a.z}, {c.y, c.z}) +
        c.x * cross({a.y, a.z}, {b.y, b.z});
  }

  friend Point3D cross(const Point3D& a, const Point3D& b, const Point3D& c, const Point3D& d)
  {
    return cross(b-a, c-a, d-a);
  }

  friend double norm(const Point3D& a)
  {
    return sqrt(dot(a, a));
  }

  friend T norm2(const Point3D& a)
  {
    return dot(a, a);
  }

  friend ostream& operator << (ostream& o, const Point3D& p)
  {
    return o << p.x << ", " << p.y << ", " << p.z;
  }
};

#endif
