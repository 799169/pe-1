#ifndef __PE_PARALLEL_ALGO_H__
#define __PE_PARALLEL_ALGO_H__

template <int TN, typename T>
void parallel_sort(T* s, T* e) {
  static_assert(TN > 0, "TN > 0");

  const int64 n = e - s;
  const int64 each = n / TN;

  int64 pos[TN + 1];
  for (int i = 0; i < TN; ++i) pos[i] = i * each;
  pos[TN] = n;

  #if ENABLE_OPENMP
  #pragma omp parallel for schedule(dynamic, 1) num_threads(TN)
  #endif
  for (int i = 0; i < TN; ++i) {
    sort(s + pos[i], s + pos[i + 1]);
  }

  for (int remain = TN; remain > 1;) {
    #if ENABLE_OPENMP
    #pragma omp parallel for schedule(dynamic, 1) num_threads(TN)
    #endif
    for (int i = 0; i <= remain - 2; i += 2) {
      inplace_merge(s + pos[i], s + pos[i + 1], s + pos[i + 2]);
    }

    int top = 0;
    for (int i = 0; i <= remain; ++i)
      if (!(i % 2 == 1 && i + 1 <= remain)) {
        pos[top++] = pos[i];
      }
    remain = top - 1;
  }
}

#endif
