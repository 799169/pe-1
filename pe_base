#ifndef __PE_BASE_H__
#define __PE_BASE_H__

// compiler checking
#if defined(__GNUC__)
  #define COMPILER_GNU
  #if __cplusplus < 201103L
    #define PE_HAS_CPP11 0
  #else
    #define PE_HAS_CPP11 1
  #endif
#elif defined(_MSC_VER)
  #define COMPILER_MSVC
  #if _MSC_VER < 1800
    #define PE_HAS_CPP11 0
  #else
    #define PE_HAS_CPP11 1
  #endif
#else
  #define PE_HAS_CPP11 0
#endif

#if defined(COMPILER_GNU)
  #define PE_HAS_INT128 1
  typedef __int128 int128;
  typedef unsigned __int128 uint128;
#else
  #define PE_HAS_INT128 0
#endif

#if !PE_HAS_CPP11
  #error "c++11 or above only"
#endif

#include <cstdint>

#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <cstddef>
#include <complex>
#include <ctime>
#include <climits>

#include <algorithm>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <iomanip>
#include <vector>
#include <deque>
#include <list>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <bitset>
#include <string>
#include <numeric>
#include <functional>
#include <iterator>
#include <typeinfo>
#include <utility>
#include <memory>
#include <cassert>

#include <random>
#include <tuple>
#include <ratio>
#include <chrono>
#include <array>
#include <forward_list>
#include <unordered_map>
#include <unordered_set>

using namespace std;

typedef std::int64_t int64;

typedef vector<int> vi;
typedef vi::iterator ivi;
typedef map<int, int> mii;
typedef mii::iterator imii;
typedef set<int> si;
typedef si::iterator isi;

#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define sz(x) ((int)(x).size())
#define rep(i, s, e) for (int i = (s); i < (e); ++i)

#define foreach(itr, c) for(auto& itr : c)

template<typename T> static inline void cmax(T& a, const T& b){if(b>a)a=b;}
template<typename T> static inline void cmin(T& a, const T& b){if(b<a)a=b;}

#define SL static inline

#define dbg(x) cerr << (#x) << " = " << (x) << endl

#ifdef DISABLE_ASSERT
  #define PE_ASSERT(x)
#else
  #define PE_ASSERT(x) (void)assert((x))
#endif

#if PE_HAS_INT128
void print_int128(int128 x)
{
  int dig[64];
  int top = 0;
  uint128 y = (uint128&)x;
  uint128 z = (~y) + 1;
  if (x < 0 || x != 0 && y == z) putchar('-'), y = z;
  while (y) dig[top++] = y % 10, y /= 10;
  if (top == 0) printf("%d", 0);
  while (top > 0) printf("%d", dig[--top]);
}

ostream& operator << (ostream& o, int128 x)
{
  char buff[64];
  int top = 0;
  if (x != 0)
  {
    uint128 y = (uint128&)x;
    uint128 z = (~y) + 1;
    if (x < 0 || y == z) buff[top++] = '-', y = z;
    int last = top;
    while (y > 0) buff[top++] = y % 10 + '0', y /= 10;
    reverse(buff+last, buff+top);
  }
  else
  {
    buff[top++] = '0';
  }
  buff[top] = 0;
  return o << buff;
}
#endif

#endif