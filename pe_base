#ifndef __PE_BASE_H__
#define __PE_BASE_H__

#include <cstdint>

#include <cassert>
#include <ccomplex>
#include <cctype>
#include <cerrno>
#include <cfenv>
#include <cfloat>
#include <cinttypes>
#include <ciso646>
#include <climits>
#include <clocale>
#include <cmath>
#include <csetjmp>
#include <csignal>
#include <cstdalign>
#include <cstdarg>
#include <cstdbool>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctgmath>
#include <ctime>
// #include <cuchar>
#include <cwchar>
#include <cwctype>

#include <algorithm>
#include <bitset>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <list>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <typeinfo>
#include <utility>
#include <vector>

#include <array>
#include <chrono>
#include <forward_list>
#include <random>
#include <ratio>
#include <tuple>
#include <unordered_map>
#include <unordered_set>

#include <atomic>
// #include <codecvt>
#include <complex>
#include <condition_variable>
#include <exception>
#include <fstream>
#include <future>
#include <initializer_list>
#include <ios>
#include <iosfwd>
#include <istream>
#include <limits>
#include <locale>
#include <mutex>
#include <new>
#include <ostream>
#include <regex>
#include <stdexcept>
#include <streambuf>
#include <system_error>
#include <thread>
#include <type_traits>

using namespace std;

typedef std::int64_t int64;
typedef std::uint64_t uint64;
typedef std::int32_t int32;
typedef std::uint32_t uint32;

typedef vector<int> vi;
typedef vi::iterator ivi;
typedef map<int, int> mii;
typedef mii::iterator imii;
typedef set<int> si;
typedef si::iterator isi;

#define all_impl(x) (x).begin(), (x).end()
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define sz(x) ((int)(x).size())
#define rep(i, s, e) for (int i = (s); i < (e); ++i)

#define foreach(itr, c) for (auto& itr : c)

template <typename T>
static inline void cmax(T& a, const T& b) {
  if (b > a) a = b;
}
template <typename T>
static inline void cmin(T& a, const T& b) {
  if (b < a) a = b;
}
template <typename T>
static inline T sq(T x) {
  return x * x;
}

#define SL static inline

#define dbg(x) cerr << (#x) << " = " << (x) << endl

#if ENABLE_ASSERT
#define PE_ASSERT(x) (void)assert((x))
#else
#define PE_ASSERT(x)
#endif

// A simple concept implementation, e.g.
/**
  template<typename T, typename U>
  REQUIRES(is_integral<T>::value && is_unsigned<U>::value)
  RETURN(void)  foo(T x, U y)  {}
*/
template <int ok>
struct CheckConditionThen {};

template <>
struct CheckConditionThen<true> {
  template <typename U>
  struct IdenticalType {
    typedef U type;
  };
  template <typename U>
  struct IdenticalTypeT {
    typedef typename U::type type;
  };
};

#define REQUIRES(...) typename CheckConditionThen<__VA_ARGS__>::
#define RETURN(...) template IdenticalType<__VA_ARGS__>::type

// If the return type depends on the condition and the return type
// is invalid if the condition is false, please use this one.
#define RETURN_T(...) template IdenticalTypeT<__VA_ARGS__>::type

namespace std {
// TODO(baihacker): add this template only if it is older than c++20
template <typename T>
struct remove_cvref {
  typedef typename remove_cv<T>::type T1;
  typedef typename remove_reference<T1>::type type;
};
}  // namespace std

template<typename T>
ostream& operator << (ostream& o, const vector<T>& v) {
  const int size = (int)v.size();
  o << "{";
  for (int i = 0; i < size; ++i) {
    o << v[i];
    if (i + 1 < size) {
      o << ", ";
    }
  }
  return o << "}";
}
#endif
