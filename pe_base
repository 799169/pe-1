#ifndef __PE_BASE_H__
#define __PE_BASE_H__

#if defined(VSCODE_EDITOR)
#define __SIZEOF_INT128__ 16
#endif

// Compiler and cpp version check
#if defined(__GNUC__)
  #define COMPILER_GNU

  #if __cplusplus < 201103L
  #define PE_HAS_CPP11 0
  #else
  #define PE_HAS_CPP11 1
  #endif

  #if __cplusplus < 201703L
  #define PE_HAS_CPP17 0
  #else
  #define PE_HAS_CPP17 1
  #endif
#elif defined(_MSC_VER)
  #define COMPILER_MSVC

  #if _MSC_VER < 1800
  #define PE_HAS_CPP11 0
  #else
  #define PE_HAS_CPP11 1
  #endif

  #define PE_HAS_CPP17 0
#else
  #define PE_HAS_CPP11 0
  #define PE_HAS_CPP17 0
#endif

#if _WIN32 || _WIN64
#define PLATFORM_WIN 1
#else
#define PLATFORM_WIN 0
#endif

#if defined(__SIZEOF_INT128__)
#define PE_HAS_INT128 1
typedef __int128 int128;
typedef unsigned __int128 uint128;
#else
#define PE_HAS_INT128 0
#endif

#if defined(COMPILER_MSVC)
#pragma warning(disable : 4996)
#pragma comment(linker, "/STACK:268435456")
#endif

#if !PE_HAS_CPP11
#error "c++11 or above only"
#endif

#include <cstdint>

#include <cassert>
#include <ccomplex>
#include <cctype>
#include <cerrno>
#include <cfenv>
#include <cfloat>
#include <cinttypes>
#include <ciso646>
#include <climits>
#include <clocale>
#include <cmath>
#include <csetjmp>
#include <csignal>
#include <cstdalign>
#include <cstdarg>
#include <cstdbool>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctgmath>
#include <ctime>
// #include <cuchar>
#include <cwchar>
#include <cwctype>

#include <algorithm>
#include <bitset>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <list>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <typeinfo>
#include <utility>
#include <vector>

#include <array>
#include <chrono>
#include <forward_list>
#include <random>
#include <ratio>
#include <tuple>
#include <unordered_map>
#include <unordered_set>

#include <atomic>
// #include <codecvt>
#include <complex>
#include <condition_variable>
#include <exception>
#include <fstream>
#include <future>
#include <initializer_list>
#include <ios>
#include <iosfwd>
#include <istream>
#include <limits>
#include <locale>
#include <mutex>
#include <new>
#include <ostream>
#include <regex>
#include <stdexcept>
#include <streambuf>
#include <system_error>
#include <thread>
#include <type_traits>

using namespace std;

typedef std::int64_t int64;
typedef std::uint64_t uint64;

typedef vector<int> vi;
typedef vi::iterator ivi;
typedef map<int, int> mii;
typedef mii::iterator imii;
typedef set<int> si;
typedef si::iterator isi;

#define all_impl(x) (x).begin(), (x).end()
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define sz(x) ((int)(x).size())
#define rep(i, s, e) for (int i = (s); i < (e); ++i)

#define foreach(itr, c) for (auto& itr : c)

template <typename T>
static inline void cmax(T& a, const T& b) {
  if (b > a) a = b;
}
template <typename T>
static inline void cmin(T& a, const T& b) {
  if (b < a) a = b;
}
template <typename T>
static inline T sq(T x) {
  return x * x;
}

#define SL static inline

#define dbg(x) cerr << (#x) << " = " << (x) << endl

#if ENABLE_ASSERT
#define PE_ASSERT(x) (void)assert((x))
#else
#define PE_ASSERT(x)
#endif

// A simple concept implementation, e.g.
/**
  template<typename T, typename U>
  REQUIRES(is_integral<T>::value && is_unsigned<U>::value)
  RETURN(void)  foo(T x, U y)  {}
*/
template<int ok>
struct CheckConditionThen{};

template<>
struct CheckConditionThen<true>{
  template<typename U>
  struct IdenticalType {
    typedef U type;
  };
};

#define REQUIRES(...) typename CheckConditionThen<__VA_ARGS__>::
#define RETURN(...) template IdenticalType<__VA_ARGS__>::type

namespace std {
  // TODO(baihacker): add this template only if it is older than c++20
  template<typename T>
  struct remove_cvref {
    typedef typename remove_cv<T>::type T1;
    typedef typename remove_reference<T1>::type type;
  };
}

#endif
