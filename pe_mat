#ifndef __PE_MAT__
#define __PE_MAT__

#include "pe_base"
#include "pe_mod"

template<typename T, int D>
SL void mat_mul_mat(T (*a)[D], T (*b)[D], T (*c)[D], int N = D)
{
  for (int i = 0; i < N; ++i) for (int j = 0; j < N; ++j)
  {
    T s = 0;
    for (int k = 0; k < N; ++k)
    s += a[i][k] * b[k][j];
    c[i][j] = s;
  }
}

template<typename T>
SL void mat_mul_mat(T* aa, T* bb, T* cc, int N)
{
  for (int i = 0; i < N; ++i) for (int j = 0; j < N; ++j)
  {
    T* a = aa + i * N;
    T* c = cc + i * N;
    T s = 0;
    for (int k = 0; k < N; ++k)
    s += a[k] * (bb + k * N)[j];
    c[j] = s;
  }
}

template<typename T, int D>
SL void mat_mul_vec(T (*a)[D], T (*b)[D], T (*c)[D], int N = D)
{
  for (int i = 0; i < N; ++i)
  {
    T s = 0;
    for (int k = 0; k < N; ++k)
    s += a[i][k] * b[k][0];
    c[i][0] = s;
  }
}

template<typename T, int D>
SL void mat_mul_vec(T (*a)[D], T* b, T* c, int N = D)
{
  for (int i = 0; i < N; ++i)
  {
    T s = 0;
    for (int k = 0; k < N; ++k)
    s += a[i][k] * b[k];
    c[i] = s;
  }
}

template<typename T>
SL void mat_mul_vec(T* aa, T* b, T* c, int N)
{
  for (int i = 0; i < N; ++i)
  {
    T* a = aa + i * N;
    T s = 0;
    for (int k = 0; k < N; ++k)
    s += a[k] * b[k];
    c[i] = s;
  }
}

template<typename T, int D>
SL void mat_mul_mat_mod(T (*a)[D], T (*b)[D], T (*c)[D], int64 mod, int N = D)
{
  for (int i = 0; i < N; ++i) for (int j = 0; j < N; ++j)
  {
    int64 s = 0;
    for (int k = 0; k < N; ++k)
    {
      s += mul_mod(a[i][k], b[k][j], mod);
      if (s >= mod) s -= mod;
    }
    c[i][j] = s % mod;
  }
}

template<typename T>
SL void mat_mul_mat_mod(T* aa, T* bb, T* cc, int64 mod, int N)
{
  for (int i = 0; i < N; ++i) for (int j = 0; j < N; ++j)
  {
    T* a = aa + i * N;
    T* c = cc + i * N;
    int64 s = 0;
    for (int k = 0; k < N; ++k)
    {
      s += mul_mod(a[k], (bb + k * N)[j], mod);
      if (s >= mod) s -= mod;
    }
    c[j] = s % mod;
  }
}

template<typename T, int D>
SL void mat_mul_vec_mod(T (*a)[D], T (*b)[D], T (*c)[D], int64 mod, int N = D)
{
  for (int i = 0; i < N; ++i)
  {
    int64 s = 0;
    for (int k = 0; k < N; ++k)
    {
      s += mul_mod(a[i][k], b[k][0], mod);
      if (s >= mod) s -= mod;
    }
    c[i][0] = s;
  }
}

template<typename T, int D>
SL void mat_mul_vec_mod(T (*a)[D], T* b, T* c, int64 mod, int N = D)
{
  for (int i = 0; i < N; ++i)
  {
    int64 s = 0;
    for (int k = 0; k < N; ++k)
    {
      s += mul_mod(a[i][k], b[k], mod);
      if (s >= mod) s -= mod;
    }
    c[i] = s;
  }
}

template<typename T>
SL void mat_mul_vec_mod(T* aa, T* b, T* c, int64 mod, int N)
{
  for (int i = 0; i < N; ++i)
  {
    T* a = aa + i * N;
    int64 s = 0;
    for (int k = 0; k < N; ++k)
    {
      s += mul_mod(a[k], b[k], mod);
      if (s >= mod) s -= mod;
    }
    c[i] = s;
  }
}

#undef all
#include <Eigen/Dense>

template<typename _Scalar, int _Rows, int _Cols>
SL Eigen::Matrix<_Scalar, _Rows, _Cols>
power_mod(const Eigen::Matrix<_Scalar, _Rows, _Cols>& x, int64 n, int64 mod)
{
  return power_mod(x, n, mod, mint_indicator<is_mint<_Scalar>::result>());
}

template<typename _Scalar, int _Rows, int _Cols>
SL Eigen::Matrix<_Scalar, _Rows, _Cols>
power_mod(const Eigen::Matrix<_Scalar, _Rows, _Cols>& x, int64 n, int64 mod, mint_indicator<0>)
{
  typedef Eigen::Matrix<_Scalar, _Rows, _Cols> MatrixT;
  auto fixmod = [=](MatrixT& m)
  {
    const auto r = m.rows();
    const auto c = m.cols();
    for (int i = 0; i < r; ++i) for (int j = 0; j < c; ++j)
    {
      m(i, j) = regulate_mod(m(i, j), mod);
    }
  };
  const int K = x.rows();

  MatrixT e = MatrixT::Identity(K, K);

  MatrixT y = x;
  fixmod(y);
  for (; n; n >>= 1)
  {
    // cout << "n = " << n << endl;
    if (n & 1)
    {
      e *= y;
      fixmod(e);
    }
    if (n > 1)
    {
      y *= y;
      fixmod(y);
    }
  }
  return e;
}

template<typename _Scalar, int _Rows, int _Cols>
SL Eigen::Matrix<_Scalar, _Rows, _Cols>
power_mod(const Eigen::Matrix<_Scalar, _Rows, _Cols>& x, int64 n, int64 mod, mint_indicator<1>)
{
  typedef Eigen::Matrix<_Scalar, _Rows, _Cols> MatrixT;
  auto fixmod = [=](MatrixT& m)
  {
    const auto r = m.rows();
    const auto c = m.cols();
    for (int i = 0; i < r; ++i) for (int j = 0; j < c; ++j)
    {
      m(i, j).fix_value();
    }
  };

  const int K = x.rows();

  MatrixT e = MatrixT::Identity(K, K);
  MatrixT y = x;

  for (; n; n >>= 1)
  {
    // cout << "n = " << n << endl;
    if (n & 1)
    {
      e *= y;
      fixmod(e);
    }
    if (n > 1)
    {
      y *= y;
      fixmod(y);
    }
  }
  return e;
}

template<typename _Scalar, int _Rows, int _Cols, typename _ScalarV>
SL vector<_ScalarV>
power_mod(const Eigen::Matrix<_Scalar, _Rows, _Cols>& x, int64 n, const vector<_ScalarV>& v, int64 mod)
{
  return power_mod(x, n, v, mod, mint_indicator<is_mint<_Scalar>::result>());
}

template<typename _Scalar, int _Rows, int _Cols, typename _ScalarV>
SL vector<_ScalarV>
power_mod(const Eigen::Matrix<_Scalar, _Rows, _Cols>& x, int64 n, const vector<_ScalarV>& v, int64 mod, mint_indicator<0>)
{
  static_assert(std::is_same<_Scalar, _ScalarV>::value,
      "Matrix's element type must be the same as vector's");
  typedef Eigen::Matrix<_Scalar, _Rows, _Cols> MatrixT;
  auto fixmod = [=](MatrixT& m)
  {
    const auto r = m.rows();
    const auto c = m.cols();
    for (int i = 0; i < r; ++i) for (int j = 0; j < c; ++j)
    {
      m(i, j) = regulate_mod(m(i, j), mod);
    }
  };
  const int K = x.rows();

  vector<_ScalarV> result(v);
  for (auto& i: result) i = regulate_mod(i, mod);

  MatrixT y = x;
  fixmod(y);
  for (; n; n >>= 1)
  {
    // cout << "n = " << n << endl;
    if (n & 1)
    {
      vector<_ScalarV> temp(K, 0);
      for (int i = 0; i < K; ++i)
      {
        _ScalarV s = 0;
        for (int j = 0; j < K; ++j)
        {
          s += y(i, j) * result[j];
        }
        temp[i] = s % mod;
      }
      result = std::move(temp);
    }
    if (n > 1)
    {
      y *= y;
      fixmod(y);
    }
  }
  return result;
}

template<typename _Scalar, int _Rows, int _Cols, typename _ScalarV>
SL vector<_ScalarV>
power_mod(const Eigen::Matrix<_Scalar, _Rows, _Cols>& x, int64 n, const vector<_ScalarV>& v, int64 mod, mint_indicator<1>)
{
  static_assert(std::is_same<_Scalar, _ScalarV>::value,
      "Matrix's element type must be the same as vector's");
  typedef Eigen::Matrix<_Scalar, _Rows, _Cols> MatrixT;
  auto fixmod = [=](MatrixT& m)
  {
    const auto r = m.rows();
    const auto c = m.cols();
    for (int i = 0; i < r; ++i) for (int j = 0; j < c; ++j)
    {
      m(i, j).fix_value();
    }
  };

  const int K = x.rows();

  vector<_ScalarV> result(v);
  MatrixT y = x;

  for (; n; n >>= 1)
  {
    // cout << "n = " << n << endl;
    if (n & 1)
    {
      vector<_ScalarV> temp(K, 0);
      for (int i = 0; i < K; ++i)
      {
        _ScalarV s = 0;
        for (int j = 0; j < K; ++j)
        {
          s += y(i, j) * result[j];
        }
        s.fix_value();
        temp[i] = s;
      }
      result = std::move(temp);
    }
    if (n > 1)
    {
      y *= y;
      fixmod(y);
    }
  }
  return result;
}

typedef Eigen::Matrix<int64, Eigen::Dynamic, Eigen::Dynamic> Mat64;

template<int32_t mod>
using MatM = Eigen::Matrix<mint6464<mod>, Eigen::Dynamic, Eigen::Dynamic>;

#if PE_HAS_INT128
typedef Eigen::Matrix<int128, Eigen::Dynamic, Eigen::Dynamic> Mat128;

template<int32_t mod>
using MatML = Eigen::Matrix<mintl<int128, mod>, Eigen::Dynamic, Eigen::Dynamic>;
#endif

#define all(x) all_impl(x)

#endif