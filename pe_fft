#ifndef __PE_FFT__
#define __PE_FFT__

#include "pe_base"
#include "pe_integer_util"
#include "pe_mod"

namespace fft {
// http://uoj.ac/submission/49836
struct comp {
  double x, y;
  comp(): x(0), y(0) { }
  comp(const double &_x, const double &_y): x(_x), y(_y) { }
};

SL comp operator+(const comp &a, const comp &b)
{ return comp(a.x + b.x, a.y + b.y); }

SL comp operator-(const comp &a, const comp &b)
{ return comp(a.x - b.x, a.y - b.y); }

SL comp operator*(const comp &a, const comp &b)
{ return comp(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x); }

SL comp conj(const comp &a)
{ return comp(a.x, -a.y); }

const double PI = acos(-1);
comp* w[64];
comp* w1[64];
int* bitrev[64];

// Init fft contants.
// By default, it requires that the result size is no more than 1 << 21.
// In another words, support two polynomials of size 1 << 20.
SL void init_fft(int n = 22) {
  for (int j = 0; j < n; ++j) {
    const int N = 1 << j;
    w[j] = new comp[N];
    w1[j] = new comp[N];
    bitrev[j] = new int[N];
    for (int i = 0; i < N; ++i) {
      w[j][i] = comp(cos(2 * PI * i / N), sin(2 * PI * i / N));
      w1[j][i] = comp(cos(2 * PI * i / N), -sin(2 * PI * i / N));
      bitrev[j][i] = i == 0 ? 0 : bitrev[j][i >> 1] >> 1 | ((i & 1) << (j - 1));
    }
  }
}

SL void fft(comp *a, const int n, int f = 0) {
  int id = 0;
  while ((1<<id) != n) ++id;
  for (int i = 0; i < n; ++i)
  if (i < bitrev[id][i]) swap(a[i], a[bitrev[id][i]]);
  for (int i = 2, lyc = n >> 1; i <= n; i <<= 1, lyc >>= 1)
    for (int j = 0; j < n; j += i) {
      comp *l = a + j, *r = a + j + (i >> 1), *p = f ? w1[id] : w[id];
      const int end = i >> 1;
      for (int k = 0; k < end; ++k) {
        comp tmp = *r * *p;
        *r = *l - tmp, *l = *l + tmp;
        ++l, ++r, p += lyc;
      }
    }
  if (f) {
    const double coe = 1. / n;
    for (int i = 0; i < n; ++i) {
      a[i].x *= coe, a[i].y *= coe;
    }
  }
}

SL void fft_mul_mod_internal(uint64* x, uint64* y, uint64* z, const int n, uint64 mod) {
  int64 m = sqrt(mod);
  while (m*m<mod)++m;
  vector<comp> a(n), b(n);
  vector<comp> dfta(n), dftb(n), dftc(n), dftd(n);
  for (int i = 0; i < n; ++i)
    a[i] = comp(x[i] % m, x[i] / m);
  for (int i = 0; i < n; ++i)
    b[i] = comp(y[i] % m, y[i] / m);
  #pragma omp parallel sections if (n > 5000)
  {
    #pragma omp section
    fft(&a[0], n);
    #pragma omp section
    fft(&b[0], n);
  }
  for (int i = 0; i < n; ++i) {
    int j = (n - i) & (n - 1);
    static comp da, db, dc, dd;
    da = (a[i] + conj(a[j])) * comp(0.5, 0);
    db = (a[i] - conj(a[j])) * comp(0, -0.5);
    dc = (b[i] + conj(b[j])) * comp(0.5, 0);
    dd = (b[i] - conj(b[j])) * comp(0, -0.5);
    dfta[j] = da * dc;
    dftb[j] = da * dd;
    dftc[j] = db * dc;
    dftd[j] = db * dd;
  }
  for (int i = 0; i < n; ++i)
    a[i] = dfta[i] + dftb[i] * comp(0, 1);
  for (int i = 0; i < n; ++i)
    b[i] = dftc[i] + dftd[i] * comp(0, 1);
  #pragma omp parallel sections if (n > 5000)
  {
    #pragma omp section
    fft(&a[0], n);
    #pragma omp section
    fft(&b[0], n);
  }
  for (int i = 0; i < n; ++i) {
    const uint64 da = (uint64)(a[i].x / n + 0.5) % mod;
    const uint64 db = (uint64)(a[i].y / n + 0.5) % mod;
    const uint64 dc = (uint64)(b[i].x / n + 0.5) % mod;
    const uint64 dd = (uint64)(b[i].y / n + 0.5) % mod;
    uint64 c = da, d = (db + dc) * m % mod, e = dd * m % mod * m % mod;
    z[i] = (c + d + e) % mod;
  }
}

SL void fft_mul_mod_small_internal(uint64* x, uint64* y, uint64* z, const int n, uint64 mod) {
  vector<comp> a(n), b(n);
  for (int i = 0; i < n; ++i)
    a[i] = comp(x[i], 0);
  for (int i = 0; i < n; ++i)
    b[i] = comp(y[i], 0);

  #pragma omp parallel sections if (n > 5000)
  {
    #pragma omp section
    fft(&a[0], n);
    #pragma omp section
    fft(&b[0], n);
  }

  for (int i = 0; i < n; ++i) {
    a[i] = a[i] * b[i];
  }

  fft(&a[0], n, 1);
  const double coe = 1. / n;
  for (int i = 0; i < n; ++i) {
    z[i] = uint64(a[i].x + 0.01) % mod;
  }
}

// Multiply two polynomials.
// It is expected that mod * n < 1e15 to guarantee the precision.
SL vector<uint64> fft_mul_mod(const vector<uint64>& x, const vector<uint64>& y, uint64 mod) {
  const int n = x.size();
  const int m = y.size();
  int p = 1;
  while (p < n + m - 1) p <<= 1;
  vector<uint64> xx(p), yy(p), zz(p);
  copy(x.begin(), x.end(), xx.begin());
  fill(xx.begin() + n, xx.end(), 0);
  copy(y.begin(), y.end(), yy.begin());
  fill(yy.begin() + m, yy.end(), 0);
  
  fft_mul_mod_internal(&xx[0], &yy[0], &zz[0], p, mod);
  
  zz.resize(n+m-1);
  return std::move(zz);
}

// Multiply two polynomials.
// It is expected that mod * mod * n < 8*1e13 to guarantee the precision.
SL vector<uint64> fft_mul_mod_small(const vector<uint64>& x, const vector<uint64>& y, uint64 mod) {
  const int n = x.size();
  const int m = y.size();
  int p = 1;
  while (p < n + m - 1) p <<= 1;
  vector<uint64> xx(p), yy(p), zz(p);
  copy(x.begin(), x.end(), xx.begin());
  fill(xx.begin() + n, xx.end(), 0);
  copy(y.begin(), y.end(), yy.begin());
  fill(yy.begin() + m, yy.end(), 0);

  fft_mul_mod_small_internal(&xx[0], &yy[0], &zz[0], p, mod);

  zz.resize(n+m-1);
  return std::move(zz);
}
}
#endif