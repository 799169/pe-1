#ifndef __PE_POLY_APP__
#define __PE_POLY_APP__

struct PSPTree {
  int64 mod;

  int64* v;
  int n;

  vector<int64> p;

  PSPTree* L;
  PSPTree* R;

  ~PSPTree() {
    if (L) delete L;
    if (R) delete R;
  }

  static PSPTree* build_minus(int64* values, int n, int64 mod) {
    PSPTree* ptree = new PSPTree();
    auto& tree = *ptree;
    tree.mod = mod;
    tree.v = values;
    tree.n = n;
    tree.L = tree.R = NULL;
    if (n == 1) {
      // -x0 + x
      int64 t = values[0];
      tree.p.emplace_back(t == 0 ? 0 : mod - t);
      tree.p.emplace_back(1 % mod);
      return ptree;
    }
    int c1 = n >> 1, c2 = n - c1;
    tree.L = build_minus(values, c1, mod);
    tree.R = build_minus(values + c1, c2, mod);
    tree.p = poly_mul(tree.L->p, tree.R->p, mod);
    return ptree;
  }

  static PSPTree* build_plus(int64* values, int n, int64 mod) {
    PSPTree* ptree = new PSPTree();
    auto& tree = *ptree;
    tree.mod = mod;
    tree.v = values;
    tree.n = n;
    tree.L = tree.R = NULL;
    if (n == 1) {
      // x0 + x
      int64 t = values[0];
      tree.p.emplace_back(t);
      tree.p.emplace_back(1);
      return ptree;
    }
    int c1 = n >> 1, c2 = n - c1;
    tree.L = build_plus(values, c1, mod);
    tree.R = build_plus(values + c1, c2, mod);
    tree.p = poly_mul(tree.L->p, tree.R->p, mod);
    return ptree;
  }
};

// size(V) = n
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    poly_evaluate_mod_normal_internal(const T* X, int n, PSPTree* psp, T* result,
                                    int64 mod) {
  if (psp->n == 1) {
    result[0] = (X[0] + psp->v[0] * X[1]) % mod;
    return;
  }
  int c1 = psp->n >> 1;
  int c2 = psp->n - c1;

  vector<T> m(max(psp->L->p.size(), psp->R->p.size()));
  poly_mod(X, n, (const T*)&psp->L->p[0], psp->L->p.size(), &m[0], mod);
  poly_evaluate_mod_normal_internal(&m[0], (int)psp->L->p.size() - 1, psp->L,
                                  result, mod);
  poly_mod(X, n, (const T*)&psp->R->p[0], psp->R->p.size(), &m[0], mod);
  poly_evaluate_mod_normal_internal(&m[0], (int)psp->R->p.size() - 1, psp->R,
                                  result + c1, mod);
}

// size(V) = n
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    poly_evaluate_mod_normal_internal(const T* X, int n, const T* V, T* result,
                               int64 mod) {
  static_assert(std::is_unsigned<T>::value, "T must be unsigned");
  PSPTree* psp = PSPTree::build_minus((int64*)V, n, mod);
  poly_evaluate_mod_normal_internal(X, n, psp, result, mod);
  delete psp;
}

// Tellegen's Principle into Pratice
// A. Bostan, G. Lecerf, E. Schost
// size(V) = n
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    poly_evaluate_mod_bls_internal(const T* X, int n, const T* V, T* result,
                                  int64 mod) {
  static_assert(std::is_unsigned<T>::value, "T must be unsigned");
  vector<vector<vector<T>>> tree;
  {
    vector<vector<T>> from;
    for (int i = 0; i < n; ++i) {
      vector<T> tmp{(V[i] == 0 ? 0 : mod - V[i]) % mod, 1};
      from.push_back(tmp);
    }

    tree.push_back(from);
    int lastSize = n;
    while (lastSize != 1) {
      vector<vector<T>> to;
      for (int i = 0; i < lastSize / 2; ++i) {
        to.push_back(poly_mul(from[i * 2], from[i * 2 + 1], mod));
      }
      if (lastSize & 1) {
        to.push_back(from[lastSize - 1]);
      }
      lastSize = lastSize + 1 >> 1;
      from.swap(to);
      tree.push_back(from);
    }
  }

  const int d = (int)tree.size() - 1;
  {
    auto alpha = tree[d][0];
    reverse(alpha.begin(), alpha.end());
    alpha = poly_inv_mod(alpha, n, mod);
    reverse(alpha.begin(), alpha.end());
    
    vector<uint64> b(X, X + n);
    int degb = sz(b) - 1;
    auto t = poly_mul(alpha, b, mod);
    assert(sz(t) - 1 == n - 1 + degb);
    for (int i = n - 1, j = 0; i <= (n - 1) + degb; ++i, ++j) {
      t[j] = t[i];
    }
    assert(degb + 1 >= n);
    t.resize(n);
    reverse(t.begin(), t.end());
    
    vector<vector<T>> c(n);
    c[0] = std::move(t);
    // c[0] = vector<uint64>(X, X+n);
    for (int i = d; i > 0; --i) {
      int hi = tree[i].size();
      for (int j = hi - 1; j >= 0; --j) {
        int u = j * 2;
        int v = u + 1;
        if (v >= tree[i - 1].size()) {
          c[u] = c[j];
          continue;
        }
        int nn = tree[i][j].size() - 1;
        vector<T> x;
        {
          const int os = sz(tree[i - 1][2 * j]);
          reverse(tree[i - 1][2 * j].begin(), tree[i - 1][2 * j].end());
          x = poly_mul(tree[i - 1][2 * j], c[j], mod);
          int s = 0;
          for (int i = os - 1, j = 0; i < x.size() && j < nn; ++i, ++j) {
            x[j] = x[i];
            ++s;
          }
          x.resize(s);
        }
        vector<T> y;
        {
          const int os = sz(tree[i - 1][2 * j + 1]);
          reverse(tree[i - 1][2 * j + 1].begin(), tree[i - 1][2 * j + 1].end());
          y = poly_mul(tree[i - 1][2 * j + 1], c[j], mod);
          int s = 0;
          for (int i = os - 1, j = 0; i < y.size() && j < nn; ++i, ++j) {
            y[j] = y[i];
            ++s;
          }
          y.resize(s);
        }
        c[2 * j + 1] = std::move(x);
        c[2 * j] = std::move(y);
      }
    }
    for (int i = 0; i < n; ++i) result[i] = c[i][0];
  }
}

// size(V) = n
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    poly_evaluate_mod_normal(const T* X, const int n, const T* V, T* result,
                      int64 mod) {
  typedef typename std::make_unsigned<T>::type unsignedT;
  poly_evaluate_mod_normal_internal<unsignedT>(
      (const unsignedT*)X, n, (const unsignedT*)V, (unsignedT*)result, mod);
}

// size x = size v
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(vector<T>)
    poly_evaluate_mod_normal(const vector<T>& X, const vector<T>& V, int64 mod) {
  const int n = (int)X.size();
  vector<T> result(n);
  poly_evaluate_mod_normal(&X[0], n, &V[0], &result[0], mod);
  return result;
}

// size x = size v
SL vector<int64> poly_evaluate_mod_normal(const Poly& X, const vector<int64>& V) {
  return poly_evaluate_mod_normal(X.data, V, X.mod);
}

// size(V) = n
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    poly_evaluate_mod_bls(const T* X, const int n, const T* V, T* result,
                      int64 mod) {
  typedef typename std::make_unsigned<T>::type unsignedT;
  poly_evaluate_mod_bls_internal<unsignedT>(
      (const unsignedT*)X, n, (const unsignedT*)V, (unsignedT*)result, mod);
}

// size x = size v
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(vector<T>)
    poly_evaluate_mod_bls(const vector<T>& X, const vector<T>& V, int64 mod) {
  const int n = (int)X.size();
  vector<T> result(n);
  poly_evaluate_mod_bls(&X[0], n, &V[0], &result[0], mod);
  return result;
}

// size x = size v
SL vector<int64> poly_evaluate_mod_bls(const Poly& X, const vector<int64>& V) {
  return poly_evaluate_mod_bls(X.data, V, X.mod);
}

// Known f[0],f[1],f[2],...,f[d]
// Calcupate f[0+offset],f[1+offset],f[2+offset],...,f[d+offset]
// offset > d
template <typename T>
SL REQUIRES((is_native_integer<T>::value))
RETURN(void)
poly_offset_evaluate_internal(int d, const T* h, T* result, int64 offset, T* preFactInv,
                        T mod) {
  static_assert(std::is_unsigned<T>::value, "T must be unsigned");

  vector<T> A(d + 1);
  vector<T> B(2*d + 2);
  vector<T> C(3*d + 1);
  vector<T> T0(2*d + 2);
  vector<T> T1(2*d + 2);
  for (int i = 0; i <= d; ++i) {
    auto t = mul_mod(h[i], preFactInv[i], mod);
    t = mul_mod(t, preFactInv[d - i], mod);
    if ((d - i) & 1) {
      A[i] = t == 0 ? 0 : mod - t;
    } else {
      A[i] = t;
    }
  }

  T0[0] = T1[0] = 1;
  for (int i = -d, j = 1; i <= d; ++i, ++j) {
    T0[j] = mul_mod(T0[j - 1], offset + i, mod);
  }

  T1[2 * d + 1] = power_mod(T0[2 * d + 1], mod - 2, mod);
  for (int i = d - 1, j = 2 * d; i >= -d; --i, --j) {
    T1[j] = mul_mod(T1[j + 1], offset + i + 1, mod);
  }

  for (int i = -d, j = 1; i <= d; ++i, ++j) {
    B[j - 1] = mul_mod(T1[j], T0[j - 1], mod);
  }

  poly_mul(&A[0], d + 1, &B[0], 2 * d + 1, &C[0], mod);
  copy(&C[0] + d, &C[0] + 2 * d + 1, result);

  for (int i = 0, j = d + 1; i <= d; ++i, ++j) {
    result[i] = mul_mod(result[i], T0[j], mod);
    result[i] = mul_mod(result[i], T1[j - d - 1], mod);
  }
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value))
RETURN(void)
poly_offset_evaluate(int d, const T* h, T* result, int64 offset, T* preFactInv,
                        T mod) {
  typedef typename std::make_unsigned<T>::type unsignedT;
  poly_offset_evaluate_internal<unsignedT>(
      d, (const unsignedT*)h, (unsignedT*)result, offset, preFactInv, mod);
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value))
RETURN(vector<T>)
poly_offset_evaluate(const vector<T>& values, int64 offset, T* preFactInv,
                T mod) {
  const int d = (int)values.size() - 1;
  vector<T> result(d+1);
  poly_offset_evaluate(
      d, &values[0], &result[0], offset, preFactInv, mod);
  return std::move(result);
}

struct FactModer {
  FactModer(uint64 p) : p(p) {
    init();
  }

  // Evaluate (x+v*0+1)*(x+v*1+1)*(x+v*2+1)*...*(x+v*(d-1)+1) at 0, 1, 2, ..., d
  void evaluate(int d, uint64* result, uint64 v) {
    if (d == 1) {
      result[0] = 1;
      result[1] = 2;
      return;
    }

    const int halfD = d >> 1;
    evaluate(halfD, result, v);
    copy(result, result + halfD + 1, &G0[0]);
    poly_offset_evaluate<uint64>(halfD, result, &G1[0], halfD + 1, &preFactInv[0], p);
    poly_offset_evaluate<uint64>(halfD, result, &G2[0], v * halfD, &preFactInv[0], p);
    poly_offset_evaluate<uint64>(halfD, result, &G3[0], v * halfD + halfD, &preFactInv[0], p);

    for (int i = 0; i <= halfD; ++i) {
      result[i] = mul_mod(G0[i], G2[i], p);
    }
    for (int i = halfD + 1, j = 0; i <= halfD * 2; ++i, ++j) {
      result[i] = mul_mod(G1[j], G3[j + 1], p);
    }

    if (d & 1) {
      uint64 tmp = (v * (d - 1) + 1) % p;
      for (int i = 0; i <= 2 * halfD; ++i) {
        result[i] = mul_mod(result[i], tmp++, p);
        if (tmp >= p) tmp -= p;
      }
      uint64 t = 1;
      uint64 c = d + 1;
      for (int i = 0; i < d; ++i) {
        t = mul_mod(t, c, p);
        c += v;
        if (c >= p) c -= p;
      }
      result[d] = t;
    }
  }

  int64 cal(int64 n) {
    if (n >= p) return 0;
    if (n < q) return preFact[n];

    int64 m = sqrt(n);
    uint64 ret = 1;

    for (int64 i = m * m + 1; i <= n; ++i) {
      ret = mul_mod(ret, i, p);
    }

    evaluate(m, (uint64*)&V[0], m);

    for (int i = 0; i < m; ++i) {
      ret = mul_mod(ret, V[i], p);
    }
    return (int64)ret;
  }
  
  void init() {
    q = sqrt(p);
    while (q * q < p) ++q;
    q <<= 1;
    q += 1;
    preFact.resize(q);
    preFactInv.resize(q);
    init_seq_prod<uint64>(&preFact[0], 1, q - 1, p);
    init_seq_prod_inv<uint64>(&preFactInv[0], 1, q - 1, p, inv_of(preFact[q-1], p));
    G0.resize(q);
    G1.resize(q);
    G2.resize(q);
    G3.resize(q);
    V.resize(q);
  }

  vector<uint64> preFact, preFactInv;
  vector<uint64> G0, G1, G2, G3;
  vector<uint64> V;
  uint64 p;
  uint64 q;
};

// Initialize the bernoulli numbers.
SL void init_bernoulli_number(int64* dest, int n, int64* invs, int64 mod) {
  vector<uint64> t(n);
  uint64 v = 1;
  for (int i = 0; i < n; ++i) {
    v = v * invs[i + 1] % mod;
    t[i] = v;
  }

  auto result = poly_inv_mod<uint64>(t, n, mod);

  uint64 c = 1;
  dest[0] = result[0];
  for (int i = 1; i < n; ++i) {
    c = c * i % mod;
    dest[i] = result[i] * c % mod;
  }
}

SL void init_bernoulli_number(int64* dest, int n, int64 mod) {
  vector<uint64> invs(n + 1);
  // See init_inv
  {
    invs[0] = 0;
    invs[1] = 1;
    for (int i = 2; i <= n; ++i) {
      const uint64 t = mod / i;
      const uint64 k = mod % i;
      const uint64 v = t * t % mod;
      const uint64 u = invs[k] * invs[k] % mod;
      invs[i] = i * v % mod * u % mod;
    }
  }
  init_bernoulli_number(dest, n, (int64*)&invs[0], mod);
}

// Find 1^k + 2^k + ... n^k
SL int64 power_sum(int64 n, int64 k, int64 mod) {
  const int64 n1 = (n + 1) % mod;
  const int64 k1 = k + 1;
  int64 ret = 0;
  vector<uint64> invs(k1 + 1);
  // See init_inv
  {
    invs[0] = 0;
    invs[1] = 1;
    for (int i = 2; i <= k1; ++i) {
      const uint64 t = mod / i;
      const uint64 k = mod % i;
      const uint64 v = t * t % mod;
      const uint64 u = invs[k] * invs[k] % mod;
      invs[i] = i * v % mod * u % mod;
    }
  }
  vector<int64> b(k1);
  init_bernoulli_number(&b[0], k1, mod);
  int64 c = 1 % mod;
  int64 d = 1;
  for (int64 i = 1; i <= k1; ++i) {
    c = c * (k1 - i + 1) % mod;
    c = c * invs[i] % mod;
    d = d * n1 % mod;
    ret += c * b[k1 - i] % mod * d % mod;
    if (ret >= mod) ret -= mod;
  }
  ret = ret * invs[k1] % mod;
  return ret;
}

// gf_first, gf_at is good for the case size(A) is small.
// Otherwise, A.inv(n) * B is better.

// Finds the coefficient of x^0..x^n of f such that: A*f = B
// Returns empty vector if there is no integer solution.
// O(size(A) * n)
SL vector<int64> gf_first(const Poly& A, const Poly& B, const int n) {
  const int64 mod = A.mod;
  const int sa = sz(A);
  const int sb = sz(B);
  PE_ASSERT(sa > 0);
  PE_ASSERT(sb > 0);

  int64 v, u;
  int has = solve_linear_equation<int64>(A[0], 1, mod, v, u);
  if (!has) return vector<int64>();

  vector<int64> result(n + 1, 0);

  // if u < mod, we have more than one solution.
  PE_ASSERT(u == mod);
  const int64 invA0 = v;
  result[0] = invA0 * B[0] % mod;

  for (int i = 1; i <= n; ++i) {
    int64 t = regulate_mod(i < sb ? B[i] : 0, mod);
    for (int j = 1; j <= min(i, sa - 1); ++j) {
      t = sub_mod(t, (j < sa ? A[j] : 0) * result[i - j] % mod, mod);
    }
    result[i] = invA0 * t % mod;
  }

  return result;
}

// Finds the coefficient of x^n of f such that: A*f = B
// Returns -1 if there is no integer solution.
// O(size(A)^3 * log n) for big n
SL int64 gf_at(const Poly& A, const Poly& B, const int64 n) {
  const int64 mod = A.mod;
  const int sa = sz(A);
  const int sb = sz(B);
  PE_ASSERT(sa > 0);
  PE_ASSERT(sb > 0);

  int64 v, u;
  int has = solve_linear_equation<int64>(A[0], 1, mod, v, u);
  if (!has) return -1;

  const int64 m = min((int64)max(sa - 1, sb - 1), n);
  vector<int64> result(m + 1, 0);

  // if u < mod, we have more than one solution.
  PE_ASSERT(u == mod);
  const int64 invA0 = v;
  result[0] = invA0 * B[0] % mod;

  for (int i = 1; i <= m; ++i) {
    int64 t = regulate_mod(i < sb ? B[i] : 0, mod);
    for (int j = 1; j <= min(i, sa - 1); ++j) {
      t = sub_mod(t, (j < sa ? A[j] : 0) * result[i - j] % mod, mod);
    }
    result[i] = invA0 * t % mod;
  }

  if (m == n) {
    return result[m];
  }

  const int64 D = sa - 1;
  const int64 size = D * D;
  string data(size * sizeof(int64) * 3, '\0');
  int64* buffer = (int64*)data.c_str();

  int64* mat = buffer;
  int64* res = mat + size;
  int64* tmp = res + size;

  for (int i = 0; i < D; ++i) {
    mat[i] = invA0 * regulate_mod(i + 1 < sa ? -A[i + 1] : 0, mod) % mod;
  }
  for (int i = 1; i < D; ++i) {
    (mat + i * D)[i - 1] = 1;
  }
  for (int i = 0; i < D; ++i) {
    res[i] = result[m - i];
  }

  for (int64 t = n - m; t > 0; t >>= 1) {
    if (t & 1) {
      mat_mul_vec_mod(mat, res, tmp, mod, static_cast<int>(D));
      swap(res, tmp);
    }
    if (t > 1) {
      mat_mul_mat_mod(mat, mat, tmp, mod, static_cast<int>(D));
      swap(mat, tmp);
    }
  }
  return res[0];
}

// Berlekamp Massey
SL Poly find_minimal_poly(const Poly& s) {
  const int m = s.data.size();
  const int n = m >> 1;
  const int64 mod = s.mod;
  PE_ASSERT(n * 2 == m);

  Poly r0{{1}, mod};
  r0 = r0 << m;
  Poly r1(s);
  Poly v0{{0}, mod};
  Poly v1{{1}, mod};

  while (n + 1 <= r1.deg()) {
    Poly q, r;
    tie(q, r) = poly_div_and_mod(r0, r1);
    Poly v(v0 - q * v1);
    v0 = std::move(v1);
    v1 = std::move(v);
    r0 = std::move(r1);
    r1 = std::move(r);
  }
  v1 = std::move(inv_of(v1[0], mod) * v1);
  reverse(v1.data.begin(), v1.data.end());
  return v1;
}

#if 0
template <int64 P>
Poly<P> cal1(const Poly<P>& s) {
  Poly<P> C{1};
  Poly<P> B{1};
  int L = 0;
  int m = 1;
  int64 b = 1;
  const int N = s.data.size();
  for (int n = 0; n < N; ++n) {
    int64 d = s[n];
    for (int i = 1; i <= L; ++i) {
      d = add_mod(d, add_mod(C.at(i), s[n - i], P), P);
    }
    if (d == 0) {
      ++m;
    } else if (2 * L <= n) {
      auto T = C;
      int64 coe = d * inv_of(b, P) % P;
      C = C - (B << m) * coe;
      L = n + 1 - L;
      B = std::move(T);
      b = d;
      m = 1;
    } else {
      int64 coe = d * inv_of(b, P) % P;
      C = C - (B << m) * coe;
      m = m + 1;
    }
  }
  return C;
}
#endif

SL int64 nth_element(const Poly& s, int64 n, const Poly& min_poly) {
  if (n <= s.deg()) {
    return s[n];
  }

  auto r = n % min_poly;
  const int m = r.deg();
  int64 ans = 0;
  for (int i = 0; i <= m; ++i) {
    ans = add_mod(ans, s[i] * r[i] % s.mod, s.mod);
  }
  return ans;
}

SL Poly find_linear_recurrence(const Poly& s) {
  const int len = s.data.size();
  for (int n = 2; n < len; n += 2) {
    auto use = s.lowerTerms(n);
    auto min_poly = find_minimal_poly(use);
    int ok = 1;
    for (int i = n; i < len; ++i) {
      auto value = nth_element(use, i, min_poly);
      if (value != s[i]) {
        ok = 0;
        break;
      }
    }
    if (ok) {
      return min_poly;
    }
  }
  return Poly();
}

SL int64 nth_element(const Poly& s, int64 n) {
  if (n <= s.deg()) {
    return s[n];
  }

  auto min_poly = find_linear_recurrence(s);
  if (min_poly.deg() > 0) {
    return nth_element(s, n, min_poly);
  }
  return -1;
}
#endif
