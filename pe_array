#ifndef __PE_ARRAY__
#define __PE_ARRAY__

#include "pe_base"
#include "pe_memory"

template <typename T, int D>
struct PeArrayRef;

template <typename T, int D, typename A = LmAllocator>
struct PeArray : public PeArrayRef<T, D> {
  template <typename TT, int DD>
  friend struct PeArrayRef;

  typedef PeArrayRef<T, D> base;
  template <class... Args>
  PeArray(const vector<int64>& dimentions, Args&&... arg)
      : dimentions(dimentions), base(NULL, 0, NULL, NULL) {
    init(arg...);
    PE_ASSERT(dimentions.size() == D);
  }

  ~PeArray() { reset(); }

  template <class... Args>
  void init(Args&&... arg) {
    const int d = (int)dimentions.size();
    elementCounts.clear();
    elementCounts.push_back(1);
    for (int i = d - 1; i >= 0; --i) {
      elementCounts.push_back(elementCounts.back() * dimentions[i]);
    }
    reverse(elementCounts.begin(), elementCounts.end());
    elementCount = elementCounts[0];
    base::dimentions = &dimentions[0];
    base::elementCounts = &elementCounts[0];
    base::data = (T*)A::allocate(elementCount * sizeof(T));
    for (int64 i = 0; i < elementCount; ++i) {
      new (base::data + i) T(arg...);
    }
  }

  void reset() {
    for (int64 i = 0; i < elementCount; ++i) {
      (base::data + i)->~T();
    }
    A::deallocate(base::data);
  }

  T* getData() { return base::data; }

  PeArrayRef<T, D> ref() {
    return PeArrayRef<T, D>(base::data, 0, base::dimentions,
                            base::elementCounts);
  }

 private:
  vector<int64> dimentions;
  vector<int64> elementCounts;
  int64 elementCount;
};

template <typename T, int D>
struct PeArrayRef {
  typedef PeArrayRef<T, D - 1> valueType;

  PeArrayRef(T* data, int off, const int64* dimentions,
             const int64* elementCounts)
      : data(data),
        off(off),
        dimentions(dimentions),
        elementCounts(elementCounts) {}

  PeArrayRef<T, D - 1> operator[](int64 idx) {
    return PeArrayRef<T, D - 1>(data + idx * elementCounts[off + 1], off + 1,
                                dimentions, elementCounts);
  }

 protected:
  T* data;
  const int off;
  const int64* elementCounts;
  const int64* dimentions;
};

template <typename T>
struct PeArrayRef<T, 1> {
  PeArrayRef(T* data, int off, const int64* dimentions,
             const int64* elementCounts)
      : data(data),
        off(off),
        dimentions(dimentions),
        elementCounts(elementCounts) {}

  typedef T& valueType;

  T& operator[](int64 idx) { return data[idx]; }

 protected:
  T* data;
  const int off;
  const int64* elementCounts;
  const int64* dimentions;
};
#endif