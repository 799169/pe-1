#ifndef __PE_RAND_H__
#define __PE_RAND_H__

#include "pe_base"

// C-style random number generator
// ANSI_ISO_9899-1999: The value of the RAND_MAX macro shall be at least 32767.
// We assume RAND_MAX is either 32767 or 2147483647
#if RAND_MAX == 32767

SL int crandbit() { return rand() & 1; }
SL int crand15() { return rand(); }
SL int crand31() { return crand15() << 16 | crand15() << 1 | crandbit(); }
SL int64 crand63() {
  return (int64)crand31() << 32 | (uint32)crand31() << 1 | crandbit();
}

SL int crandi() { return crand31(); }
SL double crandd() {
  static const double coe = 1. / (RAND_MAX + 1);
  return coe * rand();
}

#elif RAND_MAX == 2147483647

SL int crandbit() { return rand() & 1; }
SL int crand15() { return rand() & 32767; }
SL int crand31() { return rand(); }
SL int64 crand63() {
  return (int64)crand31() << 32 | (uint32)crand31() << 1 | crandbit();
}

SL int crandi() { return crand31(); }
SL double crandd() {
  static const double coe = 1. / ((int64)RAND_MAX + 1LL);
  return coe * rand();
}

#else

#error "RAND_MAX should be either 32767 or 2147483647"

#endif

// C++ style random number generator
template <typename RE, typename DS>
class RandomGenerator {
 public:
  RandomGenerator(const RE& engine, const DS& distribution)
      : random_engine_(engine), distribution_(distribution) {}
  int operator()() { return distribution_(random_engine_); }

 private:
  RE random_engine_;
  DS distribution_;
};

RandomGenerator<std::mt19937, uniform_int_distribution<int>> SL
make_uniform_generator(int seed, int min, int max) {
  PE_ASSERT(min <= max);
  return RandomGenerator<std::mt19937, uniform_int_distribution<int>>(
      std::mt19937(seed), std::uniform_int_distribution<int>(min, max));
}

RandomGenerator<std::mt19937, uniform_int_distribution<int>> SL
make_uniform_generator(int min, int max) {
  std::random_device rd;
  PE_ASSERT(min <= max);
  return RandomGenerator<std::mt19937, uniform_int_distribution<int>>(
      std::mt19937(rd()), std::uniform_int_distribution<int>(min, max));
}

#endif
