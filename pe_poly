#ifndef __PE_POLY__
#define __PE_POLY__

#include "pe_base"
#include "pe_integer_util"
#include "pe_mod"
#include "pe_ntt"

int64 POLY_DEFAULT_MOD = 1;

struct Poly {
  int64 mod;
  std::vector<int64> data;

  Poly(int64 mod = 0): mod(mod == 0 ? POLY_DEFAULT_MOD : mod) {}

  Poly(const std::vector<int64>& data, int64 mod = 0): data(data), mod(mod == 0 ? POLY_DEFAULT_MOD : mod) {
    adjust_mod().adjust_leading_zeros();
  }
  Poly(std::vector<int64>&& data, int64 mod = 0): data(std::move(data)), mod(mod == 0 ? POLY_DEFAULT_MOD : mod) {
    adjust_mod().adjust_leading_zeros();
  }

  Poly& operator = (const vector<int64>& v) {
    data = v;
    return *this;
  }

  Poly& operator = (const vector<int64>&& v) {
    data = std::move(v);
    return *this;
  }

  Poly(const Poly& p) = default;
  Poly(Poly&& p) = default;
  Poly& operator=(const Poly& other) = default;
  Poly& operator=(Poly&& other) = default;

  Poly& adjust_leading_zeros() {
    int n = (int)data.size() - 1;
    while (n > 0 && data[n] == 0) --n;
    data.resize(max(n + 1, 1));
    return *this;
  }

  Poly& adjust_mod() {
    for (auto& iter : data) {
      iter = regulate_mod(iter, mod);
    }
    return *this;
  }

  int deg() const { return static_cast<int>(data.size() - 1); }
  int size() const { return static_cast<int>(data.size());}

  Poly& resize(int n) {
    const int m = (int)data.size();
    data.resize(n);
    for (int i = m; i < n; ++i) {
      data[i] = 0;
    }
    return *this;
  }

  Poly& redeg(int n) { return resize(n+1);}

  int64& operator[](int idx) {
    PE_ASSERT(idx >= 0 && idx < data.size());
    return data[idx];
  }

  int64 operator[](int idx) const {
    PE_ASSERT(idx >= 0 && idx < data.size());
    return data[idx];
  }

  int64 at(int idx) const {
    return idx >= 0 && idx < data.size() ? data[idx] : 0;
  }

  bool isZero() const {
    return data.size() == 1 && data[0] == 0;
  }
  
  int64 valueAt(int64 v) const {
    int64 ret = 0;
    for (int i = deg(); i >= 0; --i) {
      ret = ret * v % mod + data[i];
      if (ret >= mod) ret -= mod;
    }
    return ret;
  }

  Poly lower_terms(int n) const {
    const int m = min(n, static_cast<int>(data.size()));
    return Poly(std::vector<int64>(data.begin(), data.begin() + m), mod);
  }

  Poly inv(int n) const;
};

// Mul two polynomials with the same length.
// Make sure the length of result is at least: n + n
// The return length is 2n (not 2n-1)
template<typename T>
SL
REQUIRES((is_native_integer<T>::value))
RETURN(void)
poly_mul_normal_internal(const T* X, const T* Y, const int n, T* result, int64 mod) {
  const int n2 = n << 1;
  if (n <= 49) {
    fill(result, result+n2, 0);
    for (int i = 0; i < n; ++i)
      for (int j = 0; j < n; ++j) {
        result[i+j] = add_mod(result[i+j], (typename AtLeastUint64<T>::type)X[i] * Y[j] % mod, mod);
      }
    return;
  }

  const int m1 = n + 1 >> 1;
  const int m0 = n - m1;
  const int dbm1 = m1 << 1;
  const int dbm0 = m0 << 1;
  //m1 >= m0
  const T* x0 = X + m1;
  const T* y0 = Y + m1;
  const T* x1 = X;
  const T* y1 = Y;

  T* x0y0 = new T[dbm1];
  T* x1y1 = new T[dbm1];
  #pragma omp parallel sections if (n > 5000)
  {
    #pragma omp section
    poly_mul_normal_internal(x0, y0, m0, x0y0, mod);
    #pragma omp section
    poly_mul_normal_internal(x1, y1, m1, x1y1, mod);
  }
  if (m0 != m1) {
    x0y0[dbm0] = 0;
    x0y0[dbm0+1] = 0;
  }
  T* w = new T[dbm1];
  {
    T* u = new T[m1];
    T* v = new T[m1];

    for (int i = 0; i < m0; ++i)
      u[i] = add_mod(x0[i], x1[i], mod),
      v[i] = add_mod(y0[i], y1[i], mod);
    if (m0 != m1) {
      u[m1-1] = x1[m1-1];
      v[m1-1] = y1[m1-1];
    }
    poly_mul_normal_internal(u, v, m1, w, mod);
    delete[] u;
    delete[] v;
    for (int i = 0; i < m1*2; ++i)
      w[i] = sub_mod(w[i], add_mod(x0y0[i], x1y1[i], mod), mod);
  }
  fill(result, result + n2, 0);
  for (int i = 0; i < dbm0; ++i)
    result[dbm1+i] = add_mod(result[dbm1+i], x0y0[i], mod);
  for (int i = 0; i < dbm1; ++i)
    result[m1+i] = add_mod(result[m1+i], w[i], mod);
  for (int i = 0; i < dbm1; ++i)
    result[i] = add_mod(result[i], x1y1[i], mod);
  delete[] x0y0;
  delete[] x1y1;
  delete[] w;
}

// Multiply two polynomials.
// Make sure the length of result is at least: n + m - 1
template<typename T>
SL
REQUIRES((is_native_integer<T>::value))
RETURN(void)
poly_mul_normal(const T* X, const int n, const T* Y, const int m, T* result, int64 mod) {
  typedef typename std::make_unsigned<T>::type unsignedT;
  // In case n == m, we still allocate tempory result space to meet the
  // requirement of poly_mul_normal_internal.
  const int v = max(n, m);
  vector<T> tresult(v*2);
  if (n < m) {
    vector<T> XX(2*v);
    for (int i = 0; i < n; ++i) {
      XX[i] = X[i];
    }
    for (int i = n; i < m; ++i) {
      XX[i] = 0;
    }
    poly_mul_normal_internal<unsignedT>((const unsignedT*)&XX[0], (const unsignedT*)Y, m, (unsignedT*)&tresult[0], mod);
  } else {
    vector<T> YY(2*v);
    for (int i = 0; i < m; ++i) {
      YY[i] = Y[i];
    }
    for (int i = m; i < n; ++i) {
      YY[i] = 0;
    }
    poly_mul_normal_internal<unsignedT>((const unsignedT*)X, (const unsignedT*)&YY[0], n, (unsignedT*)&tresult[0], mod);
  }
  copy(tresult.begin(), tresult.begin() + n + m - 1, result);
}

template<typename T>
SL
REQUIRES((is_native_integer<T>::value))
RETURN(vector<T>)
poly_mul_normal(const vector<T>& X, const vector<T>& Y, int64 mod) {
  const int n = X.size();
  const int m = Y.size();
  const int resultSize = n + m - 1;
  typedef typename std::make_unsigned<T>::type unsignedT;
  if (n == m) {
    vector<T> result(2*n);
    poly_mul_normal_internal<unsignedT>((const unsignedT*)&X[0], (const unsignedT*)&Y[0], n, (unsignedT*)&result[0], mod);
    result.resize(resultSize);
    return result;
  } else if (n > m) {
    vector<T> YY;
    vector<T> result(2*n);
    YY.resize(n);
    for (int i = 0; i < m; ++i)
      YY[i] = Y[i];
    poly_mul_normal_internal<unsignedT>((const unsignedT*)&X[0], (const unsignedT*)&YY[0], n, (unsignedT*)&result[0], mod);
    result.resize(resultSize);
    return result;
  } else {
    vector<T> XX;
    vector<T> result(2*m);
    XX.resize(m);
    for (int i = 0; i < n; ++i)
      XX[i] = X[i];
    poly_mul_normal_internal<unsignedT>((const unsignedT*)&XX[0], (const unsignedT*)&Y[0], m, (unsignedT*)&result[0], mod);
    result.resize(resultSize);
    return result;
  }
}

SL Poly poly_mul_normal(const Poly& X, const Poly& Y) {
  auto data = poly_mul_normal(X.data, Y.data, X.mod);
  return Poly{std::move(data)};
}

// Need int128 to handle the big polynomial coefficient.
#if PE_HAS_INT128
#define HAS_POLY_MUL_NTT 1

// Multiply two polynomials.
// Make sure the length of result is at least: n + m - 1
template<typename T>
SL
REQUIRES((is_native_integer<T>::value))
RETURN(void)
poly_mul_ntt_internal(const T* X, int n, const T* Y, int m, T* result, int64 mod) {
  static_assert(std::is_unsigned<T>::value, "T must be unsigned");

  int alignedSize = 1;
  while (alignedSize < n + m) alignedSize <<= 1;

  // TODO(baihacker): decide the size automatically.
  NttMod moder[3] = {nttMod1, nttMod2, nttMod3};
  vector<uint64> tresult[3];
  #pragma omp parallel for schedule(dynamic, 1) num_threads(3)
  for (int id = 0; id < 3; ++id) {
    vector<uint64> XX(alignedSize);
    vector<uint64> YY(alignedSize);
    for (int i = 0; i < n; ++i) XX[i] = X[i];
    for (int i = n; i < alignedSize; ++i) XX[i] = 0;
    for (int i = 0; i < m; ++i) YY[i] = Y[i];
    for (int i = m; i < alignedSize; ++i) YY[i] = 0;
    #pragma omp parallel sections if (n + m >= 100000)
    {
      #pragma omp section
      ntt(&XX[0], alignedSize, moder[id]);
      #pragma omp section
      ntt(&YY[0], alignedSize, moder[id]);
    }
    const uint64 mod = moder[id].mod;
    for (int i = 0; i < alignedSize; ++i) {
      XX[i] = (uint64)XX[i] * YY[i] % mod;
    }
    ntt(&XX[0], alignedSize, moder[id], true);
    tresult[id] = std::move(XX);
  }

  const int resultSize = n + m - 1;
  int128 mods[3] = {nttMod1.mod, nttMod2.mod, nttMod3.mod};
  #pragma omp parallel for schedule(dynamic, 100000) if (n + m >= 100000)
  for (int i = 0; i < resultSize; ++i) {
    int128 val[3] = {tresult[0][i], tresult[1][i], tresult[2][i]};
    int128 have, v, u;
    tie(have, v, u) = crtn<int128>(val, mods, 3);
    result[i] = v % mod;
  }
}

// Multiply two polynomials.
// The length of result is at least n + m - 1.
template<typename T>
SL
REQUIRES((is_native_integer<T>::value))
RETURN(void)
poly_mul_ntt(const T* X, const int n, const T* Y, const int m, T* result, int64 mod) {
  typedef typename std::make_unsigned<T>::type unsignedT;
  poly_mul_ntt_internal<unsignedT>((const unsignedT*)X, n, (const unsignedT*)Y, m, (unsignedT*)result, mod);
}

template<typename T>
SL
REQUIRES((is_native_integer<T>::value))
RETURN(vector<T>)
poly_mul_ntt(const vector<T>& X, const vector<T>& Y, int64 mod) {
  const int n = (int)X.size() - 1;
  const int m = (int)Y.size() - 1;

  vector<T> result(n + m + 1);
  poly_mul_ntt(&X[0], n + 1, &Y[0], m + 1, &result[0], mod);

  return result;
}

SL Poly poly_mul_ntt(const Poly& X, const Poly& Y) {
  auto data = poly_mul_ntt(X.data, Y.data, X.mod);
  return Poly{std::move(data)};
}
#else
#define HAS_POLY_MUL_NTT 0
#endif

template<typename T>
SL
REQUIRES((is_native_integer<T>::value))
RETURN(void)
poly_mul(const T* X, const int n, const T* Y, const int m, T* result, int64 mod) {
  typedef typename std::make_unsigned<T>::type unsignedT;

  #if HAS_POLY_MUL_NTT
    const int c = max(n, m);
    c >= 50 ? poly_mul_ntt(&X[0], n, &Y[0], m, result, mod) : 
  #endif
  poly_mul_normal(&X[0], n, &Y[0], m, result, mod);
}

template<typename T>
SL
REQUIRES((is_native_integer<T>::value))
RETURN(vector<T>)
poly_mul(const vector<T>& X, const vector<T>& Y, int64 mod) {
  const int n = (int)X.size() - 1;
  const int m = (int)Y.size() - 1;

  vector<T> result(n + m + 1);
  poly_mul(&X[0], n + 1, &Y[0], m + 1, &result[0], mod);

  return result;
}

SL Poly poly_mul(const Poly& X, const Poly& Y) {
  auto data = poly_mul(X.data, Y.data, X.mod);
  return Poly{std::move(data), X.mod};
}

template<typename T>
SL
REQUIRES((is_native_integer<T>::value))
RETURN(void)
poly_inv_internal(int n, const T* a, T* b, T* tmp[2], int64 mod) {
  static_assert(std::is_unsigned<T>::value, "T must be unsigned");
  if (n == 1) {
    b[0] = power_mod(a[0], mod - 2, mod);
  } else {
    poly_inv_internal(n + 1 >> 1, a, b, tmp, mod);

    int p = 1;
    while (p < n << 1) p <<= 1;
    poly_mul(b, n, b, n, tmp[0], mod);
    poly_mul(a, n, tmp[0], n, tmp[1], mod);
    for (int i = 0; i < n; ++i) {
      auto t = b[i] << 1;
      if (t >= mod) t -= mod;
      t = t + mod - tmp[1][i];
      if (t >= mod) t -= mod;
      b[i] = t;
    }
    fill(b + n, b + p, 0);
  }
}

template<typename T>
SL
REQUIRES((is_native_integer<T>::value))
RETURN(void)
poly_inv_mod_internal(const T* x, int m, int n, T* result, int64 mod) {
  // It is assumed that mod is a prime
  const int t = max(n, m);
  int p = 1;
  while (p < t << 1) p <<= 1;

  // a
  vector<T> a(p);
  for (int i = 0; i < m; ++i) {
    a[i] = x[i];
  }
  for (int i = m; i < p; ++i) {
    a[i] = 0;
  }

  // b
  vector<T> b(p);

  // tmp
  vector<T> tmpData[2];
  T* tmp[2];
  for (int i = 0; i < 2; ++i) {
    tmpData[i].resize(p);
    tmp[i] = &tmpData[i][0];
  }

  poly_inv_internal(n, &a[0], &b[0], tmp, mod);
  copy(b.begin(), b.begin() + n, result);
}

template<typename T>
SL
REQUIRES((is_native_integer<T>::value))
RETURN(void)
poly_inv_mod(const T* x, int m, int n, T* result, int64 mod) {
  typedef typename std::make_unsigned<T>::type unsignedT;
  poly_inv_mod_internal<unsignedT>((const unsignedT*)x, m, n, (unsignedT*)result, mod);
}

template<typename T>
SL
REQUIRES((is_native_integer<T>::value))
RETURN(vector<T>)
poly_inv_mod(const vector<T>& x, int n, int64 mod) {
  // It is assumed that mod is a prime
  const int m = x.size();
  const int t = max(n, m);
  int p = 1;
  while (p < t << 1) p <<= 1;

  // b
  vector<T> b(p);
  
  poly_inv_mod(&x[0], m, n, &b[0], mod);
  b.resize(n);
  return b;
}

// size r >= m
// size q >= n - m + 1
template<typename T>
SL
REQUIRES((is_native_integer<T>::value))
RETURN(void)
poly_div_dc_internal(const T* X, int n, const T* Y, int m, T* q, T* r, int64 mod) {
  static_assert(std::is_unsigned<T>::value, "T must be unsigned");
  if (m > n) {
    copy(X, X+n, r);
    fill(r+n, r+m, 0);
    q[0] = 0;
    return;
  }
  vector<T> YR(m);
  for (int i = 0; i < m; ++i) YR[i] = Y[m-1-i];
  vector<T> IYR = poly_inv_mod(YR, n - m + 1, mod);
  vector<T> XR(n);
  for (int i = 0; i < n; ++i) XR[i] = X[n-1-i];
  vector<T> Z = poly_mul(XR, IYR, mod);
  Z.resize(n - m + 1);
  reverse(Z.begin(), Z.end());
  copy(Z.begin(), Z.end(), q);
  vector<T> tmp(n);
  poly_mul(&Y[0], m, &Z[0], n-m+1, &tmp[0], mod);
  for (int i = 0; i < m; ++i) {
    r[i] = X[i] >= tmp[i] ? X[i] - tmp[i] : X[i] + mod - tmp[i];
  }
}

// size r >= m
// size q >= n - m + 1
template<typename T>
SL
REQUIRES((is_native_integer<T>::value))
RETURN(void)
poly_div_dc(const T* X, const int n, const T* Y, const int m, T* q, T* r, int64 mod) {
  typedef typename std::make_unsigned<T>::type unsignedT;
  poly_div_dc_internal<unsignedT>((const unsignedT*)X, n, (const unsignedT*)Y, m, (unsignedT*)q, (unsignedT*)r, mod);
}

template<typename T>
SL
REQUIRES((is_native_integer<T>::value))
RETURN(void)
poly_div_dc(const T* X, const int n, const T* Y, const int m, T* r, int64 mod) {
  vector<T> q(max(n - m + 1, 1));
  poly_div_dc(X, n, Y, m, &q[0], r, mod);
}

// deg q = max(deg X - degY + 1, 1)
// deg r <= deg x - deg y
template<typename T>
SL
REQUIRES((is_native_integer<T>::value))
RETURN(tuple<vector<T>, vector<T>>)
poly_div_dc(const vector<T>& X, const vector<T>& Y, int64 mod) {
  const int n = (int)X.size() - 1;
  const int m = (int)Y.size() - 1;

  vector<T> q(max(n - m + 1, 1));
  vector<T> r(m+1);
  poly_div_dc(&X[0], n + 1, &Y[0], m + 1, &q[0], &r[0], mod);

  int t = m;
  r[m] = 0;
  while (t >= 0 && r[t] == 0) --t;
  r.resize(t+1);
  return make_tuple(std::move(q), std::move(r));
}

template<typename T>
SL
REQUIRES((is_native_integer<T>::value))
RETURN(vector<T>)
poly_mod_dc(const vector<T>& X, const vector<T>& Y, int64 mod) {
  vector<T> q, r;
  tie(q, r) = poly_div_dc(X, Y, mod);
  return std::move(r);
}

// deg q = max(deg X - degY + 1, 1)
// deg r <= deg x - deg y
SL tuple<Poly, Poly> poly_div_dc(const Poly& X, const Poly& Y) {
  vector<int64> q, r;
  tie(q, r) = poly_div_dc(X.data, Y.data, X.mod);
  return make_tuple(std::move(Poly(q, X.mod)), Poly(std::move(r), X.mod));
}

SL Poly poly_mod_dc(const Poly& X, const Poly& Y) {
  vector<int64> q, r;
  tie(q, r) = poly_div_dc(X.data, Y.data, X.mod);
  return std::move(Poly(q, X.mod));
}

// size r >= m
// size q >= n - m + 1
template<typename T>
SL
REQUIRES((is_native_integer<T>::value))
RETURN(void)
poly_div_normal_internal(const T* X, int n, const T* Y, int m, T* q, T* r, int64 mod) {
  if (m > n) {
    copy(X, X+n, r);
    fill(r+m, r+n, 0);
    q[0] = 0;
    return;
  }

  int top = 0;
  vector<T> tmp(X, X+n);
  int64 t = inv_of(Y[m-1], mod);
  for (int i = n - 1; i >= m - 1; --i) {
    int64 u = tmp[i] * t % mod;
    for (int j = i, k = m - 1; k >= 0; --j, --k) {
      tmp[j] = sub_mod(tmp[j], u * Y[k] % mod, mod);
    }
    q[top++] = u;
  }
  reverse(q, q + top);
  copy(tmp.begin(), tmp.begin() + m, r);
}

template<typename T>
SL
REQUIRES((is_native_integer<T>::value))
RETURN(void)
poly_div_normal(const T* X, const int n, const T* Y, const int m, T* q, T* r, int64 mod) {
  typedef typename std::make_unsigned<T>::type unsignedT;
  poly_div_normal_internal<unsignedT>((const unsignedT*)X, n, (const unsignedT*)Y, m, (unsignedT*)q, (unsignedT*)r, mod);
}

template<typename T>
SL
REQUIRES((is_native_integer<T>::value))
RETURN(tuple<vector<T>, vector<T>>)
poly_div_normal(const vector<T>& X, const vector<T>& Y, int64 mod) {
  const int n = (int)X.size() - 1;
  const int m = (int)Y.size() - 1;

  vector<T> q(max(n - m + 1, 1));
  vector<T> r(m+1);
  poly_div_normal(&X[0], n + 1, &Y[0], m + 1, &q[0], &r[0], mod);

  int t = m;
  r[m] = 0;
  while (t >= 0 && r[t] == 0) --t;
  r.resize(t+1);
  return make_tuple(std::move(q), std::move(r));
}

template<typename T>
SL
REQUIRES((is_native_integer<T>::value))
RETURN(void)
poly_mod_normal(const T* X, const int n, const T* Y, const int m, T* r, int64 mod) {
  vector<T> q(max(n - m + 1, 1));
  poly_mod_normal(X, n, Y, m, &q[0], r, mod);
}

template<typename T>
SL
REQUIRES((is_native_integer<T>::value))
RETURN(vector<T>)
poly_mod_normal(const vector<T>& X, const vector<T>& Y, int64 mod) {
  vector<T> q, r;
  tie(q, r) = poly_div_normal(X, Y, mod);
  return std::move(r);
}

SL tuple<Poly, Poly> poly_div_normal(const Poly& x, const Poly& y) {
  vector<int64> q, r;
  tie(q, r) = poly_div_normal(x.data, y.data, x.mod);
  return make_tuple(std::move(Poly(std::move(q), x.mod)), std::move(Poly(std::move(r), x.mod)));
}

SL Poly poly_mod_normal(const Poly& X, const Poly& Y) {
  vector<int64> q, r;
  tie(q, r) = poly_div_normal(X.data, Y.data, X.mod);
  return std::move(Poly(q, X.mod));
}

template<typename T>
SL
REQUIRES((is_native_integer<T>::value))
RETURN(void)
poly_div(const T* X, const int n, const T* Y, const int m, T* q, T* r, int64 mod) {
  typedef typename std::make_unsigned<T>::type unsignedT;
  // choose algorithm
  poly_div_dc_internal<unsignedT>((const unsignedT*)X, n, (const unsignedT*)Y, m, (unsignedT*)q, (unsignedT*)r, mod);
}

template<typename T>
SL
REQUIRES((is_native_integer<T>::value))
RETURN(void)
poly_mod(const T* X, const int n, const T* Y, const int m, T* r, int64 mod) {
  vector<T> q(max(n - m + 1, 1));
  poly_div(X, n, Y, m, &q[0], r, mod);
}

template<typename T>
SL
REQUIRES((is_native_integer<T>::value))
RETURN(tuple<vector<T>, vector<T>>)
poly_div(const vector<T>& X, const vector<T>& Y, int64 mod) {
  const int n = (int)X.size() - 1;
  const int m = (int)Y.size() - 1;

  vector<T> q(max(n - m + 1, 1));
  vector<T> r(m+1);
  poly_div(&X[0], n + 1, &Y[0], m + 1, &q[0], &r[0], mod);

  int t = m;
  r[m] = 0;
  while (t >= 0 && r[t] == 0) --t;
  r.resize(t+1);
  return make_tuple(std::move(q), std::move(r));
}

template<typename T>
SL
REQUIRES((is_native_integer<T>::value))
RETURN(vector<T>)
poly_mod(const vector<T>& X, const vector<T>& Y, int64 mod) {
  vector<T> q, r;
  tie(q, r) = poly_div(X, Y, mod);
  return std::move(r);
}

SL tuple<Poly, Poly> poly_div(const Poly& x, const Poly& y) {
  vector<int64> q, r;
  tie(q, r) = poly_div(x.data, y.data, x.mod);
  return make_tuple(std::move(Poly(std::move(q), x.mod)), std::move(Poly(std::move(r), x.mod)));
}

SL Poly poly_mod(const Poly& x, const Poly& y) {
  vector<int64> q, r;
  tie(q, r) = poly_div(x.data, y.data, x.mod);
  return std::move(Poly(std::move(r), x.mod));
}

inline Poly Poly::inv(int n) const {
  // It is assumed that mod is a prime
  auto t = poly_inv_mod(data, n, mod);
  return Poly(std::vector<int64>((int64*)&t[0], (int64*)&t[0] + t.size()), mod);
}

Poly operator<<(const Poly& p, int m) {
  if (m == 0) {
    return p;
  }
  std::vector<int64> new_data(p.data.size() + m);
  for (int i = static_cast<int>(p.data.size()) + m - 1; i >= m; --i) {
    new_data[i] = p.data[i - m];
  }
  for (int i = 0; i < m; ++i) {
    new_data[i] = 0;
  }
  return Poly(std::move(new_data), p.mod);
}

SL Poly operator-(const Poly& x, const Poly& y) {
  const int n = max(x.deg(), y.deg());
  std::vector<int64> data(n + 1);
  for (int i = 0; i <= n; ++i) {
    data[i] = sub_mod(x.at(i), y.at(i), x.mod);
  }
  return Poly(std::move(data), x.mod).adjust_leading_zeros();
}

SL Poly operator+(const Poly& x, const Poly& y) {
  const int n = max(x.deg(), y.deg());
  std::vector<int64> data(n + 1);
  for (int i = 0; i <= n; ++i) {
    data[i] = add_mod(x.at(i), y.at(i), x.mod);
  }
  return Poly(std::move(data), x.mod).adjust_leading_zeros();
}

SL Poly operator*(const Poly& x, int64 v) {
  std::vector<int64> data(x.data);
  for (auto& iter : data) {
    iter = iter * v % x.mod;
  }
  return Poly(std::move(data), x.mod);
}

SL Poly operator*(int64 v, const Poly& x) {
  return x * v;
}

SL Poly operator*(const Poly& x, const Poly& y) {
  return poly_mul(x, y);
}

SL Poly operator/(const Poly& x, const Poly& y) {
  Poly q, r;
  tie(q, r) = poly_div(x, y);
  return r;
}

SL Poly operator%(const Poly& x, const Poly& y) {
  Poly q, r;
  tie(q, r) = poly_div(x, y);
  return r;
}

// x^n % mod
SL Poly operator%(int64 n, const Poly& mod) {
  Poly x{{0, 1}, mod.mod};
  Poly ret{{1}, mod.mod};
  for (; n > 0; n >>= 1) {
    if (n & 1) {
      auto t = x * ret;
      Poly q, r;
      tie(q, r) = poly_div(t, mod);
      ret = std::move(r);
    }
    if (n > 1) {
      auto t = x * x;
      Poly q, r;
      tie(q, r) = poly_div(t, mod);
      x = r;
    }
  }
  return ret;
}

SL ostream& operator<<(ostream& o, const Poly& p) {
  const int n = p.data.size();
  for (int i = 0; i < n - 1; ++i) {
    o << p.data[i] << ", ";
  }
  return o << p.data[n - 1];
}

#endif

#include "pe_poly_app"