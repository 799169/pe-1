#ifndef __PE_MOD__
#define __PE_MOD__

#include "pe_base"
#include "pe_int128"
#include "pe_type_traits"

// Modular arithmetic
template <typename T, typename M>
SL REQUIRES((is_native_integer<T>::value && is_native_integer<M>::value &&
             std::is_signed<T>::value && std::is_signed<M>::value))
    RETURN_T(IntPromotionT(T, M)) regulate_mod(T a, M mod) {
  PE_ASSERT(mod >= 1);
  if (a >= 0) {
    return a >= mod ? a % mod : a;
  } else {
    auto tmp = a % mod;
    if (tmp < 0) tmp += mod;
    return tmp;
  }
}

template <typename T, typename M>
SL REQUIRES((is_native_integer<T>::value && is_native_integer<M>::value &&
             std::is_signed<T>::value && std::is_unsigned<M>::value))
    RETURN_T(IntPromotionT(T, M)) regulate_mod(T a, M mod) {
  PE_ASSERT(mod >= 1);
  if (a >= 0) {
    return a >= mod ? a % mod : a;
  } else {
    auto t = -a;
    if (t >= mod) t %= mod;
    return t == 0 ? 0 : mod - t;
  }
}

template <typename T, typename M>
SL REQUIRES((is_native_integer<T>::value && is_native_integer<M>::value &&
             std::is_unsigned<T>::value)) RETURN_T(IntPromotionT(T, M))
    regulate_mod(T a, M mod) {
  PE_ASSERT(mod >= 1);
  typedef IntPromotion(T, M) ResultType;
  ResultType b = a, m = mod;
  if (b >= m) b %= m;
  return b;
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(T) regulate_mod(T a, T mod) {
  return regulate_mod<T, T>(a, mod);
}

template <typename T, typename M>
SL REQUIRES((is_native_integer<T>::value && is_native_integer<M>::value))
    RETURN_T(IntPromotionT(T, M)) add_mod_impl(T a, T b, M mod) {
  typedef IntPromotion(T, M) ResultType;
  auto t0 = a;
  t0 += b;
  ResultType t1 = t0, m = mod;
  if (t1 >= m) t1 -= m;
  return t1;
}

template <typename T1, typename T2, typename M>
SL REQUIRES((is_native_integer<T1>::value && is_native_integer<T2>::value &&
             is_native_integer<M>::value)) RETURN_T(IntPromotionT(T1, T2, M))
    add_mod(T1 a, T2 b, M mod) {
  typedef IntPromotion(T1, T2) T;
  return add_mod_impl<T, M>(a, b, mod);
}

template <typename T, typename M>
SL REQUIRES((is_native_integer<T>::value && is_native_integer<M>::value))
    RETURN(IntPromotion(T, M)) sub_mod_impl(T a, T b, M mod) {
  return a >= b ? a - b : mod - b + a;
}

template <typename T1, typename T2, typename M>
SL REQUIRES((is_native_integer<T1>::value && is_native_integer<T2>::value &&
             is_native_integer<M>::value)) RETURN_T(IntPromotionT(T1, T2, M))
    sub_mod(T1 a, T2 b, M mod) {
  typedef IntPromotion(T1, T2) T;
  return sub_mod_impl<T, M>(a, b, mod);
}

template <typename T, typename M>
SL REQUIRES((is_native_integer<T>::value && is_native_integer<M>::value))
    RETURN_T(IntPromotionT(T, M)) mul_mod_impl(T a, T b, M mod) {
  return a * b % mod;
}

template <typename T1, typename T2, typename M>
SL REQUIRES((is_native_integer<T1>::value && is_native_integer<T2>::value &&
             is_native_integer<M>::value))
    RETURN_T(IntPromotionT(T1, T2, int64, M)) mul_mod(T1 a, T2 b, M mod) {
  typedef IntPromotion(T1, T2) T;
  typedef typename AtLeastInt64<T>::type atLeastInt64T;
  return mul_mod_impl<atLeastInt64T, M>(a, b, mod);
}

#if PE_HAS_INT128
SL uint64 mod128_64(uint128 a, uint64 b) {
#if defined(COMPILER_GNU) && PE_X86_64
  // Note: if a / b > uint64_max, an exception is thrown.
  uint64 q, r;
  __asm__("divq\t%4"
          : "=a"(q), "=d"(r)
          : "0"(uint64(a)), "1"(uint64(a >> 64)), "rm"(b));
  return r;
#else
  return a % b;
#endif
}
#endif

#if defined(COMPILER_GNU) && PE_X86_64
template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_unsigned<T>::value))
    RETURN(uint64) mul_mod_ex_dis(uint64 a, uint64 b, uint64 mod) {
  if (mod >> 32) {
    uint64 q, r;
    __asm__(
        "movq %2,%%rax\n\t"
        "mulq %3\n\t"
        "divq %4\n\t"
        : "=a"(q), "=d"(r)
        : "0"(uint64(a)), "1"(uint64(b)), "rm"(uint64(mod)));
    return r;
  } else {
    uint32 q, r;
    __asm__(
        "movl %2,%%eax\n\t"
        "mull %3\n\t"
        "divl %4\n\t"
        : "=a"(q), "=d"(r)
        : "0"(uint32(a)), "1"(uint32(b)), "rm"(uint32(mod)));
    return r;
  }
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_signed<T>::value)) RETURN(int64)
    mul_mod_ex_dis(int64 a, int64 b, int64 mod) {
  if (static_cast<uint64>(mod) >> 31) {
    int64 q, r;
    __asm__(
        "movq %2,%%rax\n\t"
        "imulq %3\n\t"
        "idivq %4\n\t"
        : "=a"(q), "=d"(r)
        : "0"(a), "1"(b), "rm"(mod));
    return r;
  } else {
    int32 q, r;
    __asm__(
        "movl %2,%%eax\n\t"
        "imull %3\n\t"
        "idivl %4\n\t"
        : "=a"(q), "=d"(r)
        : "0"(int32(a)), "1"(int32(b)), "rm"(int32(mod)));
    return r;
  }
}
#endif

SL void mul_mod_ex_slow_warning_once() {
  static atomic_int WARNING_ONCE_FLAG{0};
  if (WARNING_ONCE_FLAG.exchange(1) == 0) {
    fprintf(stderr, "mul_mod_ex may be very slow.\n");
  }
}

#if defined(COMPILER_MSVC) && PLATFORM_WIN && PE_X86_64

extern "C" {
typedef uint64 (*MulModFunctionPointerType)(uint64, uint64, uint64);
}

#if 0
.CODE

MulModShellCode PROC
	mov rax, rcx
	mul rdx
    div r8
	mov rax, rdx
    ret
MulModShellCode ENDP

END
#endif
const char __MulModShellCode[] =
    "\x48\x8b\xc1\x48\xf7\xe2\x49\xf7\xf0\x48\x8b\xc2\xc3";
int __MakeMulModShellCodeExecutable() {
  DWORD dwOld = 0;
  VirtualProtect((void*)__MulModShellCode, sizeof(__MulModShellCode),
                 PAGE_EXECUTE_READWRITE, &dwOld);
  return 0;
}
const static int __init_code_data_once = __MakeMulModShellCodeExecutable();
#endif

template <typename T1, typename T2, typename M>
SL REQUIRES((is_native_integer<T1>::value && is_native_integer<T2>::value &&
             is_native_integer<M>::value))
    RETURN_T(IntPromotionT(T1, T2, int64, M)) mul_mod_ex(T1 a, T2 b, M mod) {
  typedef IntPromotion(T1, T2) T;
  typedef typename AtLeastInt64<T>::type atLeastInt64T;
  typedef IntPromotion(atLeastInt64T, T) ResultType;

#if defined(COMPILER_GNU) && PE_X86_64
  // We have a disassembly version
  return (ResultType)mul_mod_ex_dis<ResultType>(a, b, mod);
#else
  if (mod <= PE_SOI63) {
    return mul_mod_impl<atLeastInt64T, M>(a, b, mod);
  }
#if PE_HAS_INT128
  return (ResultType)mul_mod_impl<int128, M>(a, b, mod);
#else

  // The openmp has issue about long double on windows.
  // Seems caused by thread library.
  // https://sourceforge.net/p/mingw-w64/bugs/678/
#if defined(COMPILER_GNU) && PLATFORM_WIN && ENABLE_OPENMP
  constexpr bool GNU_ON_WINDOWS_WITH_OPENMP = true;
#else
  constexpr bool GNU_ON_WINDOWS_WITH_OPENMP = false;
#endif
  constexpr bool CAN_USE_LONG_DOUBLE =
      sizeof(long double) > sizeof(double) && !GNU_ON_WINDOWS_WITH_OPENMP;

  if (CAN_USE_LONG_DOUBLE) {
    const int64 x = a, y = b, m = mod;
    int64 r = (x * y - (int64)(((long double)x * y) / m) * m);
    if (r >= m) r -= r / m * m;
    if (r < 0) r += m;
    return r;
  }

#if defined(COMPILER_MSVC) && PLATFORM_WIN && PE_X86_64
  return (ResultType)((MulModFunctionPointerType)(
      unsigned char*)__MulModShellCode)((uint64)a, (uint64)b, (uint64)mod);
#endif

  mul_mod_ex_slow_warning_once();
// 3 other implementations
#if 0
  // Mpz based implementation
  // GMP_LIMB_BITS == 64 and GMP_NAIL_BITS == 0
  mpz_t A;
  mpz_init2(A, 64);
  mpz_t B;
  mpz_init2(B, 64);
  A[0]._mp_size = 1;
  A[0]._mp_d[0] = a;

  B[0]._mp_size = 1;
  B[0]._mp_d[0] = b;

  mpz_t M;
  mpz_init2(M, 64);
  M[0]._mp_size = 1;
  M[0]._mp_d[0] = mod;

  mpz_mul(A, A, B);
  mpz_mod(A, A, M);

  auto ret = A[0]._mp_d[0];
  mpz_clear(A);
  mpz_clear(B);
  mpz_clear(M);
  return ret;
#elif 1
  const uint64 ua = static_cast<uint64>(a);
  const uint64 ub = static_cast<uint64>(b);
  const uint64 umod = static_cast<uint64>(mod);
  if (ua == 0 || ub == 0) {
    return 0;
  }
  if (ua <= ub) {
    uint64 ret = 0;
    int used = pe_clzll(ua);
    const int d = pe_clzll(ub);
    const uint64 mask = (1ULL << d) - 1;
    while (used < 64) {
      const int now = min(64 - used, d);
      const uint64 t0 = (ua >> (64 - used - now)) & mask;
      const uint64 t1 = t0 * ub % umod;
      ret = (ret << now) % umod;
      ret += t1;
      if (ret >= umod) ret -= umod;
      used += now;
    }
    return ret;
  } else {
    uint64 ret = 0;
    int used = pe_clzll(ub);
    const int d = pe_clzll(ua);
    const uint64 mask = (1ULL << d) - 1;
    while (used < 64) {
      const int now = min(64 - used, d);
      const uint64 t0 = (ub >> (64 - used - now)) & mask;
      const uint64 t1 = t0 * ua % umod;
      ret = (ret << now) % umod;
      ret += t1;
      if (ret >= umod) ret -= umod;
      used += now;
    }
    return ret;
  }
#elif 0
  atLeastInt64T ret = 0;
  atLeastInt64T flag = b;
  for (atLeastInt64T d = 1; d <= (atLeastInt64T)a; d <<= 1) {
    if (d & a) {
      ret = (ret + flag) % mod;
    }
    flag = (flag << 1) % mod;
  }
  return (ResultType)ret;
#endif

#endif

#endif
}

// It's expected that all elements in b are prime.
// The behavior is undefined if it's not satisified.
template <typename T, typename M>
SL REQUIRES((is_native_integer<T>::value && is_native_integer<M>::value))
    RETURN_T(IntPromotionT(T, M))
        frac_mod_impl(std::vector<T> a, std::vector<T> b, M mod) {
  typedef IntPromotion(T, M) ResultType;
  ResultType ret = 1;
  const int size = b.size();
  int remain = size;
  for (auto iter : a) {
    for (int i = 0; remain > 0 && i < size; ++i)
      if (b[i] != 1 && (iter % b[i] == 0)) {
        iter /= b[i];
        b[i] = 1;
        --remain;
      }
    ret = mul_mod(ret, iter % mod, mod);
  }
  return ret;
}

template <typename T1, typename T2 = T1, typename M>
SL REQUIRES((is_native_integer<T1>::value && is_native_integer<T2>::value &&
             is_native_integer<M>::value))
    RETURN_T(IntPromotionT(T1, T2, int64, M))
        frac_mod(std::vector<T1> a, std::vector<T2> b, M mod) {
  typedef IntPromotion(T1, T2) T;
  typedef typename AtLeastInt64<T>::type atLeastInt64T;
  return frac_mod_impl<atLeastInt64T, M>(a, b, mod);
}

template <typename T1, typename T2, typename M>
SL REQUIRES((is_native_integer<T1>::value && is_native_integer<T2>::value &&
             is_native_integer<M>::value)) RETURN_T(IntPromotionT(T1, M))
    power_mod_impl(T1 x, T2 n, M mod) {
  if (mod == 1) return 0;
  typedef IntPromotion(T1, M) ResultType;

  ResultType ret = 1;
  auto y = regulate_mod(x, mod);
  for (; n; n >>= 1) {
    if (n & 1) ret = mul_mod(ret, y, mod);
    y = mul_mod(y, y, mod);
  }
  return ret;
}

template <typename T1, typename T2, typename M>
SL REQUIRES((is_native_integer<T1>::value && is_native_integer<T2>::value &&
             is_native_integer<M>::value)) RETURN_T(IntPromotionT(T1, int64, M))
    power_mod(T1 x, T2 n, M mod) {
  typedef typename AtLeastInt64<T1>::type atLeastInt64T1;
  return power_mod_impl<atLeastInt64T1, T2, M>(x, n, mod);
}

template <typename T1, typename T2, typename M>
SL REQUIRES((is_native_integer<T1>::value && is_native_integer<T2>::value &&
             is_native_integer<M>::value)) RETURN_T(IntPromotionT(T1, M))
    power_mod_ex_impl(T1 x, T2 n, M mod) {
  if (mod == 1) return 0;
  typedef IntPromotion(T1, M) ResultType;

  ResultType ret = 1;
  auto y = regulate_mod(x, mod);
  for (; n; n >>= 1) {
    if (n & 1) ret = mul_mod_ex(ret, y, mod);
    y = mul_mod_ex(y, y, mod);
  }
  return ret;
}

template <typename T1, typename T2, typename M>
SL REQUIRES((is_native_integer<T1>::value && is_native_integer<T2>::value &&
             is_native_integer<M>::value)) RETURN_T(IntPromotionT(T1, int64, M))
    power_mod_ex(T1 x, T2 n, M mod) {
  typedef typename AtLeastInt64<T1>::type atLeastInt64T1;
  return power_mod_ex_impl<atLeastInt64T1, T2, M>(x, n, mod);
}

struct init_direct_t {};
static const init_direct_t __init_direct{};
struct fake_int128 {};
int64 DEFAULT_MOD = 1;

// Mod context implementations
// The mod value is a member field
struct DefaultMod {
  static int64 mod() { return ::DEFAULT_MOD; }
};

// The mod value is a compiling time constant
template <int64 M>
struct CCMod {
  constexpr static int64 mod() { return M; }
};

template <typename T>
struct MemMod {
  MemMod(T M = ::DEFAULT_MOD) : M(M) {}
  T mod() const { return M; }
  T M;
};

using MemMod64 = MemMod<int64>;

// Arithmetic policy implementations
template <typename S, typename B>
struct APSB {
  typedef S ints;
  typedef B intb;
  static ints add(ints a, ints b, ints mod) {
    intb c = (intb)a + b;
    if (c >= mod) c -= mod;
    return static_cast<ints>(c);
  }
  static ints sub(ints a, ints b, ints mod) {
    intb c = (intb)a - b;
    if (c < 0) c += mod;
    return static_cast<ints>(c);
  }
  static ints mul(ints a, ints b, ints mod) {
    intb c = (intb)a * b % mod;
    return static_cast<ints>(c);
  }
  static void fix_value(ints& v, ints mod) {
    // Do nothing
  }
};

template <typename S>
struct APSB<S, S> {
  typedef S ints;
  typedef S intb;
  static ints add(ints a, ints b, ints mod) {
    a += b;
    if (a >= mod) a -= mod;
    return a;
  }
  static ints sub(ints a, ints b, ints mod) {
    a -= b;
    if (a < 0) a += mod;
    return a;
  }
  static ints mul(ints a, ints b, ints mod) {
    a = a * b % mod;
    return a;
  }
  static void fix_value(ints& v, ints mod) {
    // Do nothing
  }
};

template <typename S>
struct APSB<S, fake_int128> {
  typedef S ints;
  typedef fake_int128 intb;
  static ints add(ints a, ints b, ints mod) {
    a += b;
    if (a >= mod) a -= mod;
    return a;
  }
  static ints sub(ints a, ints b, ints mod) {
    a -= b;
    if (a < 0) a += mod;
    return a;
  }
  static ints mul(ints a, ints b, ints mod) { return mul_mod_ex(a, b, mod); }
  static void fix_value(ints& v, ints mod) {
    // Do nothing
  }
};

template <typename S>
struct APSBL {
  typedef S ints;
  typedef fake_int128 intb;
  static ints add(ints a, ints b, ints /*mod*/) { return a + b; }
  static ints sub(ints a, ints b, ints /*mod*/) { return a - b; }
  static ints mul(ints a, ints b, ints /*mod*/) { return a * b; }
  static void fix_value(ints& v, ints mod) { v = regulate_mod(v, mod); }
};

// Forward declarations related to NModNumber;
template <typename MC, typename AP>
struct NModNumber;

// MC = mod context
// AP = arithmetic policy
template <typename MC, typename AP = APSB<int64, int64> >
struct NModNumber {
  friend NModNumber operator+(const NModNumber& x, const NModNumber& y) {
    return NModNumber(AP::add(x.value_, y.value_, MC::mod()), __init_direct);
  }

  template <typename T>
  friend REQUIRES((is_native_integer<T>::value)) RETURN(NModNumber) operator+(
      const NModNumber& x, T y) {
    return x + NModNumber(y);
  }

  template <typename T>
  friend REQUIRES((is_native_integer<T>::value)) RETURN(NModNumber) operator+(
      T x, const NModNumber& y) {
    return NModNumber(x) + y;
  }

  friend NModNumber operator-(const NModNumber& x, const NModNumber& y) {
    return NModNumber(AP::sub(x.value_, y.value_, MC::mod()), __init_direct);
  }

  friend NModNumber operator*(const NModNumber& x, const NModNumber& y) {
    return NModNumber(AP::mul(x.value_, y.value_, MC::mod()), __init_direct);
  }

  friend ostream& operator<<(ostream& o, const NModNumber& m) {
    return o << m.value_;
  }

  typedef typename AP::ints ints;

  NModNumber(ints value = 0) {
    const ints M = MC::mod();
    if (value >= 0) {
      value_ = value >= M ? value % M : value;
    } else {
      value_ = value <= -M ? value % M + M : value + M;
    }
  }

  NModNumber(ints value, init_direct_t) : value_(value) {}

  static constexpr ints mod() { return MC::mod(); }

  NModNumber& operator+=(const NModNumber& y) {
    value_ = AP::add(value_, y.value_, MC::mod());
    return *this;
  }

  NModNumber& operator++() {
    value_ = AP::add(value_, 1, MC::mod());
    return *this;
  }

  NModNumber operator++(int) {
    NModNumber t(value_, __init_direct);
    ++*this;
    return t;
  }

  NModNumber& operator-=(const NModNumber& y) {
    value_ = AP::sub(value_, y.value_, MC::mod());
    return *this;
  }

  NModNumber& operator--() {
    value_ = AP::sub(value_, 1, MC::mod());
    return *this;
  }

  NModNumber operator--(int) {
    NModNumber t(value_, __init_direct);
    --*this;
    return t;
  }

  NModNumber operator+() const { return NModNumber(value_, __init_direct); }

  NModNumber operator-() const {
    return NModNumber(AP::sub(0, value_, MC::mod()), __init_direct);
  }

  NModNumber& operator*=(const NModNumber& y) {
    value_ = AP::mul(value_, y.value_, MC::mod());
    return *this;
  }

  ints value() const { return value_; }

  const NModNumber& fix_value() const {
    AP::fix_value(value_, MC::mod());
    return *this;
  }

  NModNumber& fix_value() {
    AP::fix_value(value_, MC::mod());
    return *this;
  }

 private:
  mutable ints value_;
};

template <typename MC, typename AP>
int operator==(const NModNumber<MC, AP>& x, const NModNumber<MC, AP>& y) {
  return x.fix_value().value() == y.fix_value().value();
}

template <typename MC, typename AP>
int operator!=(const NModNumber<MC, AP>& x, const NModNumber<MC, AP>& y) {
  return x.fix_value().value() != y.fix_value().value();
}

template <typename MC, typename AP>
int operator<(const NModNumber<MC, AP>& x, const NModNumber<MC, AP>& y) {
  return x.fix_value().value() < y.fix_value().value();
}

template <typename MC, typename AP>
int operator<=(const NModNumber<MC, AP>& x, const NModNumber<MC, AP>& y) {
  return x.fix_value().value() <= y.fix_value().value();
}

template <typename MC, typename AP>
int operator>(const NModNumber<MC, AP>& x, const NModNumber<MC, AP>& y) {
  return x.fix_value().value() > y.fix_value().value();
}

template <typename MC, typename AP>
int operator>=(const NModNumber<MC, AP>& x, const NModNumber<MC, AP>& y) {
  return x.fix_value().value() >= y.fix_value().value();
}

template <int64 M, typename AP = APSB<int64, int64> >
using NMod = NModNumber<CCMod<M>, AP>;

// Forward declarations related to NModNumberM;
template <typename MC, typename AP>
struct NModNumberM;

// MC = mod context
// AP = arithmetic policy
template <typename MC, typename AP = APSB<int64, int64> >
struct NModNumberM {
  friend NModNumberM operator+(const NModNumberM& x, const NModNumberM& y) {
    return NModNumberM(AP::add(x.value_, y.value_, x.mod()), x.mc,
                       __init_direct);
  }

  template <typename T>
  friend REQUIRES((is_native_integer<T>::value)) RETURN(NModNumberM) operator+(
      const NModNumberM& x, T y) {
    return x + NModNumberM(y, x.mc);
  }

  template <typename T>
  friend REQUIRES((is_native_integer<T>::value)) RETURN(NModNumberM) operator+(
      T x, const NModNumberM& y) {
    return NModNumberM(x, y.mc) + y;
  }

  friend NModNumberM operator-(const NModNumberM& x, const NModNumberM& y) {
    return NModNumberM(AP::sub(x.value_, y.value_, x.mod()), x.mc,
                       __init_direct);
  }

  template <typename T>
  friend REQUIRES((is_native_integer<T>::value)) RETURN(NModNumberM) operator-(
      const NModNumberM& x, T y) {
    return x - NModNumberM(y, x.mc);
  }

  template <typename T>
  friend REQUIRES((is_native_integer<T>::value)) RETURN(NModNumberM) operator-(
      T x, const NModNumberM& y) {
    return NModNumberM(x, y.mc) - y;
  }

  friend NModNumberM operator*(const NModNumberM& x, const NModNumberM& y) {
    return NModNumberM(AP::mul(x.value_, y.value_, x.mod()), x.mc,
                       __init_direct);
  }

  template <typename T>
  friend REQUIRES((is_native_integer<T>::value)) RETURN(NModNumberM) operator*(
      const NModNumberM& x, T y) {
    return x * NModNumberM(y, x.mc);
  }

  template <typename T>
  friend REQUIRES((is_native_integer<T>::value)) RETURN(NModNumberM) operator*(
      T x, const NModNumberM& y) {
    return NModNumberM(x, y.mc) * y;
  }

  friend ostream& operator<<(ostream& o, const NModNumberM& m) {
    return o << m.value_;
  }

  typedef typename AP::ints ints;

  NModNumberM(ints value = 0, const MC& mc = MC()) : mc(mc) {
    const ints M = mod();
    if (value >= 0) {
      value_ = value >= M ? value % M : value;
    } else {
      value_ = value <= -M ? value % M + M : value + M;
    }
  }

  NModNumberM(ints value, const MC& mc, init_direct_t)
      : value_(value), mc(mc) {}

  ints mod() const { return mc.mod(); }

  NModNumberM& operator+=(const NModNumberM& y) {
    value_ = AP::add(value_, y.value_, mod());
    return *this;
  }

  NModNumberM& operator++() {
    value_ = AP::add(value_, 1, mod());
    return *this;
  }

  NModNumberM operator++(int) {
    NModNumberM t(value_, mc, __init_direct);
    ++*this;
    return t;
  }

  NModNumberM& operator-=(const NModNumberM& y) {
    value_ = AP::sub(value_, y.value_, mod());
    return *this;
  }

  NModNumberM& operator--() {
    value_ = AP::sub(value_, 1, mod());
    return *this;
  }

  NModNumberM operator--(int) {
    NModNumberM t(value_, __init_direct);
    --*this;
    return t;
  }

  NModNumberM operator+() const {
    return NModNumberM(value_, mc, __init_direct);
  }

  NModNumberM operator-() const {
    return NModNumberM(AP::sub(0, value_, mod()), mc, __init_direct);
  }

  NModNumberM& operator*=(const NModNumberM& y) {
    value_ = AP::mul(value_, y.value_, mod());
    return *this;
  }

  ints value() const { return value_; }

  const NModNumberM& fix_value() const {
    AP::fix_value(value_, mod());
    return *this;
  }

  NModNumberM& fix_value() {
    AP::fix_value(value_, mod());
    return *this;
  }

 private:
  mutable ints value_;
  MC mc;
};

template <typename MC, typename AP>
int operator==(const NModNumberM<MC, AP>& x, const NModNumberM<MC, AP>& y) {
  return x.fix_value().value() == y.fix_value().value();
}

template <typename MC, typename AP>
int operator!=(const NModNumberM<MC, AP>& x, const NModNumberM<MC, AP>& y) {
  return x.fix_value().value() != y.fix_value().value();
}

template <typename MC, typename AP>
int operator<(const NModNumberM<MC, AP>& x, const NModNumberM<MC, AP>& y) {
  return x.fix_value().value() < y.fix_value().value();
}

template <typename MC, typename AP>
int operator<=(const NModNumberM<MC, AP>& x, const NModNumberM<MC, AP>& y) {
  return x.fix_value().value() <= y.fix_value().value();
}

template <typename MC, typename AP>
int operator>(const NModNumberM<MC, AP>& x, const NModNumberM<MC, AP>& y) {
  return x.fix_value().value() > y.fix_value().value();
}

template <typename MC, typename AP>
int operator>=(const NModNumberM<MC, AP>& x, const NModNumberM<MC, AP>& y) {
  return x.fix_value().value() >= y.fix_value().value();
}

template <int64 M, typename AP = APSB<int64, int64> >
using NModM = NModNumberM<CCMod<M>, AP>;

template <int v>
struct NModNumberIndicator {
  enum { value = v };
};

template <typename X>
struct IsNModNumber {
  static constexpr NModNumberIndicator<0> NModNumberMatch(...);

  template <typename MC, typename AP>
  static constexpr NModNumberIndicator<1> NModNumberMatch(NModNumber<MC, AP>);

  template <typename MC, typename AP>
  static constexpr NModNumberIndicator<1> NModNumberMatch(NModNumberM<MC, AP>);

  static X makeX();

  typedef decltype(NModNumberMatch(makeX())) result_type;

  enum { result = result_type::value };
};

#endif
