#ifndef __PE_POLY_ALGO__
#define __PE_POLY_ALGO__

#include "pe_base"
#include "pe_integer_util"
#include "pe_mod"
#include "pe_ntt"
#include "pe_fft"

template <typename T>
SL void adjust_poly_leading_zero(vector<T>& v) {
  int now = (int)v.size() - 1;
  while (now > 0 && v[now] == 0) --now;
  v.resize(now + 1);
}

// Multiply two polynomials of the same length.
// size result >= 2 * n
// size return = 2 * n (deg return = 2 * n - 1)
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    poly_mul_normal_internal(const T* X, const T* Y, const int n, T* result,
                             int64 mod) {
  static_assert(std::is_unsigned<T>::value, "T must be unsigned");

  const int n2 = n << 1;
  if (n <= 49) {
    fill(result, result + n2, 0);
    for (int i = 0; i < n; ++i)
      for (int j = 0; j < n; ++j) {
        result[i + j] =
            add_mod(result[i + j],
                    (typename AtLeastUint64<T>::type)X[i] * Y[j] % mod, mod);
      }
    return;
  }

  const int m1 = n + 1 >> 1;
  const int m0 = n - m1;
  const int dbm1 = m1 << 1;
  const int dbm0 = m0 << 1;
  // m1 >= m0
  const T* x0 = X + m1;
  const T* y0 = Y + m1;
  const T* x1 = X;
  const T* y1 = Y;

  T* x0y0 = new T[dbm1];
  T* x1y1 = new T[dbm1];
#pragma omp parallel sections if (n > 5000)
  {
#pragma omp section
    poly_mul_normal_internal(x0, y0, m0, x0y0, mod);
#pragma omp section
    poly_mul_normal_internal(x1, y1, m1, x1y1, mod);
  }
  if (m0 != m1) {
    x0y0[dbm0] = 0;
    x0y0[dbm0 + 1] = 0;
  }
  T* w = new T[dbm1];
  {
    T* u = new T[m1];
    T* v = new T[m1];

    for (int i = 0; i < m0; ++i)
      u[i] = add_mod(x0[i], x1[i], mod), v[i] = add_mod(y0[i], y1[i], mod);
    if (m0 != m1) {
      u[m1 - 1] = x1[m1 - 1];
      v[m1 - 1] = y1[m1 - 1];
    }
    poly_mul_normal_internal(u, v, m1, w, mod);
    delete[] u;
    delete[] v;
    for (int i = 0; i < m1 * 2; ++i)
      w[i] = sub_mod(w[i], add_mod(x0y0[i], x1y1[i], mod), mod);
  }
  fill(result, result + n2, 0);
  for (int i = 0; i < dbm0; ++i)
    result[dbm1 + i] = add_mod(result[dbm1 + i], x0y0[i], mod);
  for (int i = 0; i < dbm1; ++i)
    result[m1 + i] = add_mod(result[m1 + i], w[i], mod);
  for (int i = 0; i < dbm1; ++i) result[i] = add_mod(result[i], x1y1[i], mod);
  delete[] x0y0;
  delete[] x1y1;
  delete[] w;
}

// Multiply two polynomials.
// size result >= n + m - 1
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    poly_mul_normal(const T* X, const int n, const T* Y, const int m, T* result,
                    int64 mod) {
  typedef typename std::make_unsigned<T>::type unsignedT;
  // In case n == m, we still allocate tempory result space to meet the
  // requirement of poly_mul_normal_internal.
  const int v = max(n, m);
  vector<T> tresult(v * 2);
  if (n < m) {
    vector<T> XX(2 * v);
    for (int i = 0; i < n; ++i) {
      XX[i] = X[i];
    }
    for (int i = n; i < m; ++i) {
      XX[i] = 0;
    }
    poly_mul_normal_internal<unsignedT>((const unsignedT*)&XX[0],
                                        (const unsignedT*)Y, m,
                                        (unsignedT*)&tresult[0], mod);
  } else {
    vector<T> YY(2 * v);
    for (int i = 0; i < m; ++i) {
      YY[i] = Y[i];
    }
    for (int i = m; i < n; ++i) {
      YY[i] = 0;
    }
    poly_mul_normal_internal<unsignedT>((const unsignedT*)X,
                                        (const unsignedT*)&YY[0], n,
                                        (unsignedT*)&tresult[0], mod);
  }
  copy(tresult.begin(), tresult.begin() + n + m - 1, result);
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(vector<T>)
    poly_mul_normal(const vector<T>& X, const vector<T>& Y, int64 mod) {
  typedef typename std::make_unsigned<T>::type unsignedT;

  const int n = X.size();
  const int m = Y.size();
  const int resultSize = n + m - 1;
  if (n == m) {
    vector<T> result(2 * n);
    poly_mul_normal_internal<unsignedT>((const unsignedT*)&X[0],
                                        (const unsignedT*)&Y[0], n,
                                        (unsignedT*)&result[0], mod);
    result.resize(resultSize);
    return result;
  } else if (n > m) {
    vector<T> YY;
    vector<T> result(2 * n);
    YY.resize(n);
    for (int i = 0; i < m; ++i) YY[i] = Y[i];
    poly_mul_normal_internal<unsignedT>((const unsignedT*)&X[0],
                                        (const unsignedT*)&YY[0], n,
                                        (unsignedT*)&result[0], mod);
    result.resize(resultSize);
    return result;
  } else {
    vector<T> XX;
    vector<T> result(2 * m);
    XX.resize(m);
    for (int i = 0; i < n; ++i) XX[i] = X[i];
    poly_mul_normal_internal<unsignedT>((const unsignedT*)&XX[0],
                                        (const unsignedT*)&Y[0], m,
                                        (unsignedT*)&result[0], mod);
    result.resize(resultSize);
    return result;
  }
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    poly_mul(const T* X, const int n, const T* Y, const int m, T* result,
             int64 mod) {
  typedef typename std::make_unsigned<T>::type unsignedT;

#if HAS_POLY_MUL_NTT
  const int c = max(n, m);
  c >= 50 ? ntt::poly_mul_ntt(&X[0], n, &Y[0], m, result, mod) :
#endif
          poly_mul_normal(&X[0], n, &Y[0], m, result, mod);
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(vector<T>)
    poly_mul(const vector<T>& X, const vector<T>& Y, int64 mod) {
  const int n = (int)X.size() - 1;
  const int m = (int)Y.size() - 1;

  vector<T> result(n + m + 1);
  poly_mul(&X[0], n + 1, &Y[0], m + 1, &result[0], mod);

  return result;
}


template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    poly_inv_mod_internal(int n, const T* a, T* b, T* tmp[2], int64 mod) {
  static_assert(std::is_unsigned<T>::value, "T must be unsigned");
  if (n == 1) {
    b[0] = power_mod(a[0], mod - 2, mod);
  } else {
    const int m = n + 1 >> 1;
    poly_inv_mod_internal(m, a, b, tmp, mod);
    fill(b+m, b+n, 0);
    poly_mul(b, m, b, m, tmp[0], mod);
    if (m + m - 2 < n - 1) {
      tmp[0][n-1] = 0;
    }
    poly_mul(a, n, tmp[0], n, tmp[1], mod);
    for (int i = 0; i < n; ++i) {
      auto t = b[i] << 1;
      if (t >= mod) t -= mod;
      t = t + mod - tmp[1][i];
      if (t >= mod) t -= mod;
      b[i] = t;
    }
  }
}

// size result >= n
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    poly_inv_mod_internal(const T* x, int m, int n, T* result, int64 mod) {
  // It is assumed that mod is a prime
  const int t = max(n, m);
  int p = 1;
  while (p < t << 1) p <<= 1;

  // a
  vector<T> a(p);
  for (int i = 0; i < m; ++i) {
    a[i] = x[i];
  }
  for (int i = m; i < p; ++i) {
    a[i] = 0;
  }

  // b
  vector<T> b(n);

  // tmp
  vector<T> tmpData[2];
  T* tmp[2];
  for (int i = 0; i < 2; ++i) {
    tmpData[i].resize(p);
    tmp[i] = &tmpData[i][0];
  }

  poly_inv_mod_internal(n, &a[0], &b[0], tmp, mod);
  copy(b.begin(), b.begin() + n, result);
}

// size result >= n
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    poly_inv_mod(const T* x, int m, int n, T* result, int64 mod) {
  typedef typename std::make_unsigned<T>::type unsignedT;
  poly_inv_mod_internal<unsignedT>((const unsignedT*)x, m, n,
                                   (unsignedT*)result, mod);
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(vector<T>)
    poly_inv_mod(const vector<T>& x, int n, int64 mod) {
  // It is assumed that mod is a prime
  const int m = x.size();
  const int t = max(n, m);
  int p = 1;
  while (p < t << 1) p <<= 1;

  // b
  vector<T> b(p);

  poly_inv_mod(&x[0], m, n, &b[0], mod);
  b.resize(n);
  return b;
}

// size r >= m
// size q >= n - m + 1
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    poly_div_and_mod_dc_internal(const T* X, int n, const T* Y, int m, T* q,
                                 T* r, int64 mod) {
  static_assert(std::is_unsigned<T>::value, "T must be unsigned");

  if (m > n) {
    if (r) {
      copy(X, X + n, r);
      fill(r + n, r + m, 0);
    }
    if (q) {
      q[0] = 0;
    }
    return;
  }
  vector<T> YR(m);
  for (int i = 0; i < m; ++i) YR[i] = Y[m - 1 - i];
  vector<T> IYR = poly_inv_mod(YR, n - m + 1, mod);
  vector<T> XR(n);
  for (int i = 0; i < n; ++i) XR[i] = X[n - 1 - i];
  vector<T> Z = poly_mul(XR, IYR, mod);
  Z.resize(n - m + 1);
  reverse(Z.begin(), Z.end());
  if (q) {
    copy(Z.begin(), Z.end(), q);
  }
  if (r) {
    vector<T> tmp(n);
    poly_mul(&Y[0], m, &Z[0], n - m + 1, &tmp[0], mod);
    for (int i = 0; i < m; ++i) {
      r[i] = X[i] >= tmp[i] ? X[i] - tmp[i] : X[i] + mod - tmp[i];
    }
  }
}

// size q >= n - m + 1
// size r >= m
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    poly_div_and_mod_normal_internal(const T* X, int n, const T* Y, int m, T* q,
                                     T* r, int64 mod) {
  static_assert(std::is_unsigned<T>::value, "T must be unsigned");

  if (m > n) {
    if (r) {
      copy(X, X + n, r);
      fill(r + n, r + m, 0);
    }
    if (q) {
      q[0] = 0;
    }
    return;
  }

  int top = 0;
  vector<T> tmp(X, X + n);
  int64 t = inv_of(Y[m - 1], mod);
  for (int i = n - 1; i >= m - 1; --i) {
    int64 u = tmp[i] * t % mod;
    for (int j = i, k = m - 1; k >= 0; --j, --k) {
      tmp[j] = sub_mod(tmp[j], u * Y[k] % mod, mod);
    }
    if (q) {
      q[top++] = u;
    }
  }
  if (q) {
    reverse(q, q + top);
  }
  if (r) {
    copy(tmp.begin(), tmp.begin() + m, r);
  }
}

// For input:
// size q >= max(deg X - deg Y + 1, 1)
// size r >= m
// For output:
// deg q = max(deg X - deg Y + 1, 1)
// For C-style method: deg r = deg Y (with possible leading zeros)
// For C++ style method: deg r <= deg Y (the leading zeros are ignored)
#define POLY_DIV_AND_MOD_IMPL(poly_div_and_mod, poly_div_and_mod_internal)     \
  template <typename T>                                                        \
  SL REQUIRES((is_native_integer<T>::value)) RETURN(void)                      \
      poly_div_and_mod(const T* X, const int n, const T* Y, const int m, T* q, \
                       T* r, int64 mod) {                                      \
    typedef typename std::make_unsigned<T>::type unsignedT;                    \
    poly_div_and_mod_internal<unsignedT>((const unsignedT*)X, n,               \
                                         (const unsignedT*)Y, m,               \
                                         (unsignedT*)q, (unsignedT*)r, mod);   \
  }                                                                            \
                                                                               \
  template <typename T>                                                        \
  SL REQUIRES((is_native_integer<T>::value))                                   \
      RETURN(tuple<vector<T>, vector<T>>) poly_div_and_mod(                    \
          const vector<T>& X, const vector<T>& Y, int64 mod) {                 \
    const int n = (int)X.size() - 1;                                           \
    const int m = (int)Y.size() - 1;                                           \
                                                                               \
    vector<T> q(max(n - m + 1, 1));                                            \
    vector<T> r(m + 1);                                                        \
    poly_div_and_mod(&X[0], n + 1, &Y[0], m + 1, &q[0], &r[0], mod);           \
                                                                               \
    r[m] = 0;                                                                  \
    adjust_poly_leading_zero(r);                                               \
    return make_tuple(std::move(q), std::move(r));                             \
  }

#define POLY_DIV_IMPL(poly_div, poly_div_and_mod)                          \
  template <typename T>                                                    \
  SL REQUIRES((is_native_integer<T>::value)) RETURN(void) poly_div(        \
      const T* X, const int n, const T* Y, const int m, T* q, int64 mod) { \
    poly_div_and_mod(X, n, Y, m, q, (T*)NULL, mod);                        \
  }                                                                        \
                                                                           \
  template <typename T>                                                    \
  SL REQUIRES((is_native_integer<T>::value)) RETURN(vector<T>)             \
      poly_div(const vector<T>& X, const vector<T>& Y, int64 mod) {        \
    vector<T> q(max((int)X.size() - (int)Y.size() + 1, 1));                \
    poly_div(&X[0], X.size(), &Y[0], Y.size(), &q[0], mod);                \
    return std::move(q);                                                   \
  }

#define POLY_MOD_IMPL(poly_mod, poly_div_and_mod)                          \
  template <typename T>                                                    \
  SL REQUIRES((is_native_integer<T>::value)) RETURN(void) poly_mod(        \
      const T* X, const int n, const T* Y, const int m, T* r, int64 mod) { \
    poly_div_and_mod(X, n, Y, m, (T*)NULL, r, mod);                        \
  }                                                                        \
                                                                           \
  template <typename T>                                                    \
  SL REQUIRES((is_native_integer<T>::value)) RETURN(vector<T>)             \
      poly_mod(const vector<T>& X, const vector<T>& Y, int64 mod) {        \
    vector<T> r(Y.size());                                                 \
    poly_mod(&X[0], X.size(), &Y[0], Y.size(), &r[0], mod);                \
    adjust_poly_leading_zero(r);                                           \
    return std::move(r);                                                   \
  }


template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    poly_div_and_mod(const T* X, const int n, const T* Y, const int m, T* q,
                     T* r, int64 mod) {
  typedef typename std::make_unsigned<T>::type unsignedT;
  // This condition also includes the case n < m;
  if ((n - m) * m <= 1000) {
    poly_div_and_mod_normal_internal<unsignedT>(
        (const unsignedT*)X, n, (const unsignedT*)Y, m, (unsignedT*)q,
        (unsignedT*)r, mod);
  } else {
    poly_div_and_mod_dc_internal<unsignedT>((const unsignedT*)X, n,
                                            (const unsignedT*)Y, m,
                                            (unsignedT*)q, (unsignedT*)r, mod);
  }
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(tuple<vector<T>, vector<T>>)
    poly_div_and_mod(const vector<T>& X, const vector<T>& Y, int64 mod) {
  const int n = (int)X.size() - 1;
  const int m = (int)Y.size() - 1;

  vector<T> q(max(n - m + 1, 1));
  vector<T> r(m + 1);
  poly_div_and_mod(&X[0], n + 1, &Y[0], m + 1, &q[0], &r[0], mod);

  r[m] = 0;
  adjust_poly_leading_zero(r);
  return make_tuple(std::move(q), std::move(r));
}

POLY_DIV_AND_MOD_IMPL(poly_div_and_mod_dc, poly_div_and_mod_dc_internal)
POLY_DIV_IMPL(poly_div_dc, poly_div_and_mod_dc)
POLY_MOD_IMPL(poly_mod_dc, poly_div_and_mod_dc)

POLY_DIV_AND_MOD_IMPL(poly_div_and_mod_normal, poly_div_and_mod_normal_internal)
POLY_DIV_IMPL(poly_div_normal, poly_div_and_mod_normal)
POLY_MOD_IMPL(poly_mod_normal, poly_div_and_mod_normal)

POLY_DIV_IMPL(poly_div, poly_div_and_mod)
POLY_MOD_IMPL(poly_mod, poly_div_and_mod)

struct PSPTree {
  int64 mod;

  int64* v;
  int n;

  vector<int64> p;

  PSPTree* L;
  PSPTree* R;

  ~PSPTree() {
    if (L) delete L;
    if (R) delete R;
  }

  static PSPTree* build_minus(int64* values, int n, int64 mod) {
    PSPTree* ptree = new PSPTree();
    auto& tree = *ptree;
    tree.mod = mod;
    tree.v = values;
    tree.n = n;
    tree.L = tree.R = NULL;
    if (n == 1) {
      // -x0 + x
      int64 t = values[0];
      tree.p.emplace_back(t == 0 ? 0 : mod - t);
      tree.p.emplace_back(1 % mod);
      return ptree;
    }
    int c1 = n >> 1, c2 = n - c1;
    tree.L = build_minus(values, c1, mod);
    tree.R = build_minus(values + c1, c2, mod);
    tree.p = poly_mul(tree.L->p, tree.R->p, mod);
    return ptree;
  }

  static PSPTree* build_plus(int64* values, int n, int64 mod) {
    PSPTree* ptree = new PSPTree();
    auto& tree = *ptree;
    tree.mod = mod;
    tree.v = values;
    tree.n = n;
    tree.L = tree.R = NULL;
    if (n == 1) {
      // x0 + x
      int64 t = values[0];
      tree.p.emplace_back(t);
      tree.p.emplace_back(1);
      return ptree;
    }
    int c1 = n >> 1, c2 = n - c1;
    tree.L = build_plus(values, c1, mod);
    tree.R = build_plus(values + c1, c2, mod);
    tree.p = poly_mul(tree.L->p, tree.R->p, mod);
    return ptree;
  }
};

// size(V) = n
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    poly_evaluate_mod_normal_internal(const T* X, int n, PSPTree* psp, T* result,
                                    int64 mod) {
  if (psp->n == 1) {
    result[0] = (X[0] + psp->v[0] * X[1]) % mod;
    return;
  }
  int c1 = psp->n >> 1;
  int c2 = psp->n - c1;

  vector<T> m(max(psp->L->p.size(), psp->R->p.size()));
  poly_mod(X, n, (const T*)&psp->L->p[0], psp->L->p.size(), &m[0], mod);
  poly_evaluate_mod_normal_internal(&m[0], (int)psp->L->p.size() - 1, psp->L,
                                  result, mod);
  poly_mod(X, n, (const T*)&psp->R->p[0], psp->R->p.size(), &m[0], mod);
  poly_evaluate_mod_normal_internal(&m[0], (int)psp->R->p.size() - 1, psp->R,
                                  result + c1, mod);
}

// size(V) = n
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    poly_evaluate_mod_normal_internal(const T* X, int n, const T* V, T* result,
                               int64 mod) {
  static_assert(std::is_unsigned<T>::value, "T must be unsigned");
  PSPTree* psp = PSPTree::build_minus((int64*)V, n, mod);
  poly_evaluate_mod_normal_internal(X, n, psp, result, mod);
  delete psp;
}

// Tellegen's Principle into Pratice
// A. Bostan, G. Lecerf, E. Schost
// size(V) = n
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    poly_evaluate_mod_bls_internal(const T* X, int n, const T* V, T* result,
                                  int64 mod) {
  static_assert(std::is_unsigned<T>::value, "T must be unsigned");
  vector<vector<vector<T>>> tree;
  {
    vector<vector<T>> from;
    for (int i = 0; i < n; ++i) {
      vector<T> tmp{(V[i] == 0 ? 0 : mod - V[i]) % mod, 1};
      from.push_back(tmp);
    }

    tree.push_back(from);
    int lastSize = n;
    while (lastSize != 1) {
      vector<vector<T>> to;
      for (int i = 0; i < lastSize / 2; ++i) {
        to.push_back(poly_mul(from[i * 2], from[i * 2 + 1], mod));
      }
      if (lastSize & 1) {
        to.push_back(from[lastSize - 1]);
      }
      lastSize = lastSize + 1 >> 1;
      from.swap(to);
      tree.push_back(from);
    }
  }

  const int d = (int)tree.size() - 1;
  {
    auto alpha = tree[d][0];
    reverse(alpha.begin(), alpha.end());
    alpha = poly_inv_mod(alpha, n, mod);
    reverse(alpha.begin(), alpha.end());

    vector<uint64> b(X, X + n);
    int degb = sz(b) - 1;
    auto t = poly_mul(alpha, b, mod);
    assert(sz(t) - 1 == n - 1 + degb);
    for (int i = n - 1, j = 0; i <= (n - 1) + degb; ++i, ++j) {
      t[j] = t[i];
    }
    assert(degb + 1 >= n);
    t.resize(n);
    reverse(t.begin(), t.end());

    vector<vector<T>> c(n);
    c[0] = std::move(t);
    // c[0] = vector<uint64>(X, X+n);
    for (int i = d; i > 0; --i) {
      int hi = tree[i].size();
      for (int j = hi - 1; j >= 0; --j) {
        int u = j * 2;
        int v = u + 1;
        if (v >= tree[i - 1].size()) {
          c[u] = c[j];
          continue;
        }
        int nn = tree[i][j].size() - 1;
        vector<T> x;
        {
          const int os = sz(tree[i - 1][2 * j]);
          reverse(tree[i - 1][2 * j].begin(), tree[i - 1][2 * j].end());
          x = poly_mul(tree[i - 1][2 * j], c[j], mod);
          int s = 0;
          for (int i = os - 1, j = 0; i < x.size() && j < nn; ++i, ++j) {
            x[j] = x[i];
            ++s;
          }
          x.resize(s);
        }
        vector<T> y;
        {
          const int os = sz(tree[i - 1][2 * j + 1]);
          reverse(tree[i - 1][2 * j + 1].begin(), tree[i - 1][2 * j + 1].end());
          y = poly_mul(tree[i - 1][2 * j + 1], c[j], mod);
          int s = 0;
          for (int i = os - 1, j = 0; i < y.size() && j < nn; ++i, ++j) {
            y[j] = y[i];
            ++s;
          }
          y.resize(s);
        }
        c[2 * j + 1] = std::move(x);
        c[2 * j] = std::move(y);
      }
    }
    for (int i = 0; i < n; ++i) result[i] = c[i][0];
  }
}

// size(V) = n
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    poly_evaluate_mod_normal(const T* X, const int n, const T* V, T* result,
                      int64 mod) {
  typedef typename std::make_unsigned<T>::type unsignedT;
  poly_evaluate_mod_normal_internal<unsignedT>(
      (const unsignedT*)X, n, (const unsignedT*)V, (unsignedT*)result, mod);
}

// size x = size v
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(vector<T>)
    poly_evaluate_mod_normal(const vector<T>& X, const vector<T>& V, int64 mod) {
  const int n = (int)X.size();
  vector<T> result(n);
  poly_evaluate_mod_normal(&X[0], n, &V[0], &result[0], mod);
  return result;
}

// size(V) = n
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    poly_evaluate_mod_bls(const T* X, const int n, const T* V, T* result,
                      int64 mod) {
  typedef typename std::make_unsigned<T>::type unsignedT;
  poly_evaluate_mod_bls_internal<unsignedT>(
      (const unsignedT*)X, n, (const unsignedT*)V, (unsignedT*)result, mod);
}

// size x = size v
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(vector<T>)
    poly_evaluate_mod_bls(const vector<T>& X, const vector<T>& V, int64 mod) {
  const int n = (int)X.size();
  vector<T> result(n);
  poly_evaluate_mod_bls(&X[0], n, &V[0], &result[0], mod);
  return result;
}

// Known f[0],f[1],f[2],...,f[d]
// Calcupate f[0+offset],f[1+offset],f[2+offset],...,f[d+offset]
// offset > d
template <typename T>
SL REQUIRES((is_native_integer<T>::value))
RETURN(void)
poly_offset_evaluate_internal(int d, const T* h, T* result, int64 offset, T* preFactInv,
                        T mod) {
  static_assert(std::is_unsigned<T>::value, "T must be unsigned");

  vector<T> A(d + 1);
  vector<T> B(2*d + 1);
  vector<T> C(3*d + 1);
  vector<T> T0(2*d + 2);
  vector<T> T1(2*d + 2);
  for (int i = 0; i <= d; ++i) {
    auto t = mul_mod(h[i], preFactInv[i], mod);
    t = mul_mod(t, preFactInv[d - i], mod);
    if ((d - i) & 1) {
      A[i] = t == 0 ? 0 : mod - t;
    } else {
      A[i] = t;
    }
  }

  T0[0] = T1[0] = 1;
  for (int i = -d, j = 1; i <= d; ++i, ++j) {
    T0[j] = mul_mod(T0[j - 1], offset + i, mod);
  }

  T1[2 * d + 1] = power_mod(T0[2 * d + 1], mod - 2, mod);
  for (int i = d - 1, j = 2 * d; i >= -d; --i, --j) {
    T1[j] = mul_mod(T1[j + 1], offset + i + 1, mod);
  }

  for (int i = -d, j = 1; i <= d; ++i, ++j) {
    B[j - 1] = mul_mod(T1[j], T0[j - 1], mod);
  }

  poly_mul(&A[0], d + 1, &B[0], 2 * d + 1, &C[0], mod);
  copy(&C[0] + d, &C[0] + 2 * d + 1, result);

  for (int i = 0, j = d + 1; i <= d; ++i, ++j) {
    result[i] = mul_mod(result[i], T0[j], mod);
    result[i] = mul_mod(result[i], T1[j - d - 1], mod);
  }
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value))
RETURN(void)
poly_offset_evaluate(int d, const T* h, T* result, int64 offset, T* preFactInv,
                        T mod) {
  typedef typename std::make_unsigned<T>::type unsignedT;
  poly_offset_evaluate_internal<unsignedT>(
      d, (const unsignedT*)h, (unsignedT*)result, offset, preFactInv, mod);
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value))
RETURN(vector<T>)
poly_offset_evaluate(const vector<T>& values, int64 offset, T* preFactInv,
                T mod) {
  const int d = (int)values.size() - 1;
  vector<T> result(d+1);
  poly_offset_evaluate(
      d, &values[0], &result[0], offset, preFactInv, mod);
  return std::move(result);
}

// Compuate n! % p (2 <= p < 2^32)
// Algorithm source: // https://min-25.hatenablog.com/entry/2017/04/10/215046
struct FactModer {
  FactModer(uint64 p) : p(p) {
    init();
  }

  // Evaluate (x+v*0+1)*(x+v*1+1)*(x+v*2+1)*...*(x+v*(d-1)+1) at 0, 1, 2, ..., d
  void evaluate(int d, uint64* result, uint64 v) {
    if (d == 1) {
      result[0] = 1;
      result[1] = p == 2 ? 0 : 2;
      return;
    }

    const int halfD = d >> 1;
    evaluate(halfD, result, v);
    copy(result, result + halfD + 1, &G0[0]);
    // #pragma omp parallel sections if (d >= 10000)
    {
      // #pragma omp section
      poly_offset_evaluate<uint64>(halfD, result, &G1[0], halfD + 1, &preFactInv[0], p);

      // #pragma omp section
      poly_offset_evaluate<uint64>(halfD, result, &G2[0], v * halfD, &preFactInv[0], p);

      // #pragma omp section
      poly_offset_evaluate<uint64>(halfD, result, &G3[0], v * halfD + halfD, &preFactInv[0], p);
    }

    for (int i = 0; i <= halfD; ++i) {
      result[i] = mul_mod(G0[i], G2[i], p);
    }
    for (int i = halfD + 1, j = 0; i <= halfD * 2; ++i, ++j) {
      result[i] = mul_mod(G1[j], G3[j + 1], p);
    }

    if (d & 1) {
      uint64 tmp = (v * (d - 1) + 1) % p;
      for (int i = 0; i <= 2 * halfD; ++i) {
        result[i] = mul_mod(result[i], tmp++, p);
        if (tmp >= p) tmp -= p;
      }
      uint64 t = 1;
      uint64 c = d + 1;
      for (int i = 0; i < d; ++i) {
        t = mul_mod(t, c, p);
        c += v;
        if (c >= p) c -= p;
      }
      result[d] = t;
    }
  }

  int64 cal(int64 n) {
    if (n >= p) return 0;
    if (n < q) return preFact[n];

    int64 m = sqrt(n);
    uint64 ret = 1;

    for (int64 i = m * m + 1; i <= n; ++i) {
      ret = mul_mod(ret, i, p);
    }

    evaluate(m, (uint64*)&V[0], m);

    for (int i = 0; i < m; ++i) {
      ret = mul_mod(ret, V[i], p);
    }
    return (int64)ret;
  }

  void init() {
    q = sqrt(p);
    while (q * q < p) ++q;
    q <<= 1;
    q += 1;
    preFact.resize(q);
    preFactInv.resize(q);
    init_seq_prod<uint64>(&preFact[0], 1, q - 1, p);
    init_seq_prod_inv<uint64>(&preFactInv[0], 1, q - 1, p, power_mod<uint64>(preFact[q-1], p-2, p));
    G0.resize(q);
    G1.resize(q);
    G2.resize(q);
    G3.resize(q);
    V.resize(q);
  }

  vector<uint64> preFact, preFactInv;
  vector<uint64> G0, G1, G2, G3;
  vector<uint64> V;
  uint64 p;
  uint64 q;
};

// Initialize the bernoulli numbers.
SL void init_bernoulli_number(int64* dest, int n, int64* invs, int64 mod) {
  vector<uint64> t(n);
  uint64 v = 1;
  for (int i = 0; i < n; ++i) {
    v = v * invs[i + 1] % mod;
    t[i] = v;
  }

  auto result = poly_inv_mod<uint64>(t, n, mod);

  uint64 c = 1;
  dest[0] = result[0];
  for (int i = 1; i < n; ++i) {
    c = c * i % mod;
    dest[i] = result[i] * c % mod;
  }
}

SL void init_bernoulli_number(int64* dest, int n, int64 mod) {
  vector<uint64> invs(n + 1);
  // See init_inv
  {
    invs[0] = 0;
    invs[1] = 1;
    for (int i = 2; i <= n; ++i) {
      const uint64 t = mod / i;
      const uint64 k = mod % i;
      const uint64 v = t * t % mod;
      const uint64 u = invs[k] * invs[k] % mod;
      invs[i] = i * v % mod * u % mod;
    }
  }
  init_bernoulli_number(dest, n, (int64*)&invs[0], mod);
}

// Find 1^k + 2^k + ... n^k
SL int64 power_sum(int64 n, int64 k, int64 mod) {
  const int64 n1 = (n + 1) % mod;
  const int64 k1 = k + 1;
  int64 ret = 0;
  vector<uint64> invs(k1 + 1);
  // See init_inv
  {
    invs[0] = 0;
    invs[1] = 1;
    for (int i = 2; i <= k1; ++i) {
      const uint64 t = mod / i;
      const uint64 k = mod % i;
      const uint64 v = t * t % mod;
      const uint64 u = invs[k] * invs[k] % mod;
      invs[i] = i * v % mod * u % mod;
    }
  }
  vector<int64> b(k1);
  init_bernoulli_number(&b[0], k1, mod);
  int64 c = 1 % mod;
  int64 d = 1;
  for (int64 i = 1; i <= k1; ++i) {
    c = c * (k1 - i + 1) % mod;
    c = c * invs[i] % mod;
    d = d * n1 % mod;
    ret += c * b[k1 - i] % mod * d % mod;
    if (ret >= mod) ret -= mod;
  }
  ret = ret * invs[k1] % mod;
  return ret;
}

// gf_first, gf_at is good for the case size(A) is small.
// Otherwise, A.inv(n) * B is better.

// Finds the coefficient of x^0..x^n of f such that: A*f = B
// Returns empty vector if there is no integer solution.
// O(size(A) * n)
SL vector<int64> gf_first(const vector<int64>& A, const vector<int64>& B, const int n, const int64 mod) {
  const int sa = sz(A);
  const int sb = sz(B);
  PE_ASSERT(sa > 0);
  PE_ASSERT(sb > 0);

  int64 v, u;
  int has = solve_linear_equation<int64>(A[0], 1, mod, v, u);
  if (!has) return vector<int64>();

  vector<int64> result(n + 1, 0);

  // if u < mod, we have more than one solution.
  PE_ASSERT(u == mod);
  const int64 invA0 = v;
  result[0] = invA0 * B[0] % mod;

  for (int i = 1; i <= n; ++i) {
    int64 t = regulate_mod(i < sb ? B[i] : 0, mod);
    for (int j = 1; j <= min(i, sa - 1); ++j) {
      t = sub_mod(t, (j < sa ? A[j] : 0) * result[i - j] % mod, mod);
    }
    result[i] = invA0 * t % mod;
  }

  return result;
}

// Finds the coefficient of x^n of f such that: A*f = B
// Returns -1 if there is no integer solution.
// O(size(A)^3 * log n) for big n
SL int64 gf_at(const vector<int64>& A, const vector<int64>& B, const int64 n, const int64 mod) {
  const int sa = sz(A);
  const int sb = sz(B);
  PE_ASSERT(sa > 0);
  PE_ASSERT(sb > 0);

  int64 v, u;
  int has = solve_linear_equation<int64>(A[0], 1, mod, v, u);
  if (!has) return -1;

  const int64 m = min((int64)max(sa - 1, sb - 1), n);
  vector<int64> result(m + 1, 0);

  // if u < mod, we have more than one solution.
  PE_ASSERT(u == mod);
  const int64 invA0 = v;
  result[0] = invA0 * B[0] % mod;

  for (int i = 1; i <= m; ++i) {
    int64 t = regulate_mod(i < sb ? B[i] : 0, mod);
    for (int j = 1; j <= min(i, sa - 1); ++j) {
      t = sub_mod(t, (j < sa ? A[j] : 0) * result[i - j] % mod, mod);
    }
    result[i] = invA0 * t % mod;
  }

  if (m == n) {
    return result[m];
  }

  const int64 D = sa - 1;
  const int64 size = D * D;
  string data(size * sizeof(int64) * 3, '\0');
  int64* buffer = (int64*)data.c_str();

  int64* mat = buffer;
  int64* res = mat + size;
  int64* tmp = res + size;

  for (int i = 0; i < D; ++i) {
    mat[i] = invA0 * regulate_mod(i + 1 < sa ? -A[i + 1] : 0, mod) % mod;
  }
  for (int i = 1; i < D; ++i) {
    (mat + i * D)[i - 1] = 1;
  }
  for (int i = 0; i < D; ++i) {
    res[i] = result[m - i];
  }

  for (int64 t = n - m; t > 0; t >>= 1) {
    if (t & 1) {
      mat_mul_vec_mod(mat, res, tmp, mod, static_cast<int>(D));
      swap(res, tmp);
    }
    if (t > 1) {
      mat_mul_mat_mod(mat, mat, tmp, mod, static_cast<int>(D));
      swap(mat, tmp);
    }
  }
  return res[0];
}
#endif